
1. LED Toggle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f64  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08004024  08004024  00005024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004118  08004118  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004118  08004118  00005118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004120  08004120  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004120  08004120  00005120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004124  08004124  00005124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004128  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  2000000c  08004134  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08004134  00006144  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000108e4  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002874  00000000  00000000  00016918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  00019190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000afa  00000000  00000000  00019fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c2bf  00000000  00000000  0001aaba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013613  00000000  00000000  00036d79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b1ff1  00000000  00000000  0004a38c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fc37d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003194  00000000  00000000  000fc3c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000ff554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800400c 	.word	0x0800400c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800400c 	.word	0x0800400c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	@ (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	@ (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			@ (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	4657      	mov	r7, sl
 8000438:	464e      	mov	r6, r9
 800043a:	4645      	mov	r5, r8
 800043c:	46de      	mov	lr, fp
 800043e:	b5e0      	push	{r5, r6, r7, lr}
 8000440:	0004      	movs	r4, r0
 8000442:	000d      	movs	r5, r1
 8000444:	4692      	mov	sl, r2
 8000446:	4699      	mov	r9, r3
 8000448:	b083      	sub	sp, #12
 800044a:	428b      	cmp	r3, r1
 800044c:	d830      	bhi.n	80004b0 <__udivmoddi4+0x7c>
 800044e:	d02d      	beq.n	80004ac <__udivmoddi4+0x78>
 8000450:	4649      	mov	r1, r9
 8000452:	4650      	mov	r0, sl
 8000454:	f000 f8ba 	bl	80005cc <__clzdi2>
 8000458:	0029      	movs	r1, r5
 800045a:	0006      	movs	r6, r0
 800045c:	0020      	movs	r0, r4
 800045e:	f000 f8b5 	bl	80005cc <__clzdi2>
 8000462:	1a33      	subs	r3, r6, r0
 8000464:	4698      	mov	r8, r3
 8000466:	3b20      	subs	r3, #32
 8000468:	d434      	bmi.n	80004d4 <__udivmoddi4+0xa0>
 800046a:	469b      	mov	fp, r3
 800046c:	4653      	mov	r3, sl
 800046e:	465a      	mov	r2, fp
 8000470:	4093      	lsls	r3, r2
 8000472:	4642      	mov	r2, r8
 8000474:	001f      	movs	r7, r3
 8000476:	4653      	mov	r3, sl
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d83b      	bhi.n	80004f8 <__udivmoddi4+0xc4>
 8000480:	42af      	cmp	r7, r5
 8000482:	d100      	bne.n	8000486 <__udivmoddi4+0x52>
 8000484:	e079      	b.n	800057a <__udivmoddi4+0x146>
 8000486:	465b      	mov	r3, fp
 8000488:	1ba4      	subs	r4, r4, r6
 800048a:	41bd      	sbcs	r5, r7
 800048c:	2b00      	cmp	r3, #0
 800048e:	da00      	bge.n	8000492 <__udivmoddi4+0x5e>
 8000490:	e076      	b.n	8000580 <__udivmoddi4+0x14c>
 8000492:	2200      	movs	r2, #0
 8000494:	2300      	movs	r3, #0
 8000496:	9200      	str	r2, [sp, #0]
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	465a      	mov	r2, fp
 800049e:	4093      	lsls	r3, r2
 80004a0:	9301      	str	r3, [sp, #4]
 80004a2:	2301      	movs	r3, #1
 80004a4:	4642      	mov	r2, r8
 80004a6:	4093      	lsls	r3, r2
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	e029      	b.n	8000500 <__udivmoddi4+0xcc>
 80004ac:	4282      	cmp	r2, r0
 80004ae:	d9cf      	bls.n	8000450 <__udivmoddi4+0x1c>
 80004b0:	2200      	movs	r2, #0
 80004b2:	2300      	movs	r3, #0
 80004b4:	9200      	str	r2, [sp, #0]
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <__udivmoddi4+0x8e>
 80004be:	601c      	str	r4, [r3, #0]
 80004c0:	605d      	str	r5, [r3, #4]
 80004c2:	9800      	ldr	r0, [sp, #0]
 80004c4:	9901      	ldr	r1, [sp, #4]
 80004c6:	b003      	add	sp, #12
 80004c8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ca:	46bb      	mov	fp, r7
 80004cc:	46b2      	mov	sl, r6
 80004ce:	46a9      	mov	r9, r5
 80004d0:	46a0      	mov	r8, r4
 80004d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d4:	4642      	mov	r2, r8
 80004d6:	469b      	mov	fp, r3
 80004d8:	2320      	movs	r3, #32
 80004da:	1a9b      	subs	r3, r3, r2
 80004dc:	4652      	mov	r2, sl
 80004de:	40da      	lsrs	r2, r3
 80004e0:	4641      	mov	r1, r8
 80004e2:	0013      	movs	r3, r2
 80004e4:	464a      	mov	r2, r9
 80004e6:	408a      	lsls	r2, r1
 80004e8:	0017      	movs	r7, r2
 80004ea:	4642      	mov	r2, r8
 80004ec:	431f      	orrs	r7, r3
 80004ee:	4653      	mov	r3, sl
 80004f0:	4093      	lsls	r3, r2
 80004f2:	001e      	movs	r6, r3
 80004f4:	42af      	cmp	r7, r5
 80004f6:	d9c3      	bls.n	8000480 <__udivmoddi4+0x4c>
 80004f8:	2200      	movs	r2, #0
 80004fa:	2300      	movs	r3, #0
 80004fc:	9200      	str	r2, [sp, #0]
 80004fe:	9301      	str	r3, [sp, #4]
 8000500:	4643      	mov	r3, r8
 8000502:	2b00      	cmp	r3, #0
 8000504:	d0d8      	beq.n	80004b8 <__udivmoddi4+0x84>
 8000506:	07fb      	lsls	r3, r7, #31
 8000508:	0872      	lsrs	r2, r6, #1
 800050a:	431a      	orrs	r2, r3
 800050c:	4646      	mov	r6, r8
 800050e:	087b      	lsrs	r3, r7, #1
 8000510:	e00e      	b.n	8000530 <__udivmoddi4+0xfc>
 8000512:	42ab      	cmp	r3, r5
 8000514:	d101      	bne.n	800051a <__udivmoddi4+0xe6>
 8000516:	42a2      	cmp	r2, r4
 8000518:	d80c      	bhi.n	8000534 <__udivmoddi4+0x100>
 800051a:	1aa4      	subs	r4, r4, r2
 800051c:	419d      	sbcs	r5, r3
 800051e:	2001      	movs	r0, #1
 8000520:	1924      	adds	r4, r4, r4
 8000522:	416d      	adcs	r5, r5
 8000524:	2100      	movs	r1, #0
 8000526:	3e01      	subs	r6, #1
 8000528:	1824      	adds	r4, r4, r0
 800052a:	414d      	adcs	r5, r1
 800052c:	2e00      	cmp	r6, #0
 800052e:	d006      	beq.n	800053e <__udivmoddi4+0x10a>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d9ee      	bls.n	8000512 <__udivmoddi4+0xde>
 8000534:	3e01      	subs	r6, #1
 8000536:	1924      	adds	r4, r4, r4
 8000538:	416d      	adcs	r5, r5
 800053a:	2e00      	cmp	r6, #0
 800053c:	d1f8      	bne.n	8000530 <__udivmoddi4+0xfc>
 800053e:	9800      	ldr	r0, [sp, #0]
 8000540:	9901      	ldr	r1, [sp, #4]
 8000542:	465b      	mov	r3, fp
 8000544:	1900      	adds	r0, r0, r4
 8000546:	4169      	adcs	r1, r5
 8000548:	2b00      	cmp	r3, #0
 800054a:	db24      	blt.n	8000596 <__udivmoddi4+0x162>
 800054c:	002b      	movs	r3, r5
 800054e:	465a      	mov	r2, fp
 8000550:	4644      	mov	r4, r8
 8000552:	40d3      	lsrs	r3, r2
 8000554:	002a      	movs	r2, r5
 8000556:	40e2      	lsrs	r2, r4
 8000558:	001c      	movs	r4, r3
 800055a:	465b      	mov	r3, fp
 800055c:	0015      	movs	r5, r2
 800055e:	2b00      	cmp	r3, #0
 8000560:	db2a      	blt.n	80005b8 <__udivmoddi4+0x184>
 8000562:	0026      	movs	r6, r4
 8000564:	409e      	lsls	r6, r3
 8000566:	0033      	movs	r3, r6
 8000568:	0026      	movs	r6, r4
 800056a:	4647      	mov	r7, r8
 800056c:	40be      	lsls	r6, r7
 800056e:	0032      	movs	r2, r6
 8000570:	1a80      	subs	r0, r0, r2
 8000572:	4199      	sbcs	r1, r3
 8000574:	9000      	str	r0, [sp, #0]
 8000576:	9101      	str	r1, [sp, #4]
 8000578:	e79e      	b.n	80004b8 <__udivmoddi4+0x84>
 800057a:	42a3      	cmp	r3, r4
 800057c:	d8bc      	bhi.n	80004f8 <__udivmoddi4+0xc4>
 800057e:	e782      	b.n	8000486 <__udivmoddi4+0x52>
 8000580:	4642      	mov	r2, r8
 8000582:	2320      	movs	r3, #32
 8000584:	2100      	movs	r1, #0
 8000586:	1a9b      	subs	r3, r3, r2
 8000588:	2200      	movs	r2, #0
 800058a:	9100      	str	r1, [sp, #0]
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	2201      	movs	r2, #1
 8000590:	40da      	lsrs	r2, r3
 8000592:	9201      	str	r2, [sp, #4]
 8000594:	e785      	b.n	80004a2 <__udivmoddi4+0x6e>
 8000596:	4642      	mov	r2, r8
 8000598:	2320      	movs	r3, #32
 800059a:	1a9b      	subs	r3, r3, r2
 800059c:	002a      	movs	r2, r5
 800059e:	4646      	mov	r6, r8
 80005a0:	409a      	lsls	r2, r3
 80005a2:	0023      	movs	r3, r4
 80005a4:	40f3      	lsrs	r3, r6
 80005a6:	4644      	mov	r4, r8
 80005a8:	4313      	orrs	r3, r2
 80005aa:	002a      	movs	r2, r5
 80005ac:	40e2      	lsrs	r2, r4
 80005ae:	001c      	movs	r4, r3
 80005b0:	465b      	mov	r3, fp
 80005b2:	0015      	movs	r5, r2
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	dad4      	bge.n	8000562 <__udivmoddi4+0x12e>
 80005b8:	4642      	mov	r2, r8
 80005ba:	002f      	movs	r7, r5
 80005bc:	2320      	movs	r3, #32
 80005be:	0026      	movs	r6, r4
 80005c0:	4097      	lsls	r7, r2
 80005c2:	1a9b      	subs	r3, r3, r2
 80005c4:	40de      	lsrs	r6, r3
 80005c6:	003b      	movs	r3, r7
 80005c8:	4333      	orrs	r3, r6
 80005ca:	e7cd      	b.n	8000568 <__udivmoddi4+0x134>

080005cc <__clzdi2>:
 80005cc:	b510      	push	{r4, lr}
 80005ce:	2900      	cmp	r1, #0
 80005d0:	d103      	bne.n	80005da <__clzdi2+0xe>
 80005d2:	f000 f807 	bl	80005e4 <__clzsi2>
 80005d6:	3020      	adds	r0, #32
 80005d8:	e002      	b.n	80005e0 <__clzdi2+0x14>
 80005da:	0008      	movs	r0, r1
 80005dc:	f000 f802 	bl	80005e4 <__clzsi2>
 80005e0:	bd10      	pop	{r4, pc}
 80005e2:	46c0      	nop			@ (mov r8, r8)

080005e4 <__clzsi2>:
 80005e4:	211c      	movs	r1, #28
 80005e6:	2301      	movs	r3, #1
 80005e8:	041b      	lsls	r3, r3, #16
 80005ea:	4298      	cmp	r0, r3
 80005ec:	d301      	bcc.n	80005f2 <__clzsi2+0xe>
 80005ee:	0c00      	lsrs	r0, r0, #16
 80005f0:	3910      	subs	r1, #16
 80005f2:	0a1b      	lsrs	r3, r3, #8
 80005f4:	4298      	cmp	r0, r3
 80005f6:	d301      	bcc.n	80005fc <__clzsi2+0x18>
 80005f8:	0a00      	lsrs	r0, r0, #8
 80005fa:	3908      	subs	r1, #8
 80005fc:	091b      	lsrs	r3, r3, #4
 80005fe:	4298      	cmp	r0, r3
 8000600:	d301      	bcc.n	8000606 <__clzsi2+0x22>
 8000602:	0900      	lsrs	r0, r0, #4
 8000604:	3904      	subs	r1, #4
 8000606:	a202      	add	r2, pc, #8	@ (adr r2, 8000610 <__clzsi2+0x2c>)
 8000608:	5c10      	ldrb	r0, [r2, r0]
 800060a:	1840      	adds	r0, r0, r1
 800060c:	4770      	bx	lr
 800060e:	46c0      	nop			@ (mov r8, r8)
 8000610:	02020304 	.word	0x02020304
 8000614:	01010101 	.word	0x01010101
	...

08000620 <MX_GPIO_Init>:
     PF1-OSC_OUT   ------> RCC_OSC_OUT
     PA13 (SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000620:	b590      	push	{r4, r7, lr}
 8000622:	b08b      	sub	sp, #44	@ 0x2c
 8000624:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000626:	2414      	movs	r4, #20
 8000628:	193b      	adds	r3, r7, r4
 800062a:	0018      	movs	r0, r3
 800062c:	2314      	movs	r3, #20
 800062e:	001a      	movs	r2, r3
 8000630:	2100      	movs	r1, #0
 8000632:	f003 fcbf 	bl	8003fb4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000636:	4b2f      	ldr	r3, [pc, #188]	@ (80006f4 <MX_GPIO_Init+0xd4>)
 8000638:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800063a:	4b2e      	ldr	r3, [pc, #184]	@ (80006f4 <MX_GPIO_Init+0xd4>)
 800063c:	2104      	movs	r1, #4
 800063e:	430a      	orrs	r2, r1
 8000640:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000642:	4b2c      	ldr	r3, [pc, #176]	@ (80006f4 <MX_GPIO_Init+0xd4>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000646:	2204      	movs	r2, #4
 8000648:	4013      	ands	r3, r2
 800064a:	613b      	str	r3, [r7, #16]
 800064c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800064e:	4b29      	ldr	r3, [pc, #164]	@ (80006f4 <MX_GPIO_Init+0xd4>)
 8000650:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000652:	4b28      	ldr	r3, [pc, #160]	@ (80006f4 <MX_GPIO_Init+0xd4>)
 8000654:	2120      	movs	r1, #32
 8000656:	430a      	orrs	r2, r1
 8000658:	64da      	str	r2, [r3, #76]	@ 0x4c
 800065a:	4b26      	ldr	r3, [pc, #152]	@ (80006f4 <MX_GPIO_Init+0xd4>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065e:	2220      	movs	r2, #32
 8000660:	4013      	ands	r3, r2
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000666:	4b23      	ldr	r3, [pc, #140]	@ (80006f4 <MX_GPIO_Init+0xd4>)
 8000668:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800066a:	4b22      	ldr	r3, [pc, #136]	@ (80006f4 <MX_GPIO_Init+0xd4>)
 800066c:	2101      	movs	r1, #1
 800066e:	430a      	orrs	r2, r1
 8000670:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000672:	4b20      	ldr	r3, [pc, #128]	@ (80006f4 <MX_GPIO_Init+0xd4>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000676:	2201      	movs	r2, #1
 8000678:	4013      	ands	r3, r2
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067e:	4b1d      	ldr	r3, [pc, #116]	@ (80006f4 <MX_GPIO_Init+0xd4>)
 8000680:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000682:	4b1c      	ldr	r3, [pc, #112]	@ (80006f4 <MX_GPIO_Init+0xd4>)
 8000684:	2102      	movs	r1, #2
 8000686:	430a      	orrs	r2, r1
 8000688:	64da      	str	r2, [r3, #76]	@ 0x4c
 800068a:	4b1a      	ldr	r3, [pc, #104]	@ (80006f4 <MX_GPIO_Init+0xd4>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068e:	2202      	movs	r2, #2
 8000690:	4013      	ands	r3, r2
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000696:	23a0      	movs	r3, #160	@ 0xa0
 8000698:	05db      	lsls	r3, r3, #23
 800069a:	2200      	movs	r2, #0
 800069c:	2120      	movs	r1, #32
 800069e:	0018      	movs	r0, r3
 80006a0:	f000 fdba 	bl	8001218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 80006a4:	193b      	adds	r3, r7, r4
 80006a6:	2280      	movs	r2, #128	@ 0x80
 80006a8:	0192      	lsls	r2, r2, #6
 80006aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ac:	193b      	adds	r3, r7, r4
 80006ae:	2200      	movs	r2, #0
 80006b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	193b      	adds	r3, r7, r4
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80006b8:	193b      	adds	r3, r7, r4
 80006ba:	4a0f      	ldr	r2, [pc, #60]	@ (80006f8 <MX_GPIO_Init+0xd8>)
 80006bc:	0019      	movs	r1, r3
 80006be:	0010      	movs	r0, r2
 80006c0:	f000 fc36 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80006c4:	0021      	movs	r1, r4
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2220      	movs	r2, #32
 80006ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2201      	movs	r2, #1
 80006d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006de:	187a      	adds	r2, r7, r1
 80006e0:	23a0      	movs	r3, #160	@ 0xa0
 80006e2:	05db      	lsls	r3, r3, #23
 80006e4:	0011      	movs	r1, r2
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 fc22 	bl	8000f30 <HAL_GPIO_Init>

}
 80006ec:	46c0      	nop			@ (mov r8, r8)
 80006ee:	46bd      	mov	sp, r7
 80006f0:	b00b      	add	sp, #44	@ 0x2c
 80006f2:	bd90      	pop	{r4, r7, pc}
 80006f4:	40021000 	.word	0x40021000
 80006f8:	50000800 	.word	0x50000800

080006fc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000700:	4b1b      	ldr	r3, [pc, #108]	@ (8000770 <MX_I2C1_Init+0x74>)
 8000702:	4a1c      	ldr	r2, [pc, #112]	@ (8000774 <MX_I2C1_Init+0x78>)
 8000704:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10606DA4;
 8000706:	4b1a      	ldr	r3, [pc, #104]	@ (8000770 <MX_I2C1_Init+0x74>)
 8000708:	4a1b      	ldr	r2, [pc, #108]	@ (8000778 <MX_I2C1_Init+0x7c>)
 800070a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800070c:	4b18      	ldr	r3, [pc, #96]	@ (8000770 <MX_I2C1_Init+0x74>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000712:	4b17      	ldr	r3, [pc, #92]	@ (8000770 <MX_I2C1_Init+0x74>)
 8000714:	2201      	movs	r2, #1
 8000716:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000718:	4b15      	ldr	r3, [pc, #84]	@ (8000770 <MX_I2C1_Init+0x74>)
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800071e:	4b14      	ldr	r3, [pc, #80]	@ (8000770 <MX_I2C1_Init+0x74>)
 8000720:	2200      	movs	r2, #0
 8000722:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000724:	4b12      	ldr	r3, [pc, #72]	@ (8000770 <MX_I2C1_Init+0x74>)
 8000726:	2200      	movs	r2, #0
 8000728:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800072a:	4b11      	ldr	r3, [pc, #68]	@ (8000770 <MX_I2C1_Init+0x74>)
 800072c:	2200      	movs	r2, #0
 800072e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000730:	4b0f      	ldr	r3, [pc, #60]	@ (8000770 <MX_I2C1_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000736:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <MX_I2C1_Init+0x74>)
 8000738:	0018      	movs	r0, r3
 800073a:	f000 fda5 	bl	8001288 <HAL_I2C_Init>
 800073e:	1e03      	subs	r3, r0, #0
 8000740:	d001      	beq.n	8000746 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000742:	f000 f90f 	bl	8000964 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000746:	4b0a      	ldr	r3, [pc, #40]	@ (8000770 <MX_I2C1_Init+0x74>)
 8000748:	2100      	movs	r1, #0
 800074a:	0018      	movs	r0, r3
 800074c:	f000 fe42 	bl	80013d4 <HAL_I2CEx_ConfigAnalogFilter>
 8000750:	1e03      	subs	r3, r0, #0
 8000752:	d001      	beq.n	8000758 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000754:	f000 f906 	bl	8000964 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000758:	4b05      	ldr	r3, [pc, #20]	@ (8000770 <MX_I2C1_Init+0x74>)
 800075a:	2100      	movs	r1, #0
 800075c:	0018      	movs	r0, r3
 800075e:	f000 fe85 	bl	800146c <HAL_I2CEx_ConfigDigitalFilter>
 8000762:	1e03      	subs	r3, r0, #0
 8000764:	d001      	beq.n	800076a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000766:	f000 f8fd 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800076a:	46c0      	nop			@ (mov r8, r8)
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000028 	.word	0x20000028
 8000774:	40005400 	.word	0x40005400
 8000778:	10606da4 	.word	0x10606da4

0800077c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800077c:	b590      	push	{r4, r7, lr}
 800077e:	b09b      	sub	sp, #108	@ 0x6c
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000784:	2354      	movs	r3, #84	@ 0x54
 8000786:	18fb      	adds	r3, r7, r3
 8000788:	0018      	movs	r0, r3
 800078a:	2314      	movs	r3, #20
 800078c:	001a      	movs	r2, r3
 800078e:	2100      	movs	r1, #0
 8000790:	f003 fc10 	bl	8003fb4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000794:	2410      	movs	r4, #16
 8000796:	193b      	adds	r3, r7, r4
 8000798:	0018      	movs	r0, r3
 800079a:	2344      	movs	r3, #68	@ 0x44
 800079c:	001a      	movs	r2, r3
 800079e:	2100      	movs	r1, #0
 80007a0:	f003 fc08 	bl	8003fb4 <memset>
  if(i2cHandle->Instance==I2C1)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a22      	ldr	r2, [pc, #136]	@ (8000834 <HAL_I2C_MspInit+0xb8>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d13e      	bne.n	800082c <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80007ae:	193b      	adds	r3, r7, r4
 80007b0:	2220      	movs	r2, #32
 80007b2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007b4:	193b      	adds	r3, r7, r4
 80007b6:	2200      	movs	r2, #0
 80007b8:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ba:	193b      	adds	r3, r7, r4
 80007bc:	0018      	movs	r0, r3
 80007be:	f001 fd5b 	bl	8002278 <HAL_RCCEx_PeriphCLKConfig>
 80007c2:	1e03      	subs	r3, r0, #0
 80007c4:	d001      	beq.n	80007ca <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80007c6:	f000 f8cd 	bl	8000964 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000838 <HAL_I2C_MspInit+0xbc>)
 80007cc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80007ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000838 <HAL_I2C_MspInit+0xbc>)
 80007d0:	2102      	movs	r1, #2
 80007d2:	430a      	orrs	r2, r1
 80007d4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80007d6:	4b18      	ldr	r3, [pc, #96]	@ (8000838 <HAL_I2C_MspInit+0xbc>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007da:	2202      	movs	r2, #2
 80007dc:	4013      	ands	r3, r2
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80007e2:	2154      	movs	r1, #84	@ 0x54
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	22c0      	movs	r2, #192	@ 0xc0
 80007e8:	0092      	lsls	r2, r2, #2
 80007ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	2212      	movs	r2, #18
 80007f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	187b      	adds	r3, r7, r1
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	2204      	movs	r2, #4
 8000802:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000804:	187b      	adds	r3, r7, r1
 8000806:	4a0d      	ldr	r2, [pc, #52]	@ (800083c <HAL_I2C_MspInit+0xc0>)
 8000808:	0019      	movs	r1, r3
 800080a:	0010      	movs	r0, r2
 800080c:	f000 fb90 	bl	8000f30 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000810:	4b09      	ldr	r3, [pc, #36]	@ (8000838 <HAL_I2C_MspInit+0xbc>)
 8000812:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000814:	4b08      	ldr	r3, [pc, #32]	@ (8000838 <HAL_I2C_MspInit+0xbc>)
 8000816:	2180      	movs	r1, #128	@ 0x80
 8000818:	0389      	lsls	r1, r1, #14
 800081a:	430a      	orrs	r2, r1
 800081c:	659a      	str	r2, [r3, #88]	@ 0x58
 800081e:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <HAL_I2C_MspInit+0xbc>)
 8000820:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000822:	2380      	movs	r3, #128	@ 0x80
 8000824:	039b      	lsls	r3, r3, #14
 8000826:	4013      	ands	r3, r2
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800082c:	46c0      	nop			@ (mov r8, r8)
 800082e:	46bd      	mov	sp, r7
 8000830:	b01b      	add	sp, #108	@ 0x6c
 8000832:	bd90      	pop	{r4, r7, pc}
 8000834:	40005400 	.word	0x40005400
 8000838:	40021000 	.word	0x40021000
 800083c:	50000400 	.word	0x50000400

08000840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000846:	f000 fa44 	bl	8000cd2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800084a:	f000 f821 	bl	8000890 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084e:	f7ff fee7 	bl	8000620 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000852:	f7ff ff53 	bl	80006fc <MX_I2C1_Init>
  MX_RTC_Init();
 8000856:	f000 f88b 	bl	8000970 <MX_RTC_Init>
  MX_USART2_UART_Init();
 800085a:	f000 f963 	bl	8000b24 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint32_t pre_time = HAL_GetTick();
 800085e:	f000 faa9 	bl	8000db4 <HAL_GetTick>
 8000862:	0003      	movs	r3, r0
 8000864:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      if (HAL_GetTick() - pre_time >= 500)
 8000866:	f000 faa5 	bl	8000db4 <HAL_GetTick>
 800086a:	0002      	movs	r2, r0
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	1ad2      	subs	r2, r2, r3
 8000870:	23fa      	movs	r3, #250	@ 0xfa
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	429a      	cmp	r2, r3
 8000876:	d3f6      	bcc.n	8000866 <main+0x26>
      {
	pre_time = HAL_GetTick();
 8000878:	f000 fa9c 	bl	8000db4 <HAL_GetTick>
 800087c:	0003      	movs	r3, r0
 800087e:	607b      	str	r3, [r7, #4]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000880:	23a0      	movs	r3, #160	@ 0xa0
 8000882:	05db      	lsls	r3, r3, #23
 8000884:	2120      	movs	r1, #32
 8000886:	0018      	movs	r0, r3
 8000888:	f000 fce3 	bl	8001252 <HAL_GPIO_TogglePin>
      if (HAL_GetTick() - pre_time >= 500)
 800088c:	e7eb      	b.n	8000866 <main+0x26>
	...

08000890 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000890:	b590      	push	{r4, r7, lr}
 8000892:	b099      	sub	sp, #100	@ 0x64
 8000894:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000896:	2414      	movs	r4, #20
 8000898:	193b      	adds	r3, r7, r4
 800089a:	0018      	movs	r0, r3
 800089c:	234c      	movs	r3, #76	@ 0x4c
 800089e:	001a      	movs	r2, r3
 80008a0:	2100      	movs	r1, #0
 80008a2:	f003 fb87 	bl	8003fb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	0018      	movs	r0, r3
 80008aa:	2310      	movs	r3, #16
 80008ac:	001a      	movs	r2, r3
 80008ae:	2100      	movs	r1, #0
 80008b0:	f003 fb80 	bl	8003fb4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008b4:	2380      	movs	r3, #128	@ 0x80
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	0018      	movs	r0, r3
 80008ba:	f000 fe31 	bl	8001520 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008be:	f000 fe21 	bl	8001504 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80008c2:	4a27      	ldr	r2, [pc, #156]	@ (8000960 <SystemClock_Config+0xd0>)
 80008c4:	2390      	movs	r3, #144	@ 0x90
 80008c6:	58d3      	ldr	r3, [r2, r3]
 80008c8:	4925      	ldr	r1, [pc, #148]	@ (8000960 <SystemClock_Config+0xd0>)
 80008ca:	2218      	movs	r2, #24
 80008cc:	4393      	bics	r3, r2
 80008ce:	2290      	movs	r2, #144	@ 0x90
 80008d0:	508b      	str	r3, [r1, r2]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80008d2:	193b      	adds	r3, r7, r4
 80008d4:	2206      	movs	r2, #6
 80008d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008d8:	193b      	adds	r3, r7, r4
 80008da:	2281      	movs	r2, #129	@ 0x81
 80008dc:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008de:	193b      	adds	r3, r7, r4
 80008e0:	2280      	movs	r2, #128	@ 0x80
 80008e2:	0052      	lsls	r2, r2, #1
 80008e4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008e6:	0021      	movs	r1, r4
 80008e8:	187b      	adds	r3, r7, r1
 80008ea:	2240      	movs	r2, #64	@ 0x40
 80008ec:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ee:	187b      	adds	r3, r7, r1
 80008f0:	2202      	movs	r2, #2
 80008f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	2202      	movs	r2, #2
 80008f8:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80008fa:	187b      	adds	r3, r7, r1
 80008fc:	2200      	movs	r2, #0
 80008fe:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 7;
 8000900:	187b      	adds	r3, r7, r1
 8000902:	2207      	movs	r2, #7
 8000904:	639a      	str	r2, [r3, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000906:	187b      	adds	r3, r7, r1
 8000908:	2280      	movs	r2, #128	@ 0x80
 800090a:	0292      	lsls	r2, r2, #10
 800090c:	63da      	str	r2, [r3, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800090e:	187b      	adds	r3, r7, r1
 8000910:	2280      	movs	r2, #128	@ 0x80
 8000912:	0492      	lsls	r2, r2, #18
 8000914:	641a      	str	r2, [r3, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000916:	187b      	adds	r3, r7, r1
 8000918:	2280      	movs	r2, #128	@ 0x80
 800091a:	0592      	lsls	r2, r2, #22
 800091c:	645a      	str	r2, [r3, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091e:	187b      	adds	r3, r7, r1
 8000920:	0018      	movs	r0, r3
 8000922:	f000 fe69 	bl	80015f8 <HAL_RCC_OscConfig>
 8000926:	1e03      	subs	r3, r0, #0
 8000928:	d001      	beq.n	800092e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800092a:	f000 f81b 	bl	8000964 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	2207      	movs	r2, #7
 8000932:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	2203      	movs	r2, #3
 8000938:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	2102      	movs	r1, #2
 800094a:	0018      	movs	r0, r3
 800094c:	f001 fa7e 	bl	8001e4c <HAL_RCC_ClockConfig>
 8000950:	1e03      	subs	r3, r0, #0
 8000952:	d001      	beq.n	8000958 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000954:	f000 f806 	bl	8000964 <Error_Handler>
  }
}
 8000958:	46c0      	nop			@ (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	b019      	add	sp, #100	@ 0x64
 800095e:	bd90      	pop	{r4, r7, pc}
 8000960:	40021000 	.word	0x40021000

08000964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000968:	b672      	cpsid	i
}
 800096a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800096c:	46c0      	nop			@ (mov r8, r8)
 800096e:	e7fd      	b.n	800096c <Error_Handler+0x8>

08000970 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000974:	4b14      	ldr	r3, [pc, #80]	@ (80009c8 <MX_RTC_Init+0x58>)
 8000976:	4a15      	ldr	r2, [pc, #84]	@ (80009cc <MX_RTC_Init+0x5c>)
 8000978:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800097a:	4b13      	ldr	r3, [pc, #76]	@ (80009c8 <MX_RTC_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000980:	4b11      	ldr	r3, [pc, #68]	@ (80009c8 <MX_RTC_Init+0x58>)
 8000982:	227f      	movs	r2, #127	@ 0x7f
 8000984:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000986:	4b10      	ldr	r3, [pc, #64]	@ (80009c8 <MX_RTC_Init+0x58>)
 8000988:	22ff      	movs	r2, #255	@ 0xff
 800098a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800098c:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <MX_RTC_Init+0x58>)
 800098e:	2200      	movs	r2, #0
 8000990:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000992:	4b0d      	ldr	r3, [pc, #52]	@ (80009c8 <MX_RTC_Init+0x58>)
 8000994:	2200      	movs	r2, #0
 8000996:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000998:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <MX_RTC_Init+0x58>)
 800099a:	2200      	movs	r2, #0
 800099c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800099e:	4b0a      	ldr	r3, [pc, #40]	@ (80009c8 <MX_RTC_Init+0x58>)
 80009a0:	2280      	movs	r2, #128	@ 0x80
 80009a2:	05d2      	lsls	r2, r2, #23
 80009a4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80009a6:	4b08      	ldr	r3, [pc, #32]	@ (80009c8 <MX_RTC_Init+0x58>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80009ac:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <MX_RTC_Init+0x58>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009b2:	4b05      	ldr	r3, [pc, #20]	@ (80009c8 <MX_RTC_Init+0x58>)
 80009b4:	0018      	movs	r0, r3
 80009b6:	f002 fc8f 	bl	80032d8 <HAL_RTC_Init>
 80009ba:	1e03      	subs	r3, r0, #0
 80009bc:	d001      	beq.n	80009c2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80009be:	f7ff ffd1 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80009c2:	46c0      	nop			@ (mov r8, r8)
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	2000007c 	.word	0x2000007c
 80009cc:	40002800 	.word	0x40002800

080009d0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80009d0:	b590      	push	{r4, r7, lr}
 80009d2:	b095      	sub	sp, #84	@ 0x54
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009d8:	240c      	movs	r4, #12
 80009da:	193b      	adds	r3, r7, r4
 80009dc:	0018      	movs	r0, r3
 80009de:	2344      	movs	r3, #68	@ 0x44
 80009e0:	001a      	movs	r2, r3
 80009e2:	2100      	movs	r1, #0
 80009e4:	f003 fae6 	bl	8003fb4 <memset>
  if(rtcHandle->Instance==RTC)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a16      	ldr	r2, [pc, #88]	@ (8000a48 <HAL_RTC_MspInit+0x78>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d126      	bne.n	8000a40 <HAL_RTC_MspInit+0x70>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80009f2:	193b      	adds	r3, r7, r4
 80009f4:	2280      	movs	r2, #128	@ 0x80
 80009f6:	0212      	lsls	r2, r2, #8
 80009f8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80009fa:	193b      	adds	r3, r7, r4
 80009fc:	2280      	movs	r2, #128	@ 0x80
 80009fe:	0052      	lsls	r2, r2, #1
 8000a00:	641a      	str	r2, [r3, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a02:	193b      	adds	r3, r7, r4
 8000a04:	0018      	movs	r0, r3
 8000a06:	f001 fc37 	bl	8002278 <HAL_RCCEx_PeriphCLKConfig>
 8000a0a:	1e03      	subs	r3, r0, #0
 8000a0c:	d001      	beq.n	8000a12 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000a0e:	f7ff ffa9 	bl	8000964 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a12:	4a0e      	ldr	r2, [pc, #56]	@ (8000a4c <HAL_RTC_MspInit+0x7c>)
 8000a14:	2390      	movs	r3, #144	@ 0x90
 8000a16:	58d3      	ldr	r3, [r2, r3]
 8000a18:	490c      	ldr	r1, [pc, #48]	@ (8000a4c <HAL_RTC_MspInit+0x7c>)
 8000a1a:	2280      	movs	r2, #128	@ 0x80
 8000a1c:	0212      	lsls	r2, r2, #8
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	2290      	movs	r2, #144	@ 0x90
 8000a22:	508b      	str	r3, [r1, r2]
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000a24:	4b09      	ldr	r3, [pc, #36]	@ (8000a4c <HAL_RTC_MspInit+0x7c>)
 8000a26:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000a28:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <HAL_RTC_MspInit+0x7c>)
 8000a2a:	2180      	movs	r1, #128	@ 0x80
 8000a2c:	00c9      	lsls	r1, r1, #3
 8000a2e:	430a      	orrs	r2, r1
 8000a30:	659a      	str	r2, [r3, #88]	@ 0x58
 8000a32:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <HAL_RTC_MspInit+0x7c>)
 8000a34:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000a36:	2380      	movs	r3, #128	@ 0x80
 8000a38:	00db      	lsls	r3, r3, #3
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000a40:	46c0      	nop			@ (mov r8, r8)
 8000a42:	46bd      	mov	sp, r7
 8000a44:	b015      	add	sp, #84	@ 0x54
 8000a46:	bd90      	pop	{r4, r7, pc}
 8000a48:	40002800 	.word	0x40002800
 8000a4c:	40021000 	.word	0x40021000

08000a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a56:	4b0f      	ldr	r3, [pc, #60]	@ (8000a94 <HAL_MspInit+0x44>)
 8000a58:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a94 <HAL_MspInit+0x44>)
 8000a5c:	2180      	movs	r1, #128	@ 0x80
 8000a5e:	0549      	lsls	r1, r1, #21
 8000a60:	430a      	orrs	r2, r1
 8000a62:	659a      	str	r2, [r3, #88]	@ 0x58
 8000a64:	4b0b      	ldr	r3, [pc, #44]	@ (8000a94 <HAL_MspInit+0x44>)
 8000a66:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000a68:	2380      	movs	r3, #128	@ 0x80
 8000a6a:	055b      	lsls	r3, r3, #21
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a72:	4b08      	ldr	r3, [pc, #32]	@ (8000a94 <HAL_MspInit+0x44>)
 8000a74:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000a76:	4b07      	ldr	r3, [pc, #28]	@ (8000a94 <HAL_MspInit+0x44>)
 8000a78:	2101      	movs	r1, #1
 8000a7a:	430a      	orrs	r2, r1
 8000a7c:	661a      	str	r2, [r3, #96]	@ 0x60
 8000a7e:	4b05      	ldr	r3, [pc, #20]	@ (8000a94 <HAL_MspInit+0x44>)
 8000a80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a82:	2201      	movs	r2, #1
 8000a84:	4013      	ands	r3, r2
 8000a86:	603b      	str	r3, [r7, #0]
 8000a88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8a:	46c0      	nop			@ (mov r8, r8)
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	b002      	add	sp, #8
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	46c0      	nop			@ (mov r8, r8)
 8000a94:	40021000 	.word	0x40021000

08000a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a9c:	46c0      	nop			@ (mov r8, r8)
 8000a9e:	e7fd      	b.n	8000a9c <NMI_Handler+0x4>

08000aa0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa4:	46c0      	nop			@ (mov r8, r8)
 8000aa6:	e7fd      	b.n	8000aa4 <HardFault_Handler+0x4>

08000aa8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SVC instruction.
  */
void SVC_Handler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aac:	46c0      	nop			@ (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab6:	46c0      	nop			@ (mov r8, r8)
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac0:	f000 f968 	bl	8000d94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac4:	46c0      	nop			@ (mov r8, r8)
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
	...

08000acc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
#endif /* ENABLE_DBG_SWEN */
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ad2:	4b12      	ldr	r3, [pc, #72]	@ (8000b1c <SystemInit+0x50>)
 8000ad4:	2280      	movs	r2, #128	@ 0x80
 8000ad6:	0512      	lsls	r2, r2, #20
 8000ad8:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

/* Software workaround added to keep Debug enabled after Boot_Lock activation and RDP=1  */
#ifdef ENABLE_DBG_SWEN
  tmp_seccr = FLASH->SECR;
 8000ada:	4a11      	ldr	r2, [pc, #68]	@ (8000b20 <SystemInit+0x54>)
 8000adc:	2380      	movs	r3, #128	@ 0x80
 8000ade:	58d3      	ldr	r3, [r2, r3]
 8000ae0:	607b      	str	r3, [r7, #4]
  tmp_optr = FLASH->OPTR;
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b20 <SystemInit+0x54>)
 8000ae4:	6a1b      	ldr	r3, [r3, #32]
 8000ae6:	603b      	str	r3, [r7, #0]
  if (((tmp_seccr & FLASH_SECR_BOOT_LOCK) == FLASH_SECR_BOOT_LOCK)         \
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	2380      	movs	r3, #128	@ 0x80
 8000aec:	025b      	lsls	r3, r3, #9
 8000aee:	4013      	ands	r3, r2
 8000af0:	d010      	beq.n	8000b14 <SystemInit+0x48>
      && (((tmp_optr & FLASH_OPTR_RDP) != 0xCCU)                           \
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	22ff      	movs	r2, #255	@ 0xff
 8000af6:	4013      	ands	r3, r2
 8000af8:	2bcc      	cmp	r3, #204	@ 0xcc
 8000afa:	d00b      	beq.n	8000b14 <SystemInit+0x48>
      && ((tmp_optr & FLASH_OPTR_RDP) != 0xAAU)))
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	22ff      	movs	r2, #255	@ 0xff
 8000b00:	4013      	ands	r3, r2
 8000b02:	2baa      	cmp	r3, #170	@ 0xaa
 8000b04:	d006      	beq.n	8000b14 <SystemInit+0x48>
  {
    FLASH->ACR |= FLASH_ACR_DBG_SWEN;  /* Debug access software enabled to avoid the chip
 8000b06:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <SystemInit+0x54>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	4b05      	ldr	r3, [pc, #20]	@ (8000b20 <SystemInit+0x54>)
 8000b0c:	2180      	movs	r1, #128	@ 0x80
 8000b0e:	02c9      	lsls	r1, r1, #11
 8000b10:	430a      	orrs	r2, r1
 8000b12:	601a      	str	r2, [r3, #0]
                                          to be locked when RDP=1 and Boot_Lock=1        */
  }
#endif /* ENABLE_DBG_SWEN */
}
 8000b14:	46c0      	nop			@ (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	b002      	add	sp, #8
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	e000ed00 	.word	0xe000ed00
 8000b20:	40022000 	.word	0x40022000

08000b24 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b28:	4b23      	ldr	r3, [pc, #140]	@ (8000bb8 <MX_USART2_UART_Init+0x94>)
 8000b2a:	4a24      	ldr	r2, [pc, #144]	@ (8000bbc <MX_USART2_UART_Init+0x98>)
 8000b2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b2e:	4b22      	ldr	r3, [pc, #136]	@ (8000bb8 <MX_USART2_UART_Init+0x94>)
 8000b30:	22e1      	movs	r2, #225	@ 0xe1
 8000b32:	0252      	lsls	r2, r2, #9
 8000b34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b36:	4b20      	ldr	r3, [pc, #128]	@ (8000bb8 <MX_USART2_UART_Init+0x94>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb8 <MX_USART2_UART_Init+0x94>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b42:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb8 <MX_USART2_UART_Init+0x94>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b48:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb8 <MX_USART2_UART_Init+0x94>)
 8000b4a:	220c      	movs	r2, #12
 8000b4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bb8 <MX_USART2_UART_Init+0x94>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b54:	4b18      	ldr	r3, [pc, #96]	@ (8000bb8 <MX_USART2_UART_Init+0x94>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b5a:	4b17      	ldr	r3, [pc, #92]	@ (8000bb8 <MX_USART2_UART_Init+0x94>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b60:	4b15      	ldr	r3, [pc, #84]	@ (8000bb8 <MX_USART2_UART_Init+0x94>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b66:	4b14      	ldr	r3, [pc, #80]	@ (8000bb8 <MX_USART2_UART_Init+0x94>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b6c:	4b12      	ldr	r3, [pc, #72]	@ (8000bb8 <MX_USART2_UART_Init+0x94>)
 8000b6e:	0018      	movs	r0, r3
 8000b70:	f002 fcaa 	bl	80034c8 <HAL_UART_Init>
 8000b74:	1e03      	subs	r3, r0, #0
 8000b76:	d001      	beq.n	8000b7c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b78:	f7ff fef4 	bl	8000964 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb8 <MX_USART2_UART_Init+0x94>)
 8000b7e:	2100      	movs	r1, #0
 8000b80:	0018      	movs	r0, r3
 8000b82:	f003 f937 	bl	8003df4 <HAL_UARTEx_SetTxFifoThreshold>
 8000b86:	1e03      	subs	r3, r0, #0
 8000b88:	d001      	beq.n	8000b8e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000b8a:	f7ff feeb 	bl	8000964 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb8 <MX_USART2_UART_Init+0x94>)
 8000b90:	2100      	movs	r1, #0
 8000b92:	0018      	movs	r0, r3
 8000b94:	f003 f96e 	bl	8003e74 <HAL_UARTEx_SetRxFifoThreshold>
 8000b98:	1e03      	subs	r3, r0, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b9c:	f7ff fee2 	bl	8000964 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ba0:	4b05      	ldr	r3, [pc, #20]	@ (8000bb8 <MX_USART2_UART_Init+0x94>)
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f003 f8ec 	bl	8003d80 <HAL_UARTEx_DisableFifoMode>
 8000ba8:	1e03      	subs	r3, r0, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000bac:	f7ff feda 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bb0:	46c0      	nop			@ (mov r8, r8)
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	46c0      	nop			@ (mov r8, r8)
 8000bb8:	200000ac 	.word	0x200000ac
 8000bbc:	40004400 	.word	0x40004400

08000bc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bc0:	b590      	push	{r4, r7, lr}
 8000bc2:	b09b      	sub	sp, #108	@ 0x6c
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	2354      	movs	r3, #84	@ 0x54
 8000bca:	18fb      	adds	r3, r7, r3
 8000bcc:	0018      	movs	r0, r3
 8000bce:	2314      	movs	r3, #20
 8000bd0:	001a      	movs	r2, r3
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	f003 f9ee 	bl	8003fb4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bd8:	2410      	movs	r4, #16
 8000bda:	193b      	adds	r3, r7, r4
 8000bdc:	0018      	movs	r0, r3
 8000bde:	2344      	movs	r3, #68	@ 0x44
 8000be0:	001a      	movs	r2, r3
 8000be2:	2100      	movs	r1, #0
 8000be4:	f003 f9e6 	bl	8003fb4 <memset>
  if(uartHandle->Instance==USART2)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a22      	ldr	r2, [pc, #136]	@ (8000c78 <HAL_UART_MspInit+0xb8>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d13e      	bne.n	8000c70 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bf2:	193b      	adds	r3, r7, r4
 8000bf4:	2202      	movs	r2, #2
 8000bf6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bf8:	193b      	adds	r3, r7, r4
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bfe:	193b      	adds	r3, r7, r4
 8000c00:	0018      	movs	r0, r3
 8000c02:	f001 fb39 	bl	8002278 <HAL_RCCEx_PeriphCLKConfig>
 8000c06:	1e03      	subs	r3, r0, #0
 8000c08:	d001      	beq.n	8000c0e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c0a:	f7ff feab 	bl	8000964 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000c7c <HAL_UART_MspInit+0xbc>)
 8000c10:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000c12:	4b1a      	ldr	r3, [pc, #104]	@ (8000c7c <HAL_UART_MspInit+0xbc>)
 8000c14:	2180      	movs	r1, #128	@ 0x80
 8000c16:	0289      	lsls	r1, r1, #10
 8000c18:	430a      	orrs	r2, r1
 8000c1a:	659a      	str	r2, [r3, #88]	@ 0x58
 8000c1c:	4b17      	ldr	r3, [pc, #92]	@ (8000c7c <HAL_UART_MspInit+0xbc>)
 8000c1e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000c20:	2380      	movs	r3, #128	@ 0x80
 8000c22:	029b      	lsls	r3, r3, #10
 8000c24:	4013      	ands	r3, r2
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	4b14      	ldr	r3, [pc, #80]	@ (8000c7c <HAL_UART_MspInit+0xbc>)
 8000c2c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000c2e:	4b13      	ldr	r3, [pc, #76]	@ (8000c7c <HAL_UART_MspInit+0xbc>)
 8000c30:	2101      	movs	r1, #1
 8000c32:	430a      	orrs	r2, r1
 8000c34:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000c36:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <HAL_UART_MspInit+0xbc>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000c42:	2154      	movs	r1, #84	@ 0x54
 8000c44:	187b      	adds	r3, r7, r1
 8000c46:	220c      	movs	r2, #12
 8000c48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	187b      	adds	r3, r7, r1
 8000c4c:	2202      	movs	r2, #2
 8000c4e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	187b      	adds	r3, r7, r1
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	2200      	movs	r2, #0
 8000c5a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	2207      	movs	r2, #7
 8000c60:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c62:	187a      	adds	r2, r7, r1
 8000c64:	23a0      	movs	r3, #160	@ 0xa0
 8000c66:	05db      	lsls	r3, r3, #23
 8000c68:	0011      	movs	r1, r2
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f000 f960 	bl	8000f30 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c70:	46c0      	nop			@ (mov r8, r8)
 8000c72:	46bd      	mov	sp, r7
 8000c74:	b01b      	add	sp, #108	@ 0x6c
 8000c76:	bd90      	pop	{r4, r7, pc}
 8000c78:	40004400 	.word	0x40004400
 8000c7c:	40021000 	.word	0x40021000

08000c80 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c80:	480d      	ldr	r0, [pc, #52]	@ (8000cb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c82:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c84:	f7ff ff22 	bl	8000acc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c88:	480c      	ldr	r0, [pc, #48]	@ (8000cbc <LoopForever+0x6>)
  ldr r1, =_edata
 8000c8a:	490d      	ldr	r1, [pc, #52]	@ (8000cc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cc4 <LoopForever+0xe>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c90:	e002      	b.n	8000c98 <LoopCopyDataInit>

08000c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c96:	3304      	adds	r3, #4

08000c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c9c:	d3f9      	bcc.n	8000c92 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ca0:	4c0a      	ldr	r4, [pc, #40]	@ (8000ccc <LoopForever+0x16>)
  movs r3, #0
 8000ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca4:	e001      	b.n	8000caa <LoopFillZerobss>

08000ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca8:	3204      	adds	r2, #4

08000caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cac:	d3fb      	bcc.n	8000ca6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cae:	f003 f989 	bl	8003fc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cb2:	f7ff fdc5 	bl	8000840 <main>

08000cb6 <LoopForever>:

LoopForever:
  b LoopForever
 8000cb6:	e7fe      	b.n	8000cb6 <LoopForever>
  ldr   r0, =_estack
 8000cb8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cc4:	08004128 	.word	0x08004128
  ldr r2, =_sbss
 8000cc8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ccc:	20000144 	.word	0x20000144

08000cd0 <ADC_COMP1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cd0:	e7fe      	b.n	8000cd0 <ADC_COMP1_2_IRQHandler>

08000cd2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cd8:	1dfb      	adds	r3, r7, #7
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cde:	2003      	movs	r0, #3
 8000ce0:	f000 f80e 	bl	8000d00 <HAL_InitTick>
 8000ce4:	1e03      	subs	r3, r0, #0
 8000ce6:	d003      	beq.n	8000cf0 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000ce8:	1dfb      	adds	r3, r7, #7
 8000cea:	2201      	movs	r2, #1
 8000cec:	701a      	strb	r2, [r3, #0]
 8000cee:	e001      	b.n	8000cf4 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cf0:	f7ff feae 	bl	8000a50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cf4:	1dfb      	adds	r3, r7, #7
 8000cf6:	781b      	ldrb	r3, [r3, #0]
}
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	b002      	add	sp, #8
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d00:	b590      	push	{r4, r7, lr}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d08:	230f      	movs	r3, #15
 8000d0a:	18fb      	adds	r3, r7, r3
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8000d10:	4b1d      	ldr	r3, [pc, #116]	@ (8000d88 <HAL_InitTick+0x88>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d02b      	beq.n	8000d70 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d18:	4b1c      	ldr	r3, [pc, #112]	@ (8000d8c <HAL_InitTick+0x8c>)
 8000d1a:	681c      	ldr	r4, [r3, #0]
 8000d1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000d88 <HAL_InitTick+0x88>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	0019      	movs	r1, r3
 8000d22:	23fa      	movs	r3, #250	@ 0xfa
 8000d24:	0098      	lsls	r0, r3, #2
 8000d26:	f7ff f9ef 	bl	8000108 <__udivsi3>
 8000d2a:	0003      	movs	r3, r0
 8000d2c:	0019      	movs	r1, r3
 8000d2e:	0020      	movs	r0, r4
 8000d30:	f7ff f9ea 	bl	8000108 <__udivsi3>
 8000d34:	0003      	movs	r3, r0
 8000d36:	0018      	movs	r0, r3
 8000d38:	f000 f8ed 	bl	8000f16 <HAL_SYSTICK_Config>
 8000d3c:	1e03      	subs	r3, r0, #0
 8000d3e:	d112      	bne.n	8000d66 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2b03      	cmp	r3, #3
 8000d44:	d80a      	bhi.n	8000d5c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	2301      	movs	r3, #1
 8000d4a:	425b      	negs	r3, r3
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f000 f8cc 	bl	8000eec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d54:	4b0e      	ldr	r3, [pc, #56]	@ (8000d90 <HAL_InitTick+0x90>)
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	e00d      	b.n	8000d78 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d5c:	230f      	movs	r3, #15
 8000d5e:	18fb      	adds	r3, r7, r3
 8000d60:	2201      	movs	r2, #1
 8000d62:	701a      	strb	r2, [r3, #0]
 8000d64:	e008      	b.n	8000d78 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d66:	230f      	movs	r3, #15
 8000d68:	18fb      	adds	r3, r7, r3
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	701a      	strb	r2, [r3, #0]
 8000d6e:	e003      	b.n	8000d78 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d70:	230f      	movs	r3, #15
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	2201      	movs	r2, #1
 8000d76:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000d78:	230f      	movs	r3, #15
 8000d7a:	18fb      	adds	r3, r7, r3
 8000d7c:	781b      	ldrb	r3, [r3, #0]
}
 8000d7e:	0018      	movs	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	b005      	add	sp, #20
 8000d84:	bd90      	pop	{r4, r7, pc}
 8000d86:	46c0      	nop			@ (mov r8, r8)
 8000d88:	20000008 	.word	0x20000008
 8000d8c:	20000000 	.word	0x20000000
 8000d90:	20000004 	.word	0x20000004

08000d94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d98:	4b04      	ldr	r3, [pc, #16]	@ (8000dac <HAL_IncTick+0x18>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	4b04      	ldr	r3, [pc, #16]	@ (8000db0 <HAL_IncTick+0x1c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	18d2      	adds	r2, r2, r3
 8000da2:	4b02      	ldr	r3, [pc, #8]	@ (8000dac <HAL_IncTick+0x18>)
 8000da4:	601a      	str	r2, [r3, #0]
}
 8000da6:	46c0      	nop			@ (mov r8, r8)
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000140 	.word	0x20000140
 8000db0:	20000008 	.word	0x20000008

08000db4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  return uwTick;
 8000db8:	4b02      	ldr	r3, [pc, #8]	@ (8000dc4 <HAL_GetTick+0x10>)
 8000dba:	681b      	ldr	r3, [r3, #0]
}
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	46c0      	nop			@ (mov r8, r8)
 8000dc4:	20000140 	.word	0x20000140

08000dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc8:	b590      	push	{r4, r7, lr}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	0002      	movs	r2, r0
 8000dd0:	6039      	str	r1, [r7, #0]
 8000dd2:	1dfb      	adds	r3, r7, #7
 8000dd4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dd6:	1dfb      	adds	r3, r7, #7
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ddc:	d828      	bhi.n	8000e30 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dde:	4a2f      	ldr	r2, [pc, #188]	@ (8000e9c <__NVIC_SetPriority+0xd4>)
 8000de0:	1dfb      	adds	r3, r7, #7
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	b25b      	sxtb	r3, r3
 8000de6:	089b      	lsrs	r3, r3, #2
 8000de8:	33c0      	adds	r3, #192	@ 0xc0
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	589b      	ldr	r3, [r3, r2]
 8000dee:	1dfa      	adds	r2, r7, #7
 8000df0:	7812      	ldrb	r2, [r2, #0]
 8000df2:	0011      	movs	r1, r2
 8000df4:	2203      	movs	r2, #3
 8000df6:	400a      	ands	r2, r1
 8000df8:	00d2      	lsls	r2, r2, #3
 8000dfa:	21ff      	movs	r1, #255	@ 0xff
 8000dfc:	4091      	lsls	r1, r2
 8000dfe:	000a      	movs	r2, r1
 8000e00:	43d2      	mvns	r2, r2
 8000e02:	401a      	ands	r2, r3
 8000e04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	019b      	lsls	r3, r3, #6
 8000e0a:	22ff      	movs	r2, #255	@ 0xff
 8000e0c:	401a      	ands	r2, r3
 8000e0e:	1dfb      	adds	r3, r7, #7
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	0018      	movs	r0, r3
 8000e14:	2303      	movs	r3, #3
 8000e16:	4003      	ands	r3, r0
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e1c:	481f      	ldr	r0, [pc, #124]	@ (8000e9c <__NVIC_SetPriority+0xd4>)
 8000e1e:	1dfb      	adds	r3, r7, #7
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	b25b      	sxtb	r3, r3
 8000e24:	089b      	lsrs	r3, r3, #2
 8000e26:	430a      	orrs	r2, r1
 8000e28:	33c0      	adds	r3, #192	@ 0xc0
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e2e:	e031      	b.n	8000e94 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e30:	4a1b      	ldr	r2, [pc, #108]	@ (8000ea0 <__NVIC_SetPriority+0xd8>)
 8000e32:	1dfb      	adds	r3, r7, #7
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	0019      	movs	r1, r3
 8000e38:	230f      	movs	r3, #15
 8000e3a:	400b      	ands	r3, r1
 8000e3c:	3b08      	subs	r3, #8
 8000e3e:	089b      	lsrs	r3, r3, #2
 8000e40:	3306      	adds	r3, #6
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	18d3      	adds	r3, r2, r3
 8000e46:	3304      	adds	r3, #4
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	1dfa      	adds	r2, r7, #7
 8000e4c:	7812      	ldrb	r2, [r2, #0]
 8000e4e:	0011      	movs	r1, r2
 8000e50:	2203      	movs	r2, #3
 8000e52:	400a      	ands	r2, r1
 8000e54:	00d2      	lsls	r2, r2, #3
 8000e56:	21ff      	movs	r1, #255	@ 0xff
 8000e58:	4091      	lsls	r1, r2
 8000e5a:	000a      	movs	r2, r1
 8000e5c:	43d2      	mvns	r2, r2
 8000e5e:	401a      	ands	r2, r3
 8000e60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	019b      	lsls	r3, r3, #6
 8000e66:	22ff      	movs	r2, #255	@ 0xff
 8000e68:	401a      	ands	r2, r3
 8000e6a:	1dfb      	adds	r3, r7, #7
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	0018      	movs	r0, r3
 8000e70:	2303      	movs	r3, #3
 8000e72:	4003      	ands	r3, r0
 8000e74:	00db      	lsls	r3, r3, #3
 8000e76:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e78:	4809      	ldr	r0, [pc, #36]	@ (8000ea0 <__NVIC_SetPriority+0xd8>)
 8000e7a:	1dfb      	adds	r3, r7, #7
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	001c      	movs	r4, r3
 8000e80:	230f      	movs	r3, #15
 8000e82:	4023      	ands	r3, r4
 8000e84:	3b08      	subs	r3, #8
 8000e86:	089b      	lsrs	r3, r3, #2
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	3306      	adds	r3, #6
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	18c3      	adds	r3, r0, r3
 8000e90:	3304      	adds	r3, #4
 8000e92:	601a      	str	r2, [r3, #0]
}
 8000e94:	46c0      	nop			@ (mov r8, r8)
 8000e96:	46bd      	mov	sp, r7
 8000e98:	b003      	add	sp, #12
 8000e9a:	bd90      	pop	{r4, r7, pc}
 8000e9c:	e000e100 	.word	0xe000e100
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	1e5a      	subs	r2, r3, #1
 8000eb0:	2380      	movs	r3, #128	@ 0x80
 8000eb2:	045b      	lsls	r3, r3, #17
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d301      	bcc.n	8000ebc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eb8:	2301      	movs	r3, #1
 8000eba:	e010      	b.n	8000ede <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee8 <SysTick_Config+0x44>)
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	3a01      	subs	r2, #1
 8000ec2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	425b      	negs	r3, r3
 8000ec8:	2103      	movs	r1, #3
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f7ff ff7c 	bl	8000dc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed0:	4b05      	ldr	r3, [pc, #20]	@ (8000ee8 <SysTick_Config+0x44>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed6:	4b04      	ldr	r3, [pc, #16]	@ (8000ee8 <SysTick_Config+0x44>)
 8000ed8:	2207      	movs	r2, #7
 8000eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	0018      	movs	r0, r3
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	b002      	add	sp, #8
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	46c0      	nop			@ (mov r8, r8)
 8000ee8:	e000e010 	.word	0xe000e010

08000eec <HAL_NVIC_SetPriority>:
  *         with stm32u0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60b9      	str	r1, [r7, #8]
 8000ef4:	607a      	str	r2, [r7, #4]
 8000ef6:	210f      	movs	r1, #15
 8000ef8:	187b      	adds	r3, r7, r1
 8000efa:	1c02      	adds	r2, r0, #0
 8000efc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	187b      	adds	r3, r7, r1
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	b25b      	sxtb	r3, r3
 8000f06:	0011      	movs	r1, r2
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f7ff ff5d 	bl	8000dc8 <__NVIC_SetPriority>
}
 8000f0e:	46c0      	nop			@ (mov r8, r8)
 8000f10:	46bd      	mov	sp, r7
 8000f12:	b004      	add	sp, #16
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	0018      	movs	r0, r3
 8000f22:	f7ff ffbf 	bl	8000ea4 <SysTick_Config>
 8000f26:	0003      	movs	r3, r0
}
 8000f28:	0018      	movs	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	b002      	add	sp, #8
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f3e:	e153      	b.n	80011e8 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2101      	movs	r1, #1
 8000f46:	697a      	ldr	r2, [r7, #20]
 8000f48:	4091      	lsls	r1, r2
 8000f4a:	000a      	movs	r2, r1
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d100      	bne.n	8000f58 <HAL_GPIO_Init+0x28>
 8000f56:	e144      	b.n	80011e2 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	4013      	ands	r3, r2
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d005      	beq.n	8000f70 <HAL_GPIO_Init+0x40>
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	2203      	movs	r2, #3
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d130      	bne.n	8000fd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	409a      	lsls	r2, r3
 8000f7e:	0013      	movs	r3, r2
 8000f80:	43da      	mvns	r2, r3
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	4013      	ands	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	68da      	ldr	r2, [r3, #12]
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	409a      	lsls	r2, r3
 8000f92:	0013      	movs	r3, r2
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	409a      	lsls	r2, r3
 8000fac:	0013      	movs	r3, r2
 8000fae:	43da      	mvns	r2, r3
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	091b      	lsrs	r3, r3, #4
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	401a      	ands	r2, r3
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	409a      	lsls	r2, r3
 8000fc4:	0013      	movs	r3, r2
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	4013      	ands	r3, r2
 8000fda:	2b03      	cmp	r3, #3
 8000fdc:	d017      	beq.n	800100e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	2203      	movs	r2, #3
 8000fea:	409a      	lsls	r2, r3
 8000fec:	0013      	movs	r3, r2
 8000fee:	43da      	mvns	r2, r3
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	689a      	ldr	r2, [r3, #8]
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	409a      	lsls	r2, r3
 8001000:	0013      	movs	r3, r2
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	2203      	movs	r2, #3
 8001014:	4013      	ands	r3, r2
 8001016:	2b02      	cmp	r3, #2
 8001018:	d123      	bne.n	8001062 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	08da      	lsrs	r2, r3, #3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3208      	adds	r2, #8
 8001022:	0092      	lsls	r2, r2, #2
 8001024:	58d3      	ldr	r3, [r2, r3]
 8001026:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	2207      	movs	r2, #7
 800102c:	4013      	ands	r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	220f      	movs	r2, #15
 8001032:	409a      	lsls	r2, r3
 8001034:	0013      	movs	r3, r2
 8001036:	43da      	mvns	r2, r3
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	691a      	ldr	r2, [r3, #16]
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	2107      	movs	r1, #7
 8001046:	400b      	ands	r3, r1
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	409a      	lsls	r2, r3
 800104c:	0013      	movs	r3, r2
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	08da      	lsrs	r2, r3, #3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3208      	adds	r2, #8
 800105c:	0092      	lsls	r2, r2, #2
 800105e:	6939      	ldr	r1, [r7, #16]
 8001060:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	2203      	movs	r2, #3
 800106e:	409a      	lsls	r2, r3
 8001070:	0013      	movs	r3, r2
 8001072:	43da      	mvns	r2, r3
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	4013      	ands	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	2203      	movs	r2, #3
 8001080:	401a      	ands	r2, r3
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	409a      	lsls	r2, r3
 8001088:	0013      	movs	r3, r2
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685a      	ldr	r2, [r3, #4]
 800109a:	23c0      	movs	r3, #192	@ 0xc0
 800109c:	029b      	lsls	r3, r3, #10
 800109e:	4013      	ands	r3, r2
 80010a0:	d100      	bne.n	80010a4 <HAL_GPIO_Init+0x174>
 80010a2:	e09e      	b.n	80011e2 <HAL_GPIO_Init+0x2b2>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80010a4:	4a56      	ldr	r2, [pc, #344]	@ (8001200 <HAL_GPIO_Init+0x2d0>)
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	089b      	lsrs	r3, r3, #2
 80010aa:	3318      	adds	r3, #24
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	589b      	ldr	r3, [r3, r2]
 80010b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	2203      	movs	r2, #3
 80010b6:	4013      	ands	r3, r2
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	220f      	movs	r2, #15
 80010bc:	409a      	lsls	r2, r3
 80010be:	0013      	movs	r3, r2
 80010c0:	43da      	mvns	r2, r3
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	4013      	ands	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	23a0      	movs	r3, #160	@ 0xa0
 80010cc:	05db      	lsls	r3, r3, #23
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d01f      	beq.n	8001112 <HAL_GPIO_Init+0x1e2>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a4b      	ldr	r2, [pc, #300]	@ (8001204 <HAL_GPIO_Init+0x2d4>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d019      	beq.n	800110e <HAL_GPIO_Init+0x1de>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a4a      	ldr	r2, [pc, #296]	@ (8001208 <HAL_GPIO_Init+0x2d8>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d013      	beq.n	800110a <HAL_GPIO_Init+0x1da>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a49      	ldr	r2, [pc, #292]	@ (800120c <HAL_GPIO_Init+0x2dc>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d00d      	beq.n	8001106 <HAL_GPIO_Init+0x1d6>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a48      	ldr	r2, [pc, #288]	@ (8001210 <HAL_GPIO_Init+0x2e0>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d007      	beq.n	8001102 <HAL_GPIO_Init+0x1d2>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a47      	ldr	r2, [pc, #284]	@ (8001214 <HAL_GPIO_Init+0x2e4>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d101      	bne.n	80010fe <HAL_GPIO_Init+0x1ce>
 80010fa:	2305      	movs	r3, #5
 80010fc:	e00a      	b.n	8001114 <HAL_GPIO_Init+0x1e4>
 80010fe:	2306      	movs	r3, #6
 8001100:	e008      	b.n	8001114 <HAL_GPIO_Init+0x1e4>
 8001102:	2304      	movs	r3, #4
 8001104:	e006      	b.n	8001114 <HAL_GPIO_Init+0x1e4>
 8001106:	2303      	movs	r3, #3
 8001108:	e004      	b.n	8001114 <HAL_GPIO_Init+0x1e4>
 800110a:	2302      	movs	r3, #2
 800110c:	e002      	b.n	8001114 <HAL_GPIO_Init+0x1e4>
 800110e:	2301      	movs	r3, #1
 8001110:	e000      	b.n	8001114 <HAL_GPIO_Init+0x1e4>
 8001112:	2300      	movs	r3, #0
 8001114:	697a      	ldr	r2, [r7, #20]
 8001116:	2103      	movs	r1, #3
 8001118:	400a      	ands	r2, r1
 800111a:	00d2      	lsls	r2, r2, #3
 800111c:	4093      	lsls	r3, r2
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001124:	4936      	ldr	r1, [pc, #216]	@ (8001200 <HAL_GPIO_Init+0x2d0>)
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	089b      	lsrs	r3, r3, #2
 800112a:	3318      	adds	r3, #24
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001132:	4b33      	ldr	r3, [pc, #204]	@ (8001200 <HAL_GPIO_Init+0x2d0>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	43da      	mvns	r2, r3
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	4013      	ands	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685a      	ldr	r2, [r3, #4]
 8001146:	2380      	movs	r3, #128	@ 0x80
 8001148:	035b      	lsls	r3, r3, #13
 800114a:	4013      	ands	r3, r2
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4313      	orrs	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001156:	4b2a      	ldr	r3, [pc, #168]	@ (8001200 <HAL_GPIO_Init+0x2d0>)
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800115c:	4b28      	ldr	r3, [pc, #160]	@ (8001200 <HAL_GPIO_Init+0x2d0>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	43da      	mvns	r2, r3
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685a      	ldr	r2, [r3, #4]
 8001170:	2380      	movs	r3, #128	@ 0x80
 8001172:	039b      	lsls	r3, r3, #14
 8001174:	4013      	ands	r3, r2
 8001176:	d003      	beq.n	8001180 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	4313      	orrs	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001180:	4b1f      	ldr	r3, [pc, #124]	@ (8001200 <HAL_GPIO_Init+0x2d0>)
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001186:	4a1e      	ldr	r2, [pc, #120]	@ (8001200 <HAL_GPIO_Init+0x2d0>)
 8001188:	2384      	movs	r3, #132	@ 0x84
 800118a:	58d3      	ldr	r3, [r2, r3]
 800118c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	43da      	mvns	r2, r3
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	4013      	ands	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	2380      	movs	r3, #128	@ 0x80
 800119e:	029b      	lsls	r3, r3, #10
 80011a0:	4013      	ands	r3, r2
 80011a2:	d003      	beq.n	80011ac <HAL_GPIO_Init+0x27c>
        {
          temp |= iocurrent;
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011ac:	4914      	ldr	r1, [pc, #80]	@ (8001200 <HAL_GPIO_Init+0x2d0>)
 80011ae:	2284      	movs	r2, #132	@ 0x84
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80011b4:	4a12      	ldr	r2, [pc, #72]	@ (8001200 <HAL_GPIO_Init+0x2d0>)
 80011b6:	2380      	movs	r3, #128	@ 0x80
 80011b8:	58d3      	ldr	r3, [r2, r3]
 80011ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	43da      	mvns	r2, r3
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	4013      	ands	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685a      	ldr	r2, [r3, #4]
 80011ca:	2380      	movs	r3, #128	@ 0x80
 80011cc:	025b      	lsls	r3, r3, #9
 80011ce:	4013      	ands	r3, r2
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011da:	4909      	ldr	r1, [pc, #36]	@ (8001200 <HAL_GPIO_Init+0x2d0>)
 80011dc:	2280      	movs	r2, #128	@ 0x80
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	3301      	adds	r3, #1
 80011e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	40da      	lsrs	r2, r3
 80011f0:	1e13      	subs	r3, r2, #0
 80011f2:	d000      	beq.n	80011f6 <HAL_GPIO_Init+0x2c6>
 80011f4:	e6a4      	b.n	8000f40 <HAL_GPIO_Init+0x10>
  }
}
 80011f6:	46c0      	nop			@ (mov r8, r8)
 80011f8:	46c0      	nop			@ (mov r8, r8)
 80011fa:	46bd      	mov	sp, r7
 80011fc:	b006      	add	sp, #24
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40021800 	.word	0x40021800
 8001204:	50000400 	.word	0x50000400
 8001208:	50000800 	.word	0x50000800
 800120c:	50000c00 	.word	0x50000c00
 8001210:	50001000 	.word	0x50001000
 8001214:	50001400 	.word	0x50001400

08001218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	0008      	movs	r0, r1
 8001222:	0011      	movs	r1, r2
 8001224:	1cbb      	adds	r3, r7, #2
 8001226:	1c02      	adds	r2, r0, #0
 8001228:	801a      	strh	r2, [r3, #0]
 800122a:	1c7b      	adds	r3, r7, #1
 800122c:	1c0a      	adds	r2, r1, #0
 800122e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001230:	1c7b      	adds	r3, r7, #1
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d004      	beq.n	8001242 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001238:	1cbb      	adds	r3, r7, #2
 800123a:	881a      	ldrh	r2, [r3, #0]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001240:	e003      	b.n	800124a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001242:	1cbb      	adds	r3, r7, #2
 8001244:	881a      	ldrh	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800124a:	46c0      	nop			@ (mov r8, r8)
 800124c:	46bd      	mov	sp, r7
 800124e:	b002      	add	sp, #8
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b084      	sub	sp, #16
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
 800125a:	000a      	movs	r2, r1
 800125c:	1cbb      	adds	r3, r7, #2
 800125e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001266:	1cbb      	adds	r3, r7, #2
 8001268:	881b      	ldrh	r3, [r3, #0]
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	4013      	ands	r3, r2
 800126e:	041a      	lsls	r2, r3, #16
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	43db      	mvns	r3, r3
 8001274:	1cb9      	adds	r1, r7, #2
 8001276:	8809      	ldrh	r1, [r1, #0]
 8001278:	400b      	ands	r3, r1
 800127a:	431a      	orrs	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	619a      	str	r2, [r3, #24]
}
 8001280:	46c0      	nop			@ (mov r8, r8)
 8001282:	46bd      	mov	sp, r7
 8001284:	b004      	add	sp, #16
 8001286:	bd80      	pop	{r7, pc}

08001288 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d101      	bne.n	800129a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e08f      	b.n	80013ba <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2241      	movs	r2, #65	@ 0x41
 800129e:	5c9b      	ldrb	r3, [r3, r2]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d107      	bne.n	80012b6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2240      	movs	r2, #64	@ 0x40
 80012aa:	2100      	movs	r1, #0
 80012ac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	0018      	movs	r0, r3
 80012b2:	f7ff fa63 	bl	800077c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2241      	movs	r2, #65	@ 0x41
 80012ba:	2124      	movs	r1, #36	@ 0x24
 80012bc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2101      	movs	r1, #1
 80012ca:	438a      	bics	r2, r1
 80012cc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685a      	ldr	r2, [r3, #4]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	493b      	ldr	r1, [pc, #236]	@ (80013c4 <HAL_I2C_Init+0x13c>)
 80012d8:	400a      	ands	r2, r1
 80012da:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	689a      	ldr	r2, [r3, #8]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4938      	ldr	r1, [pc, #224]	@ (80013c8 <HAL_I2C_Init+0x140>)
 80012e8:	400a      	ands	r2, r1
 80012ea:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d108      	bne.n	8001306 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689a      	ldr	r2, [r3, #8]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2180      	movs	r1, #128	@ 0x80
 80012fe:	0209      	lsls	r1, r1, #8
 8001300:	430a      	orrs	r2, r1
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	e007      	b.n	8001316 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	689a      	ldr	r2, [r3, #8]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2184      	movs	r1, #132	@ 0x84
 8001310:	0209      	lsls	r1, r1, #8
 8001312:	430a      	orrs	r2, r1
 8001314:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	2b02      	cmp	r3, #2
 800131c:	d109      	bne.n	8001332 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	685a      	ldr	r2, [r3, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2180      	movs	r1, #128	@ 0x80
 800132a:	0109      	lsls	r1, r1, #4
 800132c:	430a      	orrs	r2, r1
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	e007      	b.n	8001342 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	685a      	ldr	r2, [r3, #4]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4923      	ldr	r1, [pc, #140]	@ (80013cc <HAL_I2C_Init+0x144>)
 800133e:	400a      	ands	r2, r1
 8001340:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	685a      	ldr	r2, [r3, #4]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4920      	ldr	r1, [pc, #128]	@ (80013d0 <HAL_I2C_Init+0x148>)
 800134e:	430a      	orrs	r2, r1
 8001350:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	68da      	ldr	r2, [r3, #12]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	491a      	ldr	r1, [pc, #104]	@ (80013c8 <HAL_I2C_Init+0x140>)
 800135e:	400a      	ands	r2, r1
 8001360:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	691a      	ldr	r2, [r3, #16]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	431a      	orrs	r2, r3
 800136c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	430a      	orrs	r2, r1
 800137a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	69d9      	ldr	r1, [r3, #28]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a1a      	ldr	r2, [r3, #32]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	430a      	orrs	r2, r1
 800138a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2101      	movs	r1, #1
 8001398:	430a      	orrs	r2, r1
 800139a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2241      	movs	r2, #65	@ 0x41
 80013a6:	2120      	movs	r1, #32
 80013a8:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2242      	movs	r2, #66	@ 0x42
 80013b4:	2100      	movs	r1, #0
 80013b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	0018      	movs	r0, r3
 80013bc:	46bd      	mov	sp, r7
 80013be:	b002      	add	sp, #8
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	46c0      	nop			@ (mov r8, r8)
 80013c4:	f0ffffff 	.word	0xf0ffffff
 80013c8:	ffff7fff 	.word	0xffff7fff
 80013cc:	fffff7ff 	.word	0xfffff7ff
 80013d0:	02008000 	.word	0x02008000

080013d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2241      	movs	r2, #65	@ 0x41
 80013e2:	5c9b      	ldrb	r3, [r3, r2]
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b20      	cmp	r3, #32
 80013e8:	d138      	bne.n	800145c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2240      	movs	r2, #64	@ 0x40
 80013ee:	5c9b      	ldrb	r3, [r3, r2]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d101      	bne.n	80013f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80013f4:	2302      	movs	r3, #2
 80013f6:	e032      	b.n	800145e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2240      	movs	r2, #64	@ 0x40
 80013fc:	2101      	movs	r1, #1
 80013fe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2241      	movs	r2, #65	@ 0x41
 8001404:	2124      	movs	r1, #36	@ 0x24
 8001406:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2101      	movs	r1, #1
 8001414:	438a      	bics	r2, r1
 8001416:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4911      	ldr	r1, [pc, #68]	@ (8001468 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001424:	400a      	ands	r2, r1
 8001426:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6819      	ldr	r1, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	683a      	ldr	r2, [r7, #0]
 8001434:	430a      	orrs	r2, r1
 8001436:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2101      	movs	r1, #1
 8001444:	430a      	orrs	r2, r1
 8001446:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2241      	movs	r2, #65	@ 0x41
 800144c:	2120      	movs	r1, #32
 800144e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2240      	movs	r2, #64	@ 0x40
 8001454:	2100      	movs	r1, #0
 8001456:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001458:	2300      	movs	r3, #0
 800145a:	e000      	b.n	800145e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800145c:	2302      	movs	r3, #2
  }
}
 800145e:	0018      	movs	r0, r3
 8001460:	46bd      	mov	sp, r7
 8001462:	b002      	add	sp, #8
 8001464:	bd80      	pop	{r7, pc}
 8001466:	46c0      	nop			@ (mov r8, r8)
 8001468:	ffffefff 	.word	0xffffefff

0800146c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2241      	movs	r2, #65	@ 0x41
 800147a:	5c9b      	ldrb	r3, [r3, r2]
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b20      	cmp	r3, #32
 8001480:	d139      	bne.n	80014f6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2240      	movs	r2, #64	@ 0x40
 8001486:	5c9b      	ldrb	r3, [r3, r2]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d101      	bne.n	8001490 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800148c:	2302      	movs	r3, #2
 800148e:	e033      	b.n	80014f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2240      	movs	r2, #64	@ 0x40
 8001494:	2101      	movs	r1, #1
 8001496:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2241      	movs	r2, #65	@ 0x41
 800149c:	2124      	movs	r1, #36	@ 0x24
 800149e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2101      	movs	r1, #1
 80014ac:	438a      	bics	r2, r1
 80014ae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4a11      	ldr	r2, [pc, #68]	@ (8001500 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80014bc:	4013      	ands	r3, r2
 80014be:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	021b      	lsls	r3, r3, #8
 80014c4:	68fa      	ldr	r2, [r7, #12]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2101      	movs	r1, #1
 80014de:	430a      	orrs	r2, r1
 80014e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2241      	movs	r2, #65	@ 0x41
 80014e6:	2120      	movs	r1, #32
 80014e8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2240      	movs	r2, #64	@ 0x40
 80014ee:	2100      	movs	r1, #0
 80014f0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80014f2:	2300      	movs	r3, #0
 80014f4:	e000      	b.n	80014f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80014f6:	2302      	movs	r3, #2
  }
}
 80014f8:	0018      	movs	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	b004      	add	sp, #16
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	fffff0ff 	.word	0xfffff0ff

08001504 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001508:	4b04      	ldr	r3, [pc, #16]	@ (800151c <HAL_PWR_EnableBkUpAccess+0x18>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4b03      	ldr	r3, [pc, #12]	@ (800151c <HAL_PWR_EnableBkUpAccess+0x18>)
 800150e:	2180      	movs	r1, #128	@ 0x80
 8001510:	0049      	lsls	r1, r1, #1
 8001512:	430a      	orrs	r2, r1
 8001514:	601a      	str	r2, [r3, #0]
}
 8001516:	46c0      	nop			@ (mov r8, r8)
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40007000 	.word	0x40007000

08001520 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	2380      	movs	r3, #128	@ 0x80
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	429a      	cmp	r2, r3
 8001530:	d137      	bne.n	80015a2 <HAL_PWREx_ControlVoltageScaling+0x82>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001532:	4b27      	ldr	r3, [pc, #156]	@ (80015d0 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	23c0      	movs	r3, #192	@ 0xc0
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	401a      	ands	r2, r3
 800153c:	2380      	movs	r3, #128	@ 0x80
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	429a      	cmp	r2, r3
 8001542:	d040      	beq.n	80015c6 <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001544:	4b22      	ldr	r3, [pc, #136]	@ (80015d0 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a22      	ldr	r2, [pc, #136]	@ (80015d4 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800154a:	401a      	ands	r2, r3
 800154c:	4b20      	ldr	r3, [pc, #128]	@ (80015d0 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800154e:	2180      	movs	r1, #128	@ 0x80
 8001550:	0089      	lsls	r1, r1, #2
 8001552:	430a      	orrs	r2, r1
 8001554:	601a      	str	r2, [r3, #0]
      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001556:	4b20      	ldr	r3, [pc, #128]	@ (80015d8 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2232      	movs	r2, #50	@ 0x32
 800155c:	4353      	muls	r3, r2
 800155e:	491f      	ldr	r1, [pc, #124]	@ (80015dc <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8001560:	0018      	movs	r0, r3
 8001562:	f7fe fdd1 	bl	8000108 <__udivsi3>
 8001566:	0003      	movs	r3, r0
 8001568:	3301      	adds	r3, #1
 800156a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800156c:	e002      	b.n	8001574 <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        wait_loop_index--;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	3b01      	subs	r3, #1
 8001572:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001574:	4b16      	ldr	r3, [pc, #88]	@ (80015d0 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001576:	695a      	ldr	r2, [r3, #20]
 8001578:	2380      	movs	r3, #128	@ 0x80
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	401a      	ands	r2, r3
 800157e:	2380      	movs	r3, #128	@ 0x80
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	429a      	cmp	r2, r3
 8001584:	d102      	bne.n	800158c <HAL_PWREx_ControlVoltageScaling+0x6c>
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1f0      	bne.n	800156e <HAL_PWREx_ControlVoltageScaling+0x4e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800158c:	4b10      	ldr	r3, [pc, #64]	@ (80015d0 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800158e:	695a      	ldr	r2, [r3, #20]
 8001590:	2380      	movs	r3, #128	@ 0x80
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	401a      	ands	r2, r3
 8001596:	2380      	movs	r3, #128	@ 0x80
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	429a      	cmp	r2, r3
 800159c:	d113      	bne.n	80015c6 <HAL_PWREx_ControlVoltageScaling+0xa6>
      {
        return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e012      	b.n	80015c8 <HAL_PWREx_ControlVoltageScaling+0xa8>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80015a2:	4b0b      	ldr	r3, [pc, #44]	@ (80015d0 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	23c0      	movs	r3, #192	@ 0xc0
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	401a      	ands	r2, r3
 80015ac:	2380      	movs	r3, #128	@ 0x80
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d008      	beq.n	80015c6 <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015b4:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a06      	ldr	r2, [pc, #24]	@ (80015d4 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80015ba:	401a      	ands	r2, r3
 80015bc:	4b04      	ldr	r3, [pc, #16]	@ (80015d0 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80015be:	2180      	movs	r1, #128	@ 0x80
 80015c0:	00c9      	lsls	r1, r1, #3
 80015c2:	430a      	orrs	r2, r1
 80015c4:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	0018      	movs	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	b004      	add	sp, #16
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40007000 	.word	0x40007000
 80015d4:	fffff9ff 	.word	0xfffff9ff
 80015d8:	20000000 	.word	0x20000000
 80015dc:	000f4240 	.word	0x000f4240

080015e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  *
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80015e4:	4b03      	ldr	r3, [pc, #12]	@ (80015f4 <HAL_PWREx_GetVoltageRange+0x14>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	23c0      	movs	r3, #192	@ 0xc0
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	4013      	ands	r3, r2
}
 80015ee:	0018      	movs	r0, r3
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40007000 	.word	0x40007000

080015f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015f8:	b5b0      	push	{r4, r5, r7, lr}
 80015fa:	b088      	sub	sp, #32
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001600:	4bc9      	ldr	r3, [pc, #804]	@ (8001928 <HAL_RCC_OscConfig+0x330>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	2238      	movs	r2, #56	@ 0x38
 8001606:	4013      	ands	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800160a:	4bc7      	ldr	r3, [pc, #796]	@ (8001928 <HAL_RCC_OscConfig+0x330>)
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	2203      	movs	r2, #3
 8001610:	4013      	ands	r3, r2
 8001612:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2210      	movs	r2, #16
 800161a:	4013      	ands	r3, r2
 800161c:	d100      	bne.n	8001620 <HAL_RCC_OscConfig+0x28>
 800161e:	e0ef      	b.n	8001800 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d007      	beq.n	8001636 <HAL_RCC_OscConfig+0x3e>
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	2b18      	cmp	r3, #24
 800162a:	d000      	beq.n	800162e <HAL_RCC_OscConfig+0x36>
 800162c:	e093      	b.n	8001756 <HAL_RCC_OscConfig+0x15e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d000      	beq.n	8001636 <HAL_RCC_OscConfig+0x3e>
 8001634:	e08f      	b.n	8001756 <HAL_RCC_OscConfig+0x15e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001636:	4bbc      	ldr	r3, [pc, #752]	@ (8001928 <HAL_RCC_OscConfig+0x330>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2202      	movs	r2, #2
 800163c:	4013      	ands	r3, r2
 800163e:	d006      	beq.n	800164e <HAL_RCC_OscConfig+0x56>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	69db      	ldr	r3, [r3, #28]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d102      	bne.n	800164e <HAL_RCC_OscConfig+0x56>
      {
        return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	f000 fbf2 	bl	8001e32 <HAL_RCC_OscConfig+0x83a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001652:	4bb5      	ldr	r3, [pc, #724]	@ (8001928 <HAL_RCC_OscConfig+0x330>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2108      	movs	r1, #8
 8001658:	400b      	ands	r3, r1
 800165a:	d004      	beq.n	8001666 <HAL_RCC_OscConfig+0x6e>
 800165c:	4bb2      	ldr	r3, [pc, #712]	@ (8001928 <HAL_RCC_OscConfig+0x330>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	21f0      	movs	r1, #240	@ 0xf0
 8001662:	400b      	ands	r3, r1
 8001664:	e005      	b.n	8001672 <HAL_RCC_OscConfig+0x7a>
 8001666:	49b0      	ldr	r1, [pc, #704]	@ (8001928 <HAL_RCC_OscConfig+0x330>)
 8001668:	2394      	movs	r3, #148	@ 0x94
 800166a:	58cb      	ldr	r3, [r1, r3]
 800166c:	091b      	lsrs	r3, r3, #4
 800166e:	21f0      	movs	r1, #240	@ 0xf0
 8001670:	400b      	ands	r3, r1
 8001672:	4293      	cmp	r3, r2
 8001674:	d225      	bcs.n	80016c2 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800167a:	0018      	movs	r0, r3
 800167c:	f000 fd90 	bl	80021a0 <RCC_SetFlashLatencyFromMSIRange>
 8001680:	1e03      	subs	r3, r0, #0
 8001682:	d002      	beq.n	800168a <HAL_RCC_OscConfig+0x92>
          {
            return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	f000 fbd4 	bl	8001e32 <HAL_RCC_OscConfig+0x83a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800168a:	4ba7      	ldr	r3, [pc, #668]	@ (8001928 <HAL_RCC_OscConfig+0x330>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	4ba6      	ldr	r3, [pc, #664]	@ (8001928 <HAL_RCC_OscConfig+0x330>)
 8001690:	2108      	movs	r1, #8
 8001692:	430a      	orrs	r2, r1
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	4ba4      	ldr	r3, [pc, #656]	@ (8001928 <HAL_RCC_OscConfig+0x330>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	22f0      	movs	r2, #240	@ 0xf0
 800169c:	4393      	bics	r3, r2
 800169e:	0019      	movs	r1, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016a4:	4ba0      	ldr	r3, [pc, #640]	@ (8001928 <HAL_RCC_OscConfig+0x330>)
 80016a6:	430a      	orrs	r2, r1
 80016a8:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016aa:	4b9f      	ldr	r3, [pc, #636]	@ (8001928 <HAL_RCC_OscConfig+0x330>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	4a9f      	ldr	r2, [pc, #636]	@ (800192c <HAL_RCC_OscConfig+0x334>)
 80016b0:	4013      	ands	r3, r2
 80016b2:	0019      	movs	r1, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a1b      	ldr	r3, [r3, #32]
 80016b8:	021a      	lsls	r2, r3, #8
 80016ba:	4b9b      	ldr	r3, [pc, #620]	@ (8001928 <HAL_RCC_OscConfig+0x330>)
 80016bc:	430a      	orrs	r2, r1
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	e027      	b.n	8001712 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016c2:	4b99      	ldr	r3, [pc, #612]	@ (8001928 <HAL_RCC_OscConfig+0x330>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	4b98      	ldr	r3, [pc, #608]	@ (8001928 <HAL_RCC_OscConfig+0x330>)
 80016c8:	2108      	movs	r1, #8
 80016ca:	430a      	orrs	r2, r1
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	4b96      	ldr	r3, [pc, #600]	@ (8001928 <HAL_RCC_OscConfig+0x330>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	22f0      	movs	r2, #240	@ 0xf0
 80016d4:	4393      	bics	r3, r2
 80016d6:	0019      	movs	r1, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016dc:	4b92      	ldr	r3, [pc, #584]	@ (8001928 <HAL_RCC_OscConfig+0x330>)
 80016de:	430a      	orrs	r2, r1
 80016e0:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016e2:	4b91      	ldr	r3, [pc, #580]	@ (8001928 <HAL_RCC_OscConfig+0x330>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	4a91      	ldr	r2, [pc, #580]	@ (800192c <HAL_RCC_OscConfig+0x334>)
 80016e8:	4013      	ands	r3, r2
 80016ea:	0019      	movs	r1, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	021a      	lsls	r2, r3, #8
 80016f2:	4b8d      	ldr	r3, [pc, #564]	@ (8001928 <HAL_RCC_OscConfig+0x330>)
 80016f4:	430a      	orrs	r2, r1
 80016f6:	605a      	str	r2, [r3, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d109      	bne.n	8001712 <HAL_RCC_OscConfig+0x11a>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001702:	0018      	movs	r0, r3
 8001704:	f000 fd4c 	bl	80021a0 <RCC_SetFlashLatencyFromMSIRange>
 8001708:	1e03      	subs	r3, r0, #0
 800170a:	d002      	beq.n	8001712 <HAL_RCC_OscConfig+0x11a>
            {
              return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	f000 fb90 	bl	8001e32 <HAL_RCC_OscConfig+0x83a>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8001712:	f000 fc87 	bl	8002024 <HAL_RCC_GetSysClockFreq>
 8001716:	0001      	movs	r1, r0
 8001718:	4b83      	ldr	r3, [pc, #524]	@ (8001928 <HAL_RCC_OscConfig+0x330>)
 800171a:	689b      	ldr	r3, [r3, #8]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800171c:	0a1b      	lsrs	r3, r3, #8
 800171e:	220f      	movs	r2, #15
 8001720:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8001722:	4a83      	ldr	r2, [pc, #524]	@ (8001930 <HAL_RCC_OscConfig+0x338>)
 8001724:	5cd3      	ldrb	r3, [r2, r3]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001726:	001a      	movs	r2, r3
 8001728:	231f      	movs	r3, #31
 800172a:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 800172c:	000a      	movs	r2, r1
 800172e:	40da      	lsrs	r2, r3
 8001730:	4b80      	ldr	r3, [pc, #512]	@ (8001934 <HAL_RCC_OscConfig+0x33c>)
 8001732:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001734:	4b80      	ldr	r3, [pc, #512]	@ (8001938 <HAL_RCC_OscConfig+0x340>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	250f      	movs	r5, #15
 800173a:	197c      	adds	r4, r7, r5
 800173c:	0018      	movs	r0, r3
 800173e:	f7ff fadf 	bl	8000d00 <HAL_InitTick>
 8001742:	0003      	movs	r3, r0
 8001744:	7023      	strb	r3, [r4, #0]
        if (status != HAL_OK)
 8001746:	197b      	adds	r3, r7, r5
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d057      	beq.n	80017fe <HAL_RCC_OscConfig+0x206>
        {
          return status;
 800174e:	197b      	adds	r3, r7, r5
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	f000 fb6e 	bl	8001e32 <HAL_RCC_OscConfig+0x83a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d035      	beq.n	80017ca <HAL_RCC_OscConfig+0x1d2>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800175e:	4b72      	ldr	r3, [pc, #456]	@ (8001928 <HAL_RCC_OscConfig+0x330>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	4b71      	ldr	r3, [pc, #452]	@ (8001928 <HAL_RCC_OscConfig+0x330>)
 8001764:	2101      	movs	r1, #1
 8001766:	430a      	orrs	r2, r1
 8001768:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800176a:	f7ff fb23 	bl	8000db4 <HAL_GetTick>
 800176e:	0003      	movs	r3, r0
 8001770:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001772:	e009      	b.n	8001788 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8001774:	f7ff fb1e 	bl	8000db4 <HAL_GetTick>
 8001778:	0002      	movs	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d902      	bls.n	8001788 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	f000 fb55 	bl	8001e32 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001788:	4b67      	ldr	r3, [pc, #412]	@ (8001928 <HAL_RCC_OscConfig+0x330>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2202      	movs	r2, #2
 800178e:	4013      	ands	r3, r2
 8001790:	d0f0      	beq.n	8001774 <HAL_RCC_OscConfig+0x17c>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001792:	4b65      	ldr	r3, [pc, #404]	@ (8001928 <HAL_RCC_OscConfig+0x330>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	4b64      	ldr	r3, [pc, #400]	@ (8001928 <HAL_RCC_OscConfig+0x330>)
 8001798:	2108      	movs	r1, #8
 800179a:	430a      	orrs	r2, r1
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	4b62      	ldr	r3, [pc, #392]	@ (8001928 <HAL_RCC_OscConfig+0x330>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	22f0      	movs	r2, #240	@ 0xf0
 80017a4:	4393      	bics	r3, r2
 80017a6:	0019      	movs	r1, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017ac:	4b5e      	ldr	r3, [pc, #376]	@ (8001928 <HAL_RCC_OscConfig+0x330>)
 80017ae:	430a      	orrs	r2, r1
 80017b0:	601a      	str	r2, [r3, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017b2:	4b5d      	ldr	r3, [pc, #372]	@ (8001928 <HAL_RCC_OscConfig+0x330>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	4a5d      	ldr	r2, [pc, #372]	@ (800192c <HAL_RCC_OscConfig+0x334>)
 80017b8:	4013      	ands	r3, r2
 80017ba:	0019      	movs	r1, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a1b      	ldr	r3, [r3, #32]
 80017c0:	021a      	lsls	r2, r3, #8
 80017c2:	4b59      	ldr	r3, [pc, #356]	@ (8001928 <HAL_RCC_OscConfig+0x330>)
 80017c4:	430a      	orrs	r2, r1
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	e01a      	b.n	8001800 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017ca:	4b57      	ldr	r3, [pc, #348]	@ (8001928 <HAL_RCC_OscConfig+0x330>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	4b56      	ldr	r3, [pc, #344]	@ (8001928 <HAL_RCC_OscConfig+0x330>)
 80017d0:	2101      	movs	r1, #1
 80017d2:	438a      	bics	r2, r1
 80017d4:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017d6:	f7ff faed 	bl	8000db4 <HAL_GetTick>
 80017da:	0003      	movs	r3, r0
 80017dc:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x1fa>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 80017e0:	f7ff fae8 	bl	8000db4 <HAL_GetTick>
 80017e4:	0002      	movs	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x1fa>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e31f      	b.n	8001e32 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017f2:	4b4d      	ldr	r3, [pc, #308]	@ (8001928 <HAL_RCC_OscConfig+0x330>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2202      	movs	r2, #2
 80017f8:	4013      	ands	r3, r2
 80017fa:	d1f1      	bne.n	80017e0 <HAL_RCC_OscConfig+0x1e8>
 80017fc:	e000      	b.n	8001800 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017fe:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2201      	movs	r2, #1
 8001806:	4013      	ands	r3, r2
 8001808:	d100      	bne.n	800180c <HAL_RCC_OscConfig+0x214>
 800180a:	e065      	b.n	80018d8 <HAL_RCC_OscConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	2b10      	cmp	r3, #16
 8001810:	d005      	beq.n	800181e <HAL_RCC_OscConfig+0x226>
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	2b18      	cmp	r3, #24
 8001816:	d10e      	bne.n	8001836 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	2b03      	cmp	r3, #3
 800181c:	d10b      	bne.n	8001836 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800181e:	4b42      	ldr	r3, [pc, #264]	@ (8001928 <HAL_RCC_OscConfig+0x330>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	2380      	movs	r3, #128	@ 0x80
 8001824:	029b      	lsls	r3, r3, #10
 8001826:	4013      	ands	r3, r2
 8001828:	d055      	beq.n	80018d6 <HAL_RCC_OscConfig+0x2de>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d151      	bne.n	80018d6 <HAL_RCC_OscConfig+0x2de>
      {
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e2fd      	b.n	8001e32 <HAL_RCC_OscConfig+0x83a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685a      	ldr	r2, [r3, #4]
 800183a:	2380      	movs	r3, #128	@ 0x80
 800183c:	025b      	lsls	r3, r3, #9
 800183e:	429a      	cmp	r2, r3
 8001840:	d107      	bne.n	8001852 <HAL_RCC_OscConfig+0x25a>
 8001842:	4b39      	ldr	r3, [pc, #228]	@ (8001928 <HAL_RCC_OscConfig+0x330>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	4b38      	ldr	r3, [pc, #224]	@ (8001928 <HAL_RCC_OscConfig+0x330>)
 8001848:	2180      	movs	r1, #128	@ 0x80
 800184a:	0249      	lsls	r1, r1, #9
 800184c:	430a      	orrs	r2, r1
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	e013      	b.n	800187a <HAL_RCC_OscConfig+0x282>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	23a0      	movs	r3, #160	@ 0xa0
 8001858:	02db      	lsls	r3, r3, #11
 800185a:	429a      	cmp	r2, r3
 800185c:	d107      	bne.n	800186e <HAL_RCC_OscConfig+0x276>
 800185e:	4b32      	ldr	r3, [pc, #200]	@ (8001928 <HAL_RCC_OscConfig+0x330>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	4b31      	ldr	r3, [pc, #196]	@ (8001928 <HAL_RCC_OscConfig+0x330>)
 8001864:	21a0      	movs	r1, #160	@ 0xa0
 8001866:	02c9      	lsls	r1, r1, #11
 8001868:	430a      	orrs	r2, r1
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	e005      	b.n	800187a <HAL_RCC_OscConfig+0x282>
 800186e:	4b2e      	ldr	r3, [pc, #184]	@ (8001928 <HAL_RCC_OscConfig+0x330>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	4b2d      	ldr	r3, [pc, #180]	@ (8001928 <HAL_RCC_OscConfig+0x330>)
 8001874:	4931      	ldr	r1, [pc, #196]	@ (800193c <HAL_RCC_OscConfig+0x344>)
 8001876:	400a      	ands	r2, r1
 8001878:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d014      	beq.n	80018ac <HAL_RCC_OscConfig+0x2b4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001882:	f7ff fa97 	bl	8000db4 <HAL_GetTick>
 8001886:	0003      	movs	r3, r0
 8001888:	613b      	str	r3, [r7, #16]
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800188c:	f7ff fa92 	bl	8000db4 <HAL_GetTick>
 8001890:	0002      	movs	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b64      	cmp	r3, #100	@ 0x64
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e2c9      	b.n	8001e32 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800189e:	4b22      	ldr	r3, [pc, #136]	@ (8001928 <HAL_RCC_OscConfig+0x330>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	2380      	movs	r3, #128	@ 0x80
 80018a4:	029b      	lsls	r3, r3, #10
 80018a6:	4013      	ands	r3, r2
 80018a8:	d0f0      	beq.n	800188c <HAL_RCC_OscConfig+0x294>
 80018aa:	e015      	b.n	80018d8 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ac:	f7ff fa82 	bl	8000db4 <HAL_GetTick>
 80018b0:	0003      	movs	r3, r0
 80018b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0x2d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80018b6:	f7ff fa7d 	bl	8000db4 <HAL_GetTick>
 80018ba:	0002      	movs	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b64      	cmp	r3, #100	@ 0x64
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x2d0>
          {
            return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e2b4      	b.n	8001e32 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018c8:	4b17      	ldr	r3, [pc, #92]	@ (8001928 <HAL_RCC_OscConfig+0x330>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	2380      	movs	r3, #128	@ 0x80
 80018ce:	029b      	lsls	r3, r3, #10
 80018d0:	4013      	ands	r3, r2
 80018d2:	d1f0      	bne.n	80018b6 <HAL_RCC_OscConfig+0x2be>
 80018d4:	e000      	b.n	80018d8 <HAL_RCC_OscConfig+0x2e0>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2202      	movs	r2, #2
 80018de:	4013      	ands	r3, r2
 80018e0:	d100      	bne.n	80018e4 <HAL_RCC_OscConfig+0x2ec>
 80018e2:	e074      	b.n	80019ce <HAL_RCC_OscConfig+0x3d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	2b08      	cmp	r3, #8
 80018e8:	d005      	beq.n	80018f6 <HAL_RCC_OscConfig+0x2fe>
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	2b18      	cmp	r3, #24
 80018ee:	d129      	bne.n	8001944 <HAL_RCC_OscConfig+0x34c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d126      	bne.n	8001944 <HAL_RCC_OscConfig+0x34c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001928 <HAL_RCC_OscConfig+0x330>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	2380      	movs	r3, #128	@ 0x80
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	4013      	ands	r3, r2
 8001900:	d005      	beq.n	800190e <HAL_RCC_OscConfig+0x316>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <HAL_RCC_OscConfig+0x316>
      {
        return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e291      	b.n	8001e32 <HAL_RCC_OscConfig+0x83a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800190e:	4b06      	ldr	r3, [pc, #24]	@ (8001928 <HAL_RCC_OscConfig+0x330>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	4a0b      	ldr	r2, [pc, #44]	@ (8001940 <HAL_RCC_OscConfig+0x348>)
 8001914:	4013      	ands	r3, r2
 8001916:	0019      	movs	r1, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	691b      	ldr	r3, [r3, #16]
 800191c:	061a      	lsls	r2, r3, #24
 800191e:	4b02      	ldr	r3, [pc, #8]	@ (8001928 <HAL_RCC_OscConfig+0x330>)
 8001920:	430a      	orrs	r2, r1
 8001922:	605a      	str	r2, [r3, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001924:	e053      	b.n	80019ce <HAL_RCC_OscConfig+0x3d6>
 8001926:	46c0      	nop			@ (mov r8, r8)
 8001928:	40021000 	.word	0x40021000
 800192c:	ffff00ff 	.word	0xffff00ff
 8001930:	08004024 	.word	0x08004024
 8001934:	20000000 	.word	0x20000000
 8001938:	20000004 	.word	0x20000004
 800193c:	fffaffff 	.word	0xfffaffff
 8001940:	80ffffff 	.word	0x80ffffff
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d026      	beq.n	800199a <HAL_RCC_OscConfig+0x3a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800194c:	4bc7      	ldr	r3, [pc, #796]	@ (8001c6c <HAL_RCC_OscConfig+0x674>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4bc6      	ldr	r3, [pc, #792]	@ (8001c6c <HAL_RCC_OscConfig+0x674>)
 8001952:	2180      	movs	r1, #128	@ 0x80
 8001954:	0049      	lsls	r1, r1, #1
 8001956:	430a      	orrs	r2, r1
 8001958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195a:	f7ff fa2b 	bl	8000db4 <HAL_GetTick>
 800195e:	0003      	movs	r3, r0
 8001960:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x37e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001964:	f7ff fa26 	bl	8000db4 <HAL_GetTick>
 8001968:	0002      	movs	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x37e>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e25d      	b.n	8001e32 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001976:	4bbd      	ldr	r3, [pc, #756]	@ (8001c6c <HAL_RCC_OscConfig+0x674>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	2380      	movs	r3, #128	@ 0x80
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	4013      	ands	r3, r2
 8001980:	d0f0      	beq.n	8001964 <HAL_RCC_OscConfig+0x36c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001982:	4bba      	ldr	r3, [pc, #744]	@ (8001c6c <HAL_RCC_OscConfig+0x674>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	4aba      	ldr	r2, [pc, #744]	@ (8001c70 <HAL_RCC_OscConfig+0x678>)
 8001988:	4013      	ands	r3, r2
 800198a:	0019      	movs	r1, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	061a      	lsls	r2, r3, #24
 8001992:	4bb6      	ldr	r3, [pc, #728]	@ (8001c6c <HAL_RCC_OscConfig+0x674>)
 8001994:	430a      	orrs	r2, r1
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	e019      	b.n	80019ce <HAL_RCC_OscConfig+0x3d6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800199a:	4bb4      	ldr	r3, [pc, #720]	@ (8001c6c <HAL_RCC_OscConfig+0x674>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	4bb3      	ldr	r3, [pc, #716]	@ (8001c6c <HAL_RCC_OscConfig+0x674>)
 80019a0:	49b4      	ldr	r1, [pc, #720]	@ (8001c74 <HAL_RCC_OscConfig+0x67c>)
 80019a2:	400a      	ands	r2, r1
 80019a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a6:	f7ff fa05 	bl	8000db4 <HAL_GetTick>
 80019aa:	0003      	movs	r3, r0
 80019ac:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x3ca>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80019b0:	f7ff fa00 	bl	8000db4 <HAL_GetTick>
 80019b4:	0002      	movs	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x3ca>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e237      	b.n	8001e32 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019c2:	4baa      	ldr	r3, [pc, #680]	@ (8001c6c <HAL_RCC_OscConfig+0x674>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	2380      	movs	r3, #128	@ 0x80
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	4013      	ands	r3, r2
 80019cc:	d1f0      	bne.n	80019b0 <HAL_RCC_OscConfig+0x3b8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2208      	movs	r2, #8
 80019d4:	4013      	ands	r3, r2
 80019d6:	d051      	beq.n	8001a7c <HAL_RCC_OscConfig+0x484>
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d031      	beq.n	8001a44 <HAL_RCC_OscConfig+0x44c>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d108      	bne.n	80019fa <HAL_RCC_OscConfig+0x402>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 80019e8:	4aa0      	ldr	r2, [pc, #640]	@ (8001c6c <HAL_RCC_OscConfig+0x674>)
 80019ea:	2394      	movs	r3, #148	@ 0x94
 80019ec:	58d3      	ldr	r3, [r2, r3]
 80019ee:	499f      	ldr	r1, [pc, #636]	@ (8001c6c <HAL_RCC_OscConfig+0x674>)
 80019f0:	2204      	movs	r2, #4
 80019f2:	4393      	bics	r3, r2
 80019f4:	2294      	movs	r2, #148	@ 0x94
 80019f6:	508b      	str	r3, [r1, r2]
 80019f8:	e007      	b.n	8001a0a <HAL_RCC_OscConfig+0x412>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 80019fa:	4a9c      	ldr	r2, [pc, #624]	@ (8001c6c <HAL_RCC_OscConfig+0x674>)
 80019fc:	2394      	movs	r3, #148	@ 0x94
 80019fe:	58d3      	ldr	r3, [r2, r3]
 8001a00:	499a      	ldr	r1, [pc, #616]	@ (8001c6c <HAL_RCC_OscConfig+0x674>)
 8001a02:	2204      	movs	r2, #4
 8001a04:	4313      	orrs	r3, r2
 8001a06:	2294      	movs	r2, #148	@ 0x94
 8001a08:	508b      	str	r3, [r1, r2]
      }
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a0a:	4a98      	ldr	r2, [pc, #608]	@ (8001c6c <HAL_RCC_OscConfig+0x674>)
 8001a0c:	2394      	movs	r3, #148	@ 0x94
 8001a0e:	58d3      	ldr	r3, [r2, r3]
 8001a10:	4996      	ldr	r1, [pc, #600]	@ (8001c6c <HAL_RCC_OscConfig+0x674>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	4313      	orrs	r3, r2
 8001a16:	2294      	movs	r2, #148	@ 0x94
 8001a18:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a1a:	f7ff f9cb 	bl	8000db4 <HAL_GetTick>
 8001a1e:	0003      	movs	r3, r0
 8001a20:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x43e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a24:	f7ff f9c6 	bl	8000db4 <HAL_GetTick>
 8001a28:	0002      	movs	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b11      	cmp	r3, #17
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x43e>
        {
          return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e1fd      	b.n	8001e32 <HAL_RCC_OscConfig+0x83a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a36:	4a8d      	ldr	r2, [pc, #564]	@ (8001c6c <HAL_RCC_OscConfig+0x674>)
 8001a38:	2394      	movs	r3, #148	@ 0x94
 8001a3a:	58d3      	ldr	r3, [r2, r3]
 8001a3c:	2202      	movs	r2, #2
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d0f0      	beq.n	8001a24 <HAL_RCC_OscConfig+0x42c>
 8001a42:	e01b      	b.n	8001a7c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a44:	4a89      	ldr	r2, [pc, #548]	@ (8001c6c <HAL_RCC_OscConfig+0x674>)
 8001a46:	2394      	movs	r3, #148	@ 0x94
 8001a48:	58d3      	ldr	r3, [r2, r3]
 8001a4a:	4988      	ldr	r1, [pc, #544]	@ (8001c6c <HAL_RCC_OscConfig+0x674>)
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	4393      	bics	r3, r2
 8001a50:	2294      	movs	r2, #148	@ 0x94
 8001a52:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a54:	f7ff f9ae 	bl	8000db4 <HAL_GetTick>
 8001a58:	0003      	movs	r3, r0
 8001a5a:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a5c:	e008      	b.n	8001a70 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a5e:	f7ff f9a9 	bl	8000db4 <HAL_GetTick>
 8001a62:	0002      	movs	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b11      	cmp	r3, #17
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e1e0      	b.n	8001e32 <HAL_RCC_OscConfig+0x83a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a70:	4a7e      	ldr	r2, [pc, #504]	@ (8001c6c <HAL_RCC_OscConfig+0x674>)
 8001a72:	2394      	movs	r3, #148	@ 0x94
 8001a74:	58d3      	ldr	r3, [r2, r3]
 8001a76:	2202      	movs	r2, #2
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d1f0      	bne.n	8001a5e <HAL_RCC_OscConfig+0x466>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2204      	movs	r2, #4
 8001a82:	4013      	ands	r3, r2
 8001a84:	d100      	bne.n	8001a88 <HAL_RCC_OscConfig+0x490>
 8001a86:	e10d      	b.n	8001ca4 <HAL_RCC_OscConfig+0x6ac>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a88:	201f      	movs	r0, #31
 8001a8a:	183b      	adds	r3, r7, r0
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 8001a90:	4b76      	ldr	r3, [pc, #472]	@ (8001c6c <HAL_RCC_OscConfig+0x674>)
 8001a92:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001a94:	2380      	movs	r3, #128	@ 0x80
 8001a96:	055b      	lsls	r3, r3, #21
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d110      	bne.n	8001abe <HAL_RCC_OscConfig+0x4c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a9c:	4b73      	ldr	r3, [pc, #460]	@ (8001c6c <HAL_RCC_OscConfig+0x674>)
 8001a9e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001aa0:	4b72      	ldr	r3, [pc, #456]	@ (8001c6c <HAL_RCC_OscConfig+0x674>)
 8001aa2:	2180      	movs	r1, #128	@ 0x80
 8001aa4:	0549      	lsls	r1, r1, #21
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	659a      	str	r2, [r3, #88]	@ 0x58
 8001aaa:	4b70      	ldr	r3, [pc, #448]	@ (8001c6c <HAL_RCC_OscConfig+0x674>)
 8001aac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001aae:	2380      	movs	r3, #128	@ 0x80
 8001ab0:	055b      	lsls	r3, r3, #21
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	60bb      	str	r3, [r7, #8]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ab8:	183b      	adds	r3, r7, r0
 8001aba:	2201      	movs	r2, #1
 8001abc:	701a      	strb	r2, [r3, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001abe:	4b6e      	ldr	r3, [pc, #440]	@ (8001c78 <HAL_RCC_OscConfig+0x680>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	2380      	movs	r3, #128	@ 0x80
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	d11a      	bne.n	8001b00 <HAL_RCC_OscConfig+0x508>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001aca:	4b6b      	ldr	r3, [pc, #428]	@ (8001c78 <HAL_RCC_OscConfig+0x680>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	4b6a      	ldr	r3, [pc, #424]	@ (8001c78 <HAL_RCC_OscConfig+0x680>)
 8001ad0:	2180      	movs	r1, #128	@ 0x80
 8001ad2:	0049      	lsls	r1, r1, #1
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ad8:	f7ff f96c 	bl	8000db4 <HAL_GetTick>
 8001adc:	0003      	movs	r3, r0
 8001ade:	613b      	str	r3, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ae2:	f7ff f967 	bl	8000db4 <HAL_GetTick>
 8001ae6:	0002      	movs	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e19e      	b.n	8001e32 <HAL_RCC_OscConfig+0x83a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001af4:	4b60      	ldr	r3, [pc, #384]	@ (8001c78 <HAL_RCC_OscConfig+0x680>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	2380      	movs	r3, #128	@ 0x80
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	4013      	ands	r3, r2
 8001afe:	d0f0      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2201      	movs	r2, #1
 8001b06:	4013      	ands	r3, r2
 8001b08:	d01e      	beq.n	8001b48 <HAL_RCC_OscConfig+0x550>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	2204      	movs	r2, #4
 8001b10:	4013      	ands	r3, r2
 8001b12:	d010      	beq.n	8001b36 <HAL_RCC_OscConfig+0x53e>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001b14:	4a55      	ldr	r2, [pc, #340]	@ (8001c6c <HAL_RCC_OscConfig+0x674>)
 8001b16:	2390      	movs	r3, #144	@ 0x90
 8001b18:	58d3      	ldr	r3, [r2, r3]
 8001b1a:	4954      	ldr	r1, [pc, #336]	@ (8001c6c <HAL_RCC_OscConfig+0x674>)
 8001b1c:	2204      	movs	r2, #4
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	2290      	movs	r2, #144	@ 0x90
 8001b22:	508b      	str	r3, [r1, r2]
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001b24:	4a51      	ldr	r2, [pc, #324]	@ (8001c6c <HAL_RCC_OscConfig+0x674>)
 8001b26:	2390      	movs	r3, #144	@ 0x90
 8001b28:	58d3      	ldr	r3, [r2, r3]
 8001b2a:	4950      	ldr	r1, [pc, #320]	@ (8001c6c <HAL_RCC_OscConfig+0x674>)
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	2290      	movs	r2, #144	@ 0x90
 8001b32:	508b      	str	r3, [r1, r2]
 8001b34:	e018      	b.n	8001b68 <HAL_RCC_OscConfig+0x570>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001b36:	4a4d      	ldr	r2, [pc, #308]	@ (8001c6c <HAL_RCC_OscConfig+0x674>)
 8001b38:	2390      	movs	r3, #144	@ 0x90
 8001b3a:	58d3      	ldr	r3, [r2, r3]
 8001b3c:	494b      	ldr	r1, [pc, #300]	@ (8001c6c <HAL_RCC_OscConfig+0x674>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	4313      	orrs	r3, r2
 8001b42:	2290      	movs	r2, #144	@ 0x90
 8001b44:	508b      	str	r3, [r1, r2]
 8001b46:	e00f      	b.n	8001b68 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001b48:	4a48      	ldr	r2, [pc, #288]	@ (8001c6c <HAL_RCC_OscConfig+0x674>)
 8001b4a:	2390      	movs	r3, #144	@ 0x90
 8001b4c:	58d3      	ldr	r3, [r2, r3]
 8001b4e:	4947      	ldr	r1, [pc, #284]	@ (8001c6c <HAL_RCC_OscConfig+0x674>)
 8001b50:	2201      	movs	r2, #1
 8001b52:	4393      	bics	r3, r2
 8001b54:	2290      	movs	r2, #144	@ 0x90
 8001b56:	508b      	str	r3, [r1, r2]
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001b58:	4a44      	ldr	r2, [pc, #272]	@ (8001c6c <HAL_RCC_OscConfig+0x674>)
 8001b5a:	2390      	movs	r3, #144	@ 0x90
 8001b5c:	58d3      	ldr	r3, [r2, r3]
 8001b5e:	4943      	ldr	r1, [pc, #268]	@ (8001c6c <HAL_RCC_OscConfig+0x674>)
 8001b60:	2204      	movs	r2, #4
 8001b62:	4393      	bics	r3, r2
 8001b64:	2290      	movs	r2, #144	@ 0x90
 8001b66:	508b      	str	r3, [r1, r2]
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d04f      	beq.n	8001c10 <HAL_RCC_OscConfig+0x618>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b70:	f7ff f920 	bl	8000db4 <HAL_GetTick>
 8001b74:	0003      	movs	r3, r0
 8001b76:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b78:	e009      	b.n	8001b8e <HAL_RCC_OscConfig+0x596>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b7a:	f7ff f91b 	bl	8000db4 <HAL_GetTick>
 8001b7e:	0002      	movs	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	4a3d      	ldr	r2, [pc, #244]	@ (8001c7c <HAL_RCC_OscConfig+0x684>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x596>
        {
          return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e151      	b.n	8001e32 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b8e:	4a37      	ldr	r2, [pc, #220]	@ (8001c6c <HAL_RCC_OscConfig+0x674>)
 8001b90:	2390      	movs	r3, #144	@ 0x90
 8001b92:	58d3      	ldr	r3, [r2, r3]
 8001b94:	2202      	movs	r2, #2
 8001b96:	4013      	ands	r3, r2
 8001b98:	d0ef      	beq.n	8001b7a <HAL_RCC_OscConfig+0x582>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	2280      	movs	r2, #128	@ 0x80
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d01a      	beq.n	8001bda <HAL_RCC_OscConfig+0x5e2>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001ba4:	4a31      	ldr	r2, [pc, #196]	@ (8001c6c <HAL_RCC_OscConfig+0x674>)
 8001ba6:	2390      	movs	r3, #144	@ 0x90
 8001ba8:	58d3      	ldr	r3, [r2, r3]
 8001baa:	4930      	ldr	r1, [pc, #192]	@ (8001c6c <HAL_RCC_OscConfig+0x674>)
 8001bac:	2280      	movs	r2, #128	@ 0x80
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	2290      	movs	r2, #144	@ 0x90
 8001bb2:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001bb4:	e009      	b.n	8001bca <HAL_RCC_OscConfig+0x5d2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bb6:	f7ff f8fd 	bl	8000db4 <HAL_GetTick>
 8001bba:	0002      	movs	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	4a2e      	ldr	r2, [pc, #184]	@ (8001c7c <HAL_RCC_OscConfig+0x684>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x5d2>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e133      	b.n	8001e32 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001bca:	4a28      	ldr	r2, [pc, #160]	@ (8001c6c <HAL_RCC_OscConfig+0x674>)
 8001bcc:	2390      	movs	r3, #144	@ 0x90
 8001bce:	58d2      	ldr	r2, [r2, r3]
 8001bd0:	2380      	movs	r3, #128	@ 0x80
 8001bd2:	011b      	lsls	r3, r3, #4
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d0ee      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x5be>
 8001bd8:	e059      	b.n	8001c8e <HAL_RCC_OscConfig+0x696>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001bda:	4a24      	ldr	r2, [pc, #144]	@ (8001c6c <HAL_RCC_OscConfig+0x674>)
 8001bdc:	2390      	movs	r3, #144	@ 0x90
 8001bde:	58d3      	ldr	r3, [r2, r3]
 8001be0:	4922      	ldr	r1, [pc, #136]	@ (8001c6c <HAL_RCC_OscConfig+0x674>)
 8001be2:	2280      	movs	r2, #128	@ 0x80
 8001be4:	4393      	bics	r3, r2
 8001be6:	2290      	movs	r2, #144	@ 0x90
 8001be8:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001bea:	e009      	b.n	8001c00 <HAL_RCC_OscConfig+0x608>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bec:	f7ff f8e2 	bl	8000db4 <HAL_GetTick>
 8001bf0:	0002      	movs	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	4a21      	ldr	r2, [pc, #132]	@ (8001c7c <HAL_RCC_OscConfig+0x684>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x608>
          {
            return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e118      	b.n	8001e32 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001c00:	4a1a      	ldr	r2, [pc, #104]	@ (8001c6c <HAL_RCC_OscConfig+0x674>)
 8001c02:	2390      	movs	r3, #144	@ 0x90
 8001c04:	58d2      	ldr	r2, [r2, r3]
 8001c06:	2380      	movs	r3, #128	@ 0x80
 8001c08:	011b      	lsls	r3, r3, #4
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	d1ee      	bne.n	8001bec <HAL_RCC_OscConfig+0x5f4>
 8001c0e:	e03e      	b.n	8001c8e <HAL_RCC_OscConfig+0x696>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c10:	f7ff f8d0 	bl	8000db4 <HAL_GetTick>
 8001c14:	0003      	movs	r3, r0
 8001c16:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c18:	e009      	b.n	8001c2e <HAL_RCC_OscConfig+0x636>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c1a:	f7ff f8cb 	bl	8000db4 <HAL_GetTick>
 8001c1e:	0002      	movs	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	4a15      	ldr	r2, [pc, #84]	@ (8001c7c <HAL_RCC_OscConfig+0x684>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x636>
        {
          return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e101      	b.n	8001e32 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c2e:	4a0f      	ldr	r2, [pc, #60]	@ (8001c6c <HAL_RCC_OscConfig+0x674>)
 8001c30:	2390      	movs	r3, #144	@ 0x90
 8001c32:	58d3      	ldr	r3, [r2, r3]
 8001c34:	2202      	movs	r2, #2
 8001c36:	4013      	ands	r3, r2
 8001c38:	d1ef      	bne.n	8001c1a <HAL_RCC_OscConfig+0x622>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001c3a:	4a0c      	ldr	r2, [pc, #48]	@ (8001c6c <HAL_RCC_OscConfig+0x674>)
 8001c3c:	2390      	movs	r3, #144	@ 0x90
 8001c3e:	58d3      	ldr	r3, [r2, r3]
 8001c40:	2280      	movs	r2, #128	@ 0x80
 8001c42:	4013      	ands	r3, r2
 8001c44:	d023      	beq.n	8001c8e <HAL_RCC_OscConfig+0x696>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001c46:	4a09      	ldr	r2, [pc, #36]	@ (8001c6c <HAL_RCC_OscConfig+0x674>)
 8001c48:	2390      	movs	r3, #144	@ 0x90
 8001c4a:	58d3      	ldr	r3, [r2, r3]
 8001c4c:	4907      	ldr	r1, [pc, #28]	@ (8001c6c <HAL_RCC_OscConfig+0x674>)
 8001c4e:	2280      	movs	r2, #128	@ 0x80
 8001c50:	4393      	bics	r3, r2
 8001c52:	2290      	movs	r2, #144	@ 0x90
 8001c54:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001c56:	e013      	b.n	8001c80 <HAL_RCC_OscConfig+0x688>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c58:	f7ff f8ac 	bl	8000db4 <HAL_GetTick>
 8001c5c:	0002      	movs	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	4a06      	ldr	r2, [pc, #24]	@ (8001c7c <HAL_RCC_OscConfig+0x684>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d90b      	bls.n	8001c80 <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e0e2      	b.n	8001e32 <HAL_RCC_OscConfig+0x83a>
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	80ffffff 	.word	0x80ffffff
 8001c74:	fffffeff 	.word	0xfffffeff
 8001c78:	40007000 	.word	0x40007000
 8001c7c:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001c80:	4a6e      	ldr	r2, [pc, #440]	@ (8001e3c <HAL_RCC_OscConfig+0x844>)
 8001c82:	2390      	movs	r3, #144	@ 0x90
 8001c84:	58d2      	ldr	r2, [r2, r3]
 8001c86:	2380      	movs	r3, #128	@ 0x80
 8001c88:	011b      	lsls	r3, r3, #4
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	d1e4      	bne.n	8001c58 <HAL_RCC_OscConfig+0x660>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c8e:	231f      	movs	r3, #31
 8001c90:	18fb      	adds	r3, r7, r3
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d105      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x6ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c98:	4b68      	ldr	r3, [pc, #416]	@ (8001e3c <HAL_RCC_OscConfig+0x844>)
 8001c9a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001c9c:	4b67      	ldr	r3, [pc, #412]	@ (8001e3c <HAL_RCC_OscConfig+0x844>)
 8001c9e:	4968      	ldr	r1, [pc, #416]	@ (8001e40 <HAL_RCC_OscConfig+0x848>)
 8001ca0:	400a      	ands	r2, r1
 8001ca2:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }
#if defined(RCC_CRRCR_HSI48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2220      	movs	r2, #32
 8001caa:	4013      	ands	r3, r2
 8001cac:	d03c      	beq.n	8001d28 <HAL_RCC_OscConfig+0x730>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d01c      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x6f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001cb6:	4a61      	ldr	r2, [pc, #388]	@ (8001e3c <HAL_RCC_OscConfig+0x844>)
 8001cb8:	2398      	movs	r3, #152	@ 0x98
 8001cba:	58d3      	ldr	r3, [r2, r3]
 8001cbc:	495f      	ldr	r1, [pc, #380]	@ (8001e3c <HAL_RCC_OscConfig+0x844>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	2298      	movs	r2, #152	@ 0x98
 8001cc4:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc6:	f7ff f875 	bl	8000db4 <HAL_GetTick>
 8001cca:	0003      	movs	r3, r0
 8001ccc:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x6ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cd0:	f7ff f870 	bl	8000db4 <HAL_GetTick>
 8001cd4:	0002      	movs	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e0a7      	b.n	8001e32 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ce2:	4a56      	ldr	r2, [pc, #344]	@ (8001e3c <HAL_RCC_OscConfig+0x844>)
 8001ce4:	2398      	movs	r3, #152	@ 0x98
 8001ce6:	58d3      	ldr	r3, [r2, r3]
 8001ce8:	2202      	movs	r2, #2
 8001cea:	4013      	ands	r3, r2
 8001cec:	d0f0      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x6d8>
 8001cee:	e01b      	b.n	8001d28 <HAL_RCC_OscConfig+0x730>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001cf0:	4a52      	ldr	r2, [pc, #328]	@ (8001e3c <HAL_RCC_OscConfig+0x844>)
 8001cf2:	2398      	movs	r3, #152	@ 0x98
 8001cf4:	58d3      	ldr	r3, [r2, r3]
 8001cf6:	4951      	ldr	r1, [pc, #324]	@ (8001e3c <HAL_RCC_OscConfig+0x844>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	4393      	bics	r3, r2
 8001cfc:	2298      	movs	r2, #152	@ 0x98
 8001cfe:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d00:	f7ff f858 	bl	8000db4 <HAL_GetTick>
 8001d04:	0003      	movs	r3, r0
 8001d06:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x724>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d0a:	f7ff f853 	bl	8000db4 <HAL_GetTick>
 8001d0e:	0002      	movs	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x724>
        {
          return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e08a      	b.n	8001e32 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 8001d1c:	4a47      	ldr	r2, [pc, #284]	@ (8001e3c <HAL_RCC_OscConfig+0x844>)
 8001d1e:	2398      	movs	r3, #152	@ 0x98
 8001d20:	58d3      	ldr	r3, [r2, r3]
 8001d22:	2202      	movs	r2, #2
 8001d24:	4013      	ands	r3, r2
 8001d26:	d1f0      	bne.n	8001d0a <HAL_RCC_OscConfig+0x712>
#endif /* RCC_CRRCR_HSI48ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d100      	bne.n	8001d32 <HAL_RCC_OscConfig+0x73a>
 8001d30:	e07e      	b.n	8001e30 <HAL_RCC_OscConfig+0x838>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d32:	4b42      	ldr	r3, [pc, #264]	@ (8001e3c <HAL_RCC_OscConfig+0x844>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	2238      	movs	r2, #56	@ 0x38
 8001d38:	4013      	ands	r3, r2
 8001d3a:	2b18      	cmp	r3, #24
 8001d3c:	d100      	bne.n	8001d40 <HAL_RCC_OscConfig+0x748>
 8001d3e:	e075      	b.n	8001e2c <HAL_RCC_OscConfig+0x834>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d156      	bne.n	8001df6 <HAL_RCC_OscConfig+0x7fe>
        assert_param(IS_RCC_PLL_DIVP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL_DIVQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL_DIVR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d48:	4b3c      	ldr	r3, [pc, #240]	@ (8001e3c <HAL_RCC_OscConfig+0x844>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	4b3b      	ldr	r3, [pc, #236]	@ (8001e3c <HAL_RCC_OscConfig+0x844>)
 8001d4e:	493d      	ldr	r1, [pc, #244]	@ (8001e44 <HAL_RCC_OscConfig+0x84c>)
 8001d50:	400a      	ands	r2, r1
 8001d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d54:	f7ff f82e 	bl	8000db4 <HAL_GetTick>
 8001d58:	0003      	movs	r3, r0
 8001d5a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d5e:	f7ff f829 	bl	8000db4 <HAL_GetTick>
 8001d62:	0002      	movs	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x778>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e060      	b.n	8001e32 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d70:	4b32      	ldr	r3, [pc, #200]	@ (8001e3c <HAL_RCC_OscConfig+0x844>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	2380      	movs	r3, #128	@ 0x80
 8001d76:	049b      	lsls	r3, r3, #18
 8001d78:	4013      	ands	r3, r2
 8001d7a:	d1f0      	bne.n	8001d5e <HAL_RCC_OscConfig+0x766>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d7c:	4b2f      	ldr	r3, [pc, #188]	@ (8001e3c <HAL_RCC_OscConfig+0x844>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	4a31      	ldr	r2, [pc, #196]	@ (8001e48 <HAL_RCC_OscConfig+0x850>)
 8001d82:	4013      	ands	r3, r2
 8001d84:	0019      	movs	r1, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d94:	021b      	lsls	r3, r3, #8
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9c:	431a      	orrs	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da2:	431a      	orrs	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001da8:	431a      	orrs	r2, r3
 8001daa:	4b24      	ldr	r3, [pc, #144]	@ (8001e3c <HAL_RCC_OscConfig+0x844>)
 8001dac:	430a      	orrs	r2, r1
 8001dae:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVR);
 8001db0:	4b22      	ldr	r3, [pc, #136]	@ (8001e3c <HAL_RCC_OscConfig+0x844>)
 8001db2:	68da      	ldr	r2, [r3, #12]
 8001db4:	4b21      	ldr	r3, [pc, #132]	@ (8001e3c <HAL_RCC_OscConfig+0x844>)
 8001db6:	2180      	movs	r1, #128	@ 0x80
 8001db8:	0549      	lsls	r1, r1, #21
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	60da      	str	r2, [r3, #12]

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dbe:	4b1f      	ldr	r3, [pc, #124]	@ (8001e3c <HAL_RCC_OscConfig+0x844>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e3c <HAL_RCC_OscConfig+0x844>)
 8001dc4:	2180      	movs	r1, #128	@ 0x80
 8001dc6:	0449      	lsls	r1, r1, #17
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dcc:	f7fe fff2 	bl	8000db4 <HAL_GetTick>
 8001dd0:	0003      	movs	r3, r0
 8001dd2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x7f0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd6:	f7fe ffed 	bl	8000db4 <HAL_GetTick>
 8001dda:	0002      	movs	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e024      	b.n	8001e32 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001de8:	4b14      	ldr	r3, [pc, #80]	@ (8001e3c <HAL_RCC_OscConfig+0x844>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	2380      	movs	r3, #128	@ 0x80
 8001dee:	049b      	lsls	r3, r3, #18
 8001df0:	4013      	ands	r3, r2
 8001df2:	d0f0      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x7de>
 8001df4:	e01c      	b.n	8001e30 <HAL_RCC_OscConfig+0x838>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df6:	4b11      	ldr	r3, [pc, #68]	@ (8001e3c <HAL_RCC_OscConfig+0x844>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	4b10      	ldr	r3, [pc, #64]	@ (8001e3c <HAL_RCC_OscConfig+0x844>)
 8001dfc:	4911      	ldr	r1, [pc, #68]	@ (8001e44 <HAL_RCC_OscConfig+0x84c>)
 8001dfe:	400a      	ands	r2, r1
 8001e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e02:	f7fe ffd7 	bl	8000db4 <HAL_GetTick>
 8001e06:	0003      	movs	r3, r0
 8001e08:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x826>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e0c:	f7fe ffd2 	bl	8000db4 <HAL_GetTick>
 8001e10:	0002      	movs	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x826>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e009      	b.n	8001e32 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e1e:	4b07      	ldr	r3, [pc, #28]	@ (8001e3c <HAL_RCC_OscConfig+0x844>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	2380      	movs	r3, #128	@ 0x80
 8001e24:	049b      	lsls	r3, r3, #18
 8001e26:	4013      	ands	r3, r2
 8001e28:	d1f0      	bne.n	8001e0c <HAL_RCC_OscConfig+0x814>
 8001e2a:	e001      	b.n	8001e30 <HAL_RCC_OscConfig+0x838>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e000      	b.n	8001e32 <HAL_RCC_OscConfig+0x83a>
    }
  }
  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	0018      	movs	r0, r3
 8001e34:	46bd      	mov	sp, r7
 8001e36:	b008      	add	sp, #32
 8001e38:	bdb0      	pop	{r4, r5, r7, pc}
 8001e3a:	46c0      	nop			@ (mov r8, r8)
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	efffffff 	.word	0xefffffff
 8001e44:	feffffff 	.word	0xfeffffff
 8001e48:	11c1808c 	.word	0x11c1808c

08001e4c <HAL_RCC_ClockConfig>:

HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *const RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e4c:	b5b0      	push	{r4, r5, r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e56:	4b6c      	ldr	r3, [pc, #432]	@ (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2207      	movs	r2, #7
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d911      	bls.n	8001e88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e64:	4b68      	ldr	r3, [pc, #416]	@ (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2207      	movs	r2, #7
 8001e6a:	4393      	bics	r3, r2
 8001e6c:	0019      	movs	r1, r3
 8001e6e:	4b66      	ldr	r3, [pc, #408]	@ (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	430a      	orrs	r2, r1
 8001e74:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e76:	4b64      	ldr	r3, [pc, #400]	@ (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2207      	movs	r2, #7
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d001      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e0bb      	b.n	8002000 <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d100      	bne.n	8001e94 <HAL_RCC_ClockConfig+0x48>
 8001e92:	e064      	b.n	8001f5e <HAL_RCC_ClockConfig+0x112>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b03      	cmp	r3, #3
 8001e9a:	d107      	bne.n	8001eac <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e9c:	4b5b      	ldr	r3, [pc, #364]	@ (800200c <HAL_RCC_ClockConfig+0x1c0>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	2380      	movs	r3, #128	@ 0x80
 8001ea2:	049b      	lsls	r3, r3, #18
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d138      	bne.n	8001f1a <HAL_RCC_ClockConfig+0xce>
      {
        return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e0a9      	b.n	8002000 <HAL_RCC_ClockConfig+0x1b4>
      }
    }
    else
    {
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d107      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0x78>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eb4:	4b55      	ldr	r3, [pc, #340]	@ (800200c <HAL_RCC_ClockConfig+0x1c0>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	2380      	movs	r3, #128	@ 0x80
 8001eba:	029b      	lsls	r3, r3, #10
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d12c      	bne.n	8001f1a <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e09d      	b.n	8002000 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d106      	bne.n	8001eda <HAL_RCC_ClockConfig+0x8e>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ecc:	4b4f      	ldr	r3, [pc, #316]	@ (800200c <HAL_RCC_ClockConfig+0x1c0>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d121      	bne.n	8001f1a <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e092      	b.n	8002000 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* HSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d107      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0xa6>
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ee2:	4b4a      	ldr	r3, [pc, #296]	@ (800200c <HAL_RCC_ClockConfig+0x1c0>)
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	2380      	movs	r3, #128	@ 0x80
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	4013      	ands	r3, r2
 8001eec:	d115      	bne.n	8001f1a <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e086      	b.n	8002000 <HAL_RCC_ClockConfig+0x1b4>
        }
      }

      /* LSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	d107      	bne.n	8001f0a <HAL_RCC_ClockConfig+0xbe>
      {
        /* Check the LSI ready flag */
        if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001efa:	4a44      	ldr	r2, [pc, #272]	@ (800200c <HAL_RCC_ClockConfig+0x1c0>)
 8001efc:	2394      	movs	r3, #148	@ 0x94
 8001efe:	58d3      	ldr	r3, [r2, r3]
 8001f00:	2202      	movs	r2, #2
 8001f02:	4013      	ands	r3, r2
 8001f04:	d109      	bne.n	8001f1a <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e07a      	b.n	8002000 <HAL_RCC_ClockConfig+0x1b4>

      /* LSE is selected as System Clock Source */
      else
      {
        /* Check the LSE ready flag */
        if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f0a:	4a40      	ldr	r2, [pc, #256]	@ (800200c <HAL_RCC_ClockConfig+0x1c0>)
 8001f0c:	2390      	movs	r3, #144	@ 0x90
 8001f0e:	58d3      	ldr	r3, [r2, r3]
 8001f10:	2202      	movs	r2, #2
 8001f12:	4013      	ands	r3, r2
 8001f14:	d101      	bne.n	8001f1a <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e072      	b.n	8002000 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f1a:	4b3c      	ldr	r3, [pc, #240]	@ (800200c <HAL_RCC_ClockConfig+0x1c0>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	2207      	movs	r2, #7
 8001f20:	4393      	bics	r3, r2
 8001f22:	0019      	movs	r1, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	4b38      	ldr	r3, [pc, #224]	@ (800200c <HAL_RCC_ClockConfig+0x1c0>)
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	609a      	str	r2, [r3, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f2e:	f7fe ff41 	bl	8000db4 <HAL_GetTick>
 8001f32:	0003      	movs	r3, r0
 8001f34:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f36:	e009      	b.n	8001f4c <HAL_RCC_ClockConfig+0x100>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f38:	f7fe ff3c 	bl	8000db4 <HAL_GetTick>
 8001f3c:	0002      	movs	r2, r0
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	4a33      	ldr	r2, [pc, #204]	@ (8002010 <HAL_RCC_ClockConfig+0x1c4>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_ClockConfig+0x100>
      {
        return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e059      	b.n	8002000 <HAL_RCC_ClockConfig+0x1b4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f4c:	4b2f      	ldr	r3, [pc, #188]	@ (800200c <HAL_RCC_ClockConfig+0x1c0>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	2238      	movs	r2, #56	@ 0x38
 8001f52:	401a      	ands	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d1ec      	bne.n	8001f38 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2202      	movs	r2, #2
 8001f64:	4013      	ands	r3, r2
 8001f66:	d009      	beq.n	8001f7c <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f68:	4b28      	ldr	r3, [pc, #160]	@ (800200c <HAL_RCC_ClockConfig+0x1c0>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	4a29      	ldr	r2, [pc, #164]	@ (8002014 <HAL_RCC_ClockConfig+0x1c8>)
 8001f6e:	4013      	ands	r3, r2
 8001f70:	0019      	movs	r1, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	4b25      	ldr	r3, [pc, #148]	@ (800200c <HAL_RCC_ClockConfig+0x1c0>)
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f7c:	4b22      	ldr	r3, [pc, #136]	@ (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2207      	movs	r2, #7
 8001f82:	4013      	ands	r3, r2
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d211      	bcs.n	8001fae <HAL_RCC_ClockConfig+0x162>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8a:	4b1f      	ldr	r3, [pc, #124]	@ (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2207      	movs	r2, #7
 8001f90:	4393      	bics	r3, r2
 8001f92:	0019      	movs	r1, r3
 8001f94:	4b1c      	ldr	r3, [pc, #112]	@ (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9c:	4b1a      	ldr	r3, [pc, #104]	@ (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2207      	movs	r2, #7
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d001      	beq.n	8001fae <HAL_RCC_ClockConfig+0x162>
    {
      return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e028      	b.n	8002000 <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*-------------------------- PCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2204      	movs	r2, #4
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d009      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x180>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001fb8:	4b14      	ldr	r3, [pc, #80]	@ (800200c <HAL_RCC_ClockConfig+0x1c0>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	4a16      	ldr	r2, [pc, #88]	@ (8002018 <HAL_RCC_ClockConfig+0x1cc>)
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	0019      	movs	r1, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68da      	ldr	r2, [r3, #12]
 8001fc6:	4b11      	ldr	r3, [pc, #68]	@ (800200c <HAL_RCC_ClockConfig+0x1c0>)
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8001fcc:	f000 f82a 	bl	8002024 <HAL_RCC_GetSysClockFreq>
 8001fd0:	0001      	movs	r1, r0
 8001fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800200c <HAL_RCC_ClockConfig+0x1c0>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fd6:	0a1b      	lsrs	r3, r3, #8
 8001fd8:	220f      	movs	r2, #15
 8001fda:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8001fdc:	4a0f      	ldr	r2, [pc, #60]	@ (800201c <HAL_RCC_ClockConfig+0x1d0>)
 8001fde:	5cd3      	ldrb	r3, [r2, r3]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fe0:	001a      	movs	r2, r3
 8001fe2:	231f      	movs	r3, #31
 8001fe4:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8001fe6:	000a      	movs	r2, r1
 8001fe8:	40da      	lsrs	r2, r3
 8001fea:	4b0d      	ldr	r3, [pc, #52]	@ (8002020 <HAL_RCC_ClockConfig+0x1d4>)
 8001fec:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(TICK_INT_PRIORITY);
 8001fee:	250b      	movs	r5, #11
 8001ff0:	197c      	adds	r4, r7, r5
 8001ff2:	2003      	movs	r0, #3
 8001ff4:	f7fe fe84 	bl	8000d00 <HAL_InitTick>
 8001ff8:	0003      	movs	r3, r0
 8001ffa:	7023      	strb	r3, [r4, #0]

  return halstatus;
 8001ffc:	197b      	adds	r3, r7, r5
 8001ffe:	781b      	ldrb	r3, [r3, #0]
}
 8002000:	0018      	movs	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	b004      	add	sp, #16
 8002006:	bdb0      	pop	{r4, r5, r7, pc}
 8002008:	40022000 	.word	0x40022000
 800200c:	40021000 	.word	0x40021000
 8002010:	00001388 	.word	0x00001388
 8002014:	fffff0ff 	.word	0xfffff0ff
 8002018:	ffff8fff 	.word	0xffff8fff
 800201c:	08004024 	.word	0x08004024
 8002020:	20000000 	.word	0x20000000

08002024 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b08a      	sub	sp, #40	@ 0x28
 8002028:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800202a:	2300      	movs	r3, #0
 800202c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 800202e:	2300      	movs	r3, #0
 8002030:	623b      	str	r3, [r7, #32]
  uint32_t pllm;
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  uint32_t pllsourcefreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002032:	4b46      	ldr	r3, [pc, #280]	@ (800214c <HAL_RCC_GetSysClockFreq+0x128>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	2238      	movs	r2, #56	@ 0x38
 8002038:	4013      	ands	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800203c:	4b43      	ldr	r3, [pc, #268]	@ (800214c <HAL_RCC_GetSysClockFreq+0x128>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	2203      	movs	r2, #3
 8002042:	4013      	ands	r3, r2
 8002044:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d005      	beq.n	8002058 <HAL_RCC_GetSysClockFreq+0x34>
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	2b18      	cmp	r3, #24
 8002050:	d125      	bne.n	800209e <HAL_RCC_GetSysClockFreq+0x7a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d122      	bne.n	800209e <HAL_RCC_GetSysClockFreq+0x7a>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002058:	4b3c      	ldr	r3, [pc, #240]	@ (800214c <HAL_RCC_GetSysClockFreq+0x128>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2208      	movs	r2, #8
 800205e:	4013      	ands	r3, r2
 8002060:	d107      	bne.n	8002072 <HAL_RCC_GetSysClockFreq+0x4e>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISTBYRG) >> RCC_CSR_MSISTBYRG_Pos;
 8002062:	4a3a      	ldr	r2, [pc, #232]	@ (800214c <HAL_RCC_GetSysClockFreq+0x128>)
 8002064:	2394      	movs	r3, #148	@ 0x94
 8002066:	58d3      	ldr	r3, [r2, r3]
 8002068:	0a1b      	lsrs	r3, r3, #8
 800206a:	220f      	movs	r2, #15
 800206c:	4013      	ands	r3, r2
 800206e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002070:	e005      	b.n	800207e <HAL_RCC_GetSysClockFreq+0x5a>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002072:	4b36      	ldr	r3, [pc, #216]	@ (800214c <HAL_RCC_GetSysClockFreq+0x128>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	091b      	lsrs	r3, r3, #4
 8002078:	220f      	movs	r2, #15
 800207a:	4013      	ands	r3, r2
 800207c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    if (msirange > 11U)
 800207e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002080:	2b0b      	cmp	r3, #11
 8002082:	d901      	bls.n	8002088 <HAL_RCC_GetSysClockFreq+0x64>
    {
      msirange = 0U;
 8002084:	2300      	movs	r3, #0
 8002086:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    msirange = MSIRangeTable[msirange];
 8002088:	4b31      	ldr	r3, [pc, #196]	@ (8002150 <HAL_RCC_GetSysClockFreq+0x12c>)
 800208a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800208c:	0092      	lsls	r2, r2, #2
 800208e:	58d3      	ldr	r3, [r2, r3]
 8002090:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d11b      	bne.n	80020d0 <HAL_RCC_GetSysClockFreq+0xac>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800209c:	e018      	b.n	80020d0 <HAL_RCC_GetSysClockFreq+0xac>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	2b08      	cmp	r3, #8
 80020a2:	d102      	bne.n	80020aa <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x130>)
 80020a6:	623b      	str	r3, [r7, #32]
 80020a8:	e012      	b.n	80020d0 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	2b10      	cmp	r3, #16
 80020ae:	d102      	bne.n	80020b6 <HAL_RCC_GetSysClockFreq+0x92>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020b0:	4b29      	ldr	r3, [pc, #164]	@ (8002158 <HAL_RCC_GetSysClockFreq+0x134>)
 80020b2:	623b      	str	r3, [r7, #32]
 80020b4:	e00c      	b.n	80020d0 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSI)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	2b20      	cmp	r3, #32
 80020ba:	d103      	bne.n	80020c4 <HAL_RCC_GetSysClockFreq+0xa0>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80020bc:	23fa      	movs	r3, #250	@ 0xfa
 80020be:	01db      	lsls	r3, r3, #7
 80020c0:	623b      	str	r3, [r7, #32]
 80020c2:	e005      	b.n	80020d0 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSE)
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	2b28      	cmp	r3, #40	@ 0x28
 80020c8:	d102      	bne.n	80020d0 <HAL_RCC_GetSysClockFreq+0xac>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80020ca:	2380      	movs	r3, #128	@ 0x80
 80020cc:	021b      	lsls	r3, r3, #8
 80020ce:	623b      	str	r3, [r7, #32]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	2b18      	cmp	r3, #24
 80020d4:	d135      	bne.n	8002142 <HAL_RCC_GetSysClockFreq+0x11e>
    /* PLL used as system clock  source */
    /* The allowed input (pllinput/M) frequency range is from 2.66 to 16 MHZ */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020d6:	4b1d      	ldr	r3, [pc, #116]	@ (800214c <HAL_RCC_GetSysClockFreq+0x128>)
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	2203      	movs	r2, #3
 80020dc:	4013      	ands	r3, r2
 80020de:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020e0:	4b1a      	ldr	r3, [pc, #104]	@ (800214c <HAL_RCC_GetSysClockFreq+0x128>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	091b      	lsrs	r3, r3, #4
 80020e6:	2207      	movs	r2, #7
 80020e8:	4013      	ands	r3, r2
 80020ea:	3301      	adds	r3, #1
 80020ec:	60fb      	str	r3, [r7, #12]

    switch (pllsource)
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d003      	beq.n	80020fc <HAL_RCC_GetSysClockFreq+0xd8>
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	2b03      	cmp	r3, #3
 80020f8:	d003      	beq.n	8002102 <HAL_RCC_GetSysClockFreq+0xde>
 80020fa:	e005      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0xe4>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllsourcefreq = HSI_VALUE;
 80020fc:	4b15      	ldr	r3, [pc, #84]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x130>)
 80020fe:	61fb      	str	r3, [r7, #28]
        break;
 8002100:	e005      	b.n	800210e <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllsourcefreq = HSE_VALUE;
 8002102:	4b15      	ldr	r3, [pc, #84]	@ (8002158 <HAL_RCC_GetSysClockFreq+0x134>)
 8002104:	61fb      	str	r3, [r7, #28]
        break;
 8002106:	e002      	b.n	800210e <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllsourcefreq = msirange;
 8002108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210a:	61fb      	str	r3, [r7, #28]
        break;
 800210c:	46c0      	nop			@ (mov r8, r8)
    }
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 800210e:	4b0f      	ldr	r3, [pc, #60]	@ (800214c <HAL_RCC_GetSysClockFreq+0x128>)
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	0a1b      	lsrs	r3, r3, #8
 8002114:	227f      	movs	r2, #127	@ 0x7f
 8002116:	4013      	ands	r3, r2
 8002118:	69fa      	ldr	r2, [r7, #28]
 800211a:	4353      	muls	r3, r2
 800211c:	68f9      	ldr	r1, [r7, #12]
 800211e:	0018      	movs	r0, r3
 8002120:	f7fd fff2 	bl	8000108 <__udivsi3>
 8002124:	0003      	movs	r3, r0
 8002126:	60bb      	str	r3, [r7, #8]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002128:	4b08      	ldr	r3, [pc, #32]	@ (800214c <HAL_RCC_GetSysClockFreq+0x128>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	0f5b      	lsrs	r3, r3, #29
 800212e:	2207      	movs	r2, #7
 8002130:	4013      	ands	r3, r2
 8002132:	3301      	adds	r3, #1
 8002134:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	68b8      	ldr	r0, [r7, #8]
 800213a:	f7fd ffe5 	bl	8000108 <__udivsi3>
 800213e:	0003      	movs	r3, r0
 8002140:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8002142:	6a3b      	ldr	r3, [r7, #32]
}
 8002144:	0018      	movs	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	b00a      	add	sp, #40	@ 0x28
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40021000 	.word	0x40021000
 8002150:	0800403c 	.word	0x0800403c
 8002154:	00f42400 	.word	0x00f42400
 8002158:	007a1200 	.word	0x007a1200

0800215c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002160:	4b02      	ldr	r3, [pc, #8]	@ (800216c <HAL_RCC_GetHCLKFreq+0x10>)
 8002162:	681b      	ldr	r3, [r3, #0]
}
 8002164:	0018      	movs	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	46c0      	nop			@ (mov r8, r8)
 800216c:	20000000 	.word	0x20000000

08002170 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos] & 0x1FU));
 8002174:	f7ff fff2 	bl	800215c <HAL_RCC_GetHCLKFreq>
 8002178:	0001      	movs	r1, r0
 800217a:	4b07      	ldr	r3, [pc, #28]	@ (8002198 <HAL_RCC_GetPCLK1Freq+0x28>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	0b1b      	lsrs	r3, r3, #12
 8002180:	2207      	movs	r2, #7
 8002182:	4013      	ands	r3, r2
 8002184:	4a05      	ldr	r2, [pc, #20]	@ (800219c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8002186:	5cd3      	ldrb	r3, [r2, r3]
 8002188:	001a      	movs	r2, r3
 800218a:	231f      	movs	r3, #31
 800218c:	4013      	ands	r3, r2
 800218e:	40d9      	lsrs	r1, r3
 8002190:	000b      	movs	r3, r1
}
 8002192:	0018      	movs	r0, r3
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40021000 	.word	0x40021000
 800219c:	08004034 	.word	0x08004034

080021a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSISRANGE_0 to RCC_MSISRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021a8:	2300      	movs	r3, #0
 80021aa:	613b      	str	r3, [r7, #16]

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021ac:	4b2f      	ldr	r3, [pc, #188]	@ (800226c <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80021ae:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80021b0:	2380      	movs	r3, #128	@ 0x80
 80021b2:	055b      	lsls	r3, r3, #21
 80021b4:	4013      	ands	r3, r2
 80021b6:	d004      	beq.n	80021c2 <RCC_SetFlashLatencyFromMSIRange+0x22>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80021b8:	f7ff fa12 	bl	80015e0 <HAL_PWREx_GetVoltageRange>
 80021bc:	0003      	movs	r3, r0
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	e017      	b.n	80021f2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021c2:	4b2a      	ldr	r3, [pc, #168]	@ (800226c <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80021c4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80021c6:	4b29      	ldr	r3, [pc, #164]	@ (800226c <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80021c8:	2180      	movs	r1, #128	@ 0x80
 80021ca:	0549      	lsls	r1, r1, #21
 80021cc:	430a      	orrs	r2, r1
 80021ce:	659a      	str	r2, [r3, #88]	@ 0x58
 80021d0:	4b26      	ldr	r3, [pc, #152]	@ (800226c <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80021d2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80021d4:	2380      	movs	r3, #128	@ 0x80
 80021d6:	055b      	lsls	r3, r3, #21
 80021d8:	4013      	ands	r3, r2
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80021de:	f7ff f9ff 	bl	80015e0 <HAL_PWREx_GetVoltageRange>
 80021e2:	0003      	movs	r3, r0
 80021e4:	617b      	str	r3, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80021e6:	4b21      	ldr	r3, [pc, #132]	@ (800226c <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80021e8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80021ea:	4b20      	ldr	r3, [pc, #128]	@ (800226c <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80021ec:	4920      	ldr	r1, [pc, #128]	@ (8002270 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
 80021ee:	400a      	ands	r2, r1
 80021f0:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  if (vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	2380      	movs	r3, #128	@ 0x80
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d111      	bne.n	8002220 <RCC_SetFlashLatencyFromMSIRange+0x80>
  {
    if (msirange > RCC_MSIRANGE_8)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b80      	cmp	r3, #128	@ 0x80
 8002200:	d91c      	bls.n	800223c <RCC_SetFlashLatencyFromMSIRange+0x9c>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_11)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2bb0      	cmp	r3, #176	@ 0xb0
 8002206:	d902      	bls.n	800220e <RCC_SetFlashLatencyFromMSIRange+0x6e>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002208:	2302      	movs	r3, #2
 800220a:	613b      	str	r3, [r7, #16]
 800220c:	e016      	b.n	800223c <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else if (msirange > RCC_MSIRANGE_9)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b90      	cmp	r3, #144	@ 0x90
 8002212:	d902      	bls.n	800221a <RCC_SetFlashLatencyFromMSIRange+0x7a>
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002214:	2301      	movs	r3, #1
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	e010      	b.n	800223c <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_0; /* 0WS */
 800221a:	2300      	movs	r3, #0
 800221c:	613b      	str	r3, [r7, #16]
 800221e:	e00d      	b.n	800223c <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange >= RCC_MSIRANGE_8)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b7f      	cmp	r3, #127	@ 0x7f
 8002224:	d902      	bls.n	800222c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_2; /* 3WS */
 8002226:	2302      	movs	r3, #2
 8002228:	613b      	str	r3, [r7, #16]
 800222a:	e007      	b.n	800223c <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else if (msirange == RCC_MSIRANGE_7)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b70      	cmp	r3, #112	@ 0x70
 8002230:	d102      	bne.n	8002238 <RCC_SetFlashLatencyFromMSIRange+0x98>
    {
      /* MSI 8Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8002232:	2301      	movs	r3, #1
 8002234:	613b      	str	r3, [r7, #16]
 8002236:	e001      	b.n	800223c <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else
    {
      /* MSI 16Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8002238:	2300      	movs	r3, #0
 800223a:	613b      	str	r3, [r7, #16]
    }
    /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800223c:	4b0d      	ldr	r3, [pc, #52]	@ (8002274 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2207      	movs	r2, #7
 8002242:	4393      	bics	r3, r2
 8002244:	0019      	movs	r1, r3
 8002246:	4b0b      	ldr	r3, [pc, #44]	@ (8002274 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	430a      	orrs	r2, r1
 800224c:	601a      	str	r2, [r3, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800224e:	4b09      	ldr	r3, [pc, #36]	@ (8002274 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2207      	movs	r2, #7
 8002254:	4013      	ands	r3, r2
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	429a      	cmp	r2, r3
 800225a:	d001      	beq.n	8002260 <RCC_SetFlashLatencyFromMSIRange+0xc0>
  {
    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e000      	b.n	8002262 <RCC_SetFlashLatencyFromMSIRange+0xc2>
  }

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	0018      	movs	r0, r3
 8002264:	46bd      	mov	sp, r7
 8002266:	b006      	add	sp, #24
 8002268:	bd80      	pop	{r7, pc}
 800226a:	46c0      	nop			@ (mov r8, r8)
 800226c:	40021000 	.word	0x40021000
 8002270:	efffffff 	.word	0xefffffff
 8002274:	40022000 	.word	0x40022000

08002278 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002280:	2313      	movs	r3, #19
 8002282:	18fb      	adds	r3, r7, r3
 8002284:	2200      	movs	r2, #0
 8002286:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002288:	2312      	movs	r3, #18
 800228a:	18fb      	adds	r3, r7, r3
 800228c:	2200      	movs	r2, #0
 800228e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	2380      	movs	r3, #128	@ 0x80
 8002296:	021b      	lsls	r3, r3, #8
 8002298:	4013      	ands	r3, r2
 800229a:	d100      	bne.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800229c:	e0b7      	b.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    FlagStatus       pwrclkchanged = RESET;
 800229e:	2011      	movs	r0, #17
 80022a0:	183b      	adds	r3, r7, r0
 80022a2:	2200      	movs	r2, #0
 80022a4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022a6:	4b4c      	ldr	r3, [pc, #304]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022a8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80022aa:	2380      	movs	r3, #128	@ 0x80
 80022ac:	055b      	lsls	r3, r3, #21
 80022ae:	4013      	ands	r3, r2
 80022b0:	d110      	bne.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022b2:	4b49      	ldr	r3, [pc, #292]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022b4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80022b6:	4b48      	ldr	r3, [pc, #288]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022b8:	2180      	movs	r1, #128	@ 0x80
 80022ba:	0549      	lsls	r1, r1, #21
 80022bc:	430a      	orrs	r2, r1
 80022be:	659a      	str	r2, [r3, #88]	@ 0x58
 80022c0:	4b45      	ldr	r3, [pc, #276]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022c2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80022c4:	2380      	movs	r3, #128	@ 0x80
 80022c6:	055b      	lsls	r3, r3, #21
 80022c8:	4013      	ands	r3, r2
 80022ca:	60bb      	str	r3, [r7, #8]
 80022cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ce:	183b      	adds	r3, r7, r0
 80022d0:	2201      	movs	r2, #1
 80022d2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022d4:	4b41      	ldr	r3, [pc, #260]	@ (80023dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	4b40      	ldr	r3, [pc, #256]	@ (80023dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022da:	2180      	movs	r1, #128	@ 0x80
 80022dc:	0049      	lsls	r1, r1, #1
 80022de:	430a      	orrs	r2, r1
 80022e0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022e2:	f7fe fd67 	bl	8000db4 <HAL_GetTick>
 80022e6:	0003      	movs	r3, r0
 80022e8:	60fb      	str	r3, [r7, #12]

    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022ea:	e00b      	b.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ec:	f7fe fd62 	bl	8000db4 <HAL_GetTick>
 80022f0:	0002      	movs	r2, r0
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d904      	bls.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80022fa:	2313      	movs	r3, #19
 80022fc:	18fb      	adds	r3, r7, r3
 80022fe:	2203      	movs	r2, #3
 8002300:	701a      	strb	r2, [r3, #0]
        break;
 8002302:	e005      	b.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002304:	4b35      	ldr	r3, [pc, #212]	@ (80023dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	2380      	movs	r3, #128	@ 0x80
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	4013      	ands	r3, r2
 800230e:	d0ed      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002310:	2313      	movs	r3, #19
 8002312:	18fb      	adds	r3, r7, r3
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d168      	bne.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800231a:	4a2f      	ldr	r2, [pc, #188]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800231c:	2390      	movs	r3, #144	@ 0x90
 800231e:	58d2      	ldr	r2, [r2, r3]
 8002320:	23c0      	movs	r3, #192	@ 0xc0
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4013      	ands	r3, r2
 8002326:	617b      	str	r3, [r7, #20]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d01f      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0xf6>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	429a      	cmp	r2, r3
 8002336:	d01a      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0xf6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002338:	4a27      	ldr	r2, [pc, #156]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800233a:	2390      	movs	r3, #144	@ 0x90
 800233c:	58d3      	ldr	r3, [r2, r3]
 800233e:	4a28      	ldr	r2, [pc, #160]	@ (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002340:	4013      	ands	r3, r2
 8002342:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002344:	4a24      	ldr	r2, [pc, #144]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002346:	2390      	movs	r3, #144	@ 0x90
 8002348:	58d3      	ldr	r3, [r2, r3]
 800234a:	4923      	ldr	r1, [pc, #140]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800234c:	2280      	movs	r2, #128	@ 0x80
 800234e:	0252      	lsls	r2, r2, #9
 8002350:	4313      	orrs	r3, r2
 8002352:	2290      	movs	r2, #144	@ 0x90
 8002354:	508b      	str	r3, [r1, r2]
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002356:	4a20      	ldr	r2, [pc, #128]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002358:	2390      	movs	r3, #144	@ 0x90
 800235a:	58d3      	ldr	r3, [r2, r3]
 800235c:	491e      	ldr	r1, [pc, #120]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800235e:	4a21      	ldr	r2, [pc, #132]	@ (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 8002360:	4013      	ands	r3, r2
 8002362:	2290      	movs	r2, #144	@ 0x90
 8002364:	508b      	str	r3, [r1, r2]
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002366:	491c      	ldr	r1, [pc, #112]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002368:	2290      	movs	r2, #144	@ 0x90
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	508b      	str	r3, [r1, r2]
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	2201      	movs	r2, #1
 8002372:	4013      	ands	r3, r2
 8002374:	d017      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x12e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002376:	f7fe fd1d 	bl	8000db4 <HAL_GetTick>
 800237a:	0003      	movs	r3, r0
 800237c:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800237e:	e00c      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002380:	f7fe fd18 	bl	8000db4 <HAL_GetTick>
 8002384:	0002      	movs	r2, r0
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	4a17      	ldr	r2, [pc, #92]	@ (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d904      	bls.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x122>
          {
            ret = HAL_TIMEOUT;
 8002390:	2313      	movs	r3, #19
 8002392:	18fb      	adds	r3, r7, r3
 8002394:	2203      	movs	r2, #3
 8002396:	701a      	strb	r2, [r3, #0]
            break;
 8002398:	e005      	b.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x12e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800239a:	4a0f      	ldr	r2, [pc, #60]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800239c:	2390      	movs	r3, #144	@ 0x90
 800239e:	58d3      	ldr	r3, [r2, r3]
 80023a0:	2202      	movs	r2, #2
 80023a2:	4013      	ands	r3, r2
 80023a4:	d0ec      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x108>
          }
        }
      }

      if (ret == HAL_OK)
 80023a6:	2313      	movs	r3, #19
 80023a8:	18fb      	adds	r3, r7, r3
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d10b      	bne.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023b0:	4a09      	ldr	r2, [pc, #36]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023b2:	2390      	movs	r3, #144	@ 0x90
 80023b4:	58d3      	ldr	r3, [r2, r3]
 80023b6:	4a0a      	ldr	r2, [pc, #40]	@ (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80023b8:	401a      	ands	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023be:	4906      	ldr	r1, [pc, #24]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	2290      	movs	r2, #144	@ 0x90
 80023c4:	508b      	str	r3, [r1, r2]
 80023c6:	e017      	b.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023c8:	2312      	movs	r3, #18
 80023ca:	18fb      	adds	r3, r7, r3
 80023cc:	2213      	movs	r2, #19
 80023ce:	18ba      	adds	r2, r7, r2
 80023d0:	7812      	ldrb	r2, [r2, #0]
 80023d2:	701a      	strb	r2, [r3, #0]
 80023d4:	e010      	b.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80023d6:	46c0      	nop			@ (mov r8, r8)
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40007000 	.word	0x40007000
 80023e0:	fffffcff 	.word	0xfffffcff
 80023e4:	fffeffff 	.word	0xfffeffff
 80023e8:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023ec:	2312      	movs	r3, #18
 80023ee:	18fb      	adds	r3, r7, r3
 80023f0:	2213      	movs	r2, #19
 80023f2:	18ba      	adds	r2, r7, r2
 80023f4:	7812      	ldrb	r2, [r2, #0]
 80023f6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023f8:	2311      	movs	r3, #17
 80023fa:	18fb      	adds	r3, r7, r3
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d105      	bne.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002402:	4ba4      	ldr	r3, [pc, #656]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8002404:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002406:	4ba3      	ldr	r3, [pc, #652]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8002408:	49a3      	ldr	r1, [pc, #652]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 800240a:	400a      	ands	r2, r1
 800240c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2201      	movs	r2, #1
 8002414:	4013      	ands	r3, r2
 8002416:	d00b      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002418:	4a9e      	ldr	r2, [pc, #632]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800241a:	2388      	movs	r3, #136	@ 0x88
 800241c:	58d3      	ldr	r3, [r2, r3]
 800241e:	2203      	movs	r2, #3
 8002420:	4393      	bics	r3, r2
 8002422:	001a      	movs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	499a      	ldr	r1, [pc, #616]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800242a:	4313      	orrs	r3, r2
 800242c:	2288      	movs	r2, #136	@ 0x88
 800242e:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2202      	movs	r2, #2
 8002436:	4013      	ands	r3, r2
 8002438:	d00b      	beq.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800243a:	4a96      	ldr	r2, [pc, #600]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800243c:	2388      	movs	r3, #136	@ 0x88
 800243e:	58d3      	ldr	r3, [r2, r3]
 8002440:	220c      	movs	r2, #12
 8002442:	4393      	bics	r3, r2
 8002444:	001a      	movs	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	4992      	ldr	r1, [pc, #584]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800244c:	4313      	orrs	r3, r2
 800244e:	2288      	movs	r2, #136	@ 0x88
 8002450:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2210      	movs	r2, #16
 8002458:	4013      	ands	r3, r2
 800245a:	d00a      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800245c:	4a8d      	ldr	r2, [pc, #564]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800245e:	2388      	movs	r3, #136	@ 0x88
 8002460:	58d3      	ldr	r3, [r2, r3]
 8002462:	4a8e      	ldr	r2, [pc, #568]	@ (800269c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002464:	401a      	ands	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	498a      	ldr	r1, [pc, #552]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800246c:	4313      	orrs	r3, r2
 800246e:	2288      	movs	r2, #136	@ 0x88
 8002470:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2208      	movs	r2, #8
 8002478:	4013      	ands	r3, r2
 800247a:	d00a      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART2 clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800247c:	4a85      	ldr	r2, [pc, #532]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800247e:	2388      	movs	r3, #136	@ 0x88
 8002480:	58d3      	ldr	r3, [r2, r3]
 8002482:	4a87      	ldr	r2, [pc, #540]	@ (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002484:	401a      	ands	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	4982      	ldr	r1, [pc, #520]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800248c:	4313      	orrs	r3, r2
 800248e:	2288      	movs	r2, #136	@ 0x88
 8002490:	508b      	str	r3, [r1, r2]
  }
#if defined (LPUART3)
  /*-------------------------- LPUART3 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART3) == RCC_PERIPHCLK_LPUART3)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2204      	movs	r2, #4
 8002498:	4013      	ands	r3, r2
 800249a:	d00b      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART3CLKSOURCE(PeriphClkInit->Lpuart3ClockSelection));

    /* Configure the LPUART3 clock source */
    __HAL_RCC_LPUART3_CONFIG(PeriphClkInit->Lpuart3ClockSelection);
 800249c:	4a7d      	ldr	r2, [pc, #500]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800249e:	2388      	movs	r3, #136	@ 0x88
 80024a0:	58d3      	ldr	r3, [r2, r3]
 80024a2:	22c0      	movs	r2, #192	@ 0xc0
 80024a4:	4393      	bics	r3, r2
 80024a6:	001a      	movs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	4979      	ldr	r1, [pc, #484]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	2288      	movs	r2, #136	@ 0x88
 80024b2:	508b      	str	r3, [r1, r2]
  }
#endif /* LPUART3 */
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2220      	movs	r2, #32
 80024ba:	4013      	ands	r3, r2
 80024bc:	d00a      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x25c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024be:	4a75      	ldr	r2, [pc, #468]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80024c0:	2388      	movs	r3, #136	@ 0x88
 80024c2:	58d3      	ldr	r3, [r2, r3]
 80024c4:	4a77      	ldr	r2, [pc, #476]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80024c6:	401a      	ands	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	4971      	ldr	r1, [pc, #452]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	2288      	movs	r2, #136	@ 0x88
 80024d2:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2240      	movs	r2, #64	@ 0x40
 80024da:	4013      	ands	r3, r2
 80024dc:	d00a      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024de:	4a6d      	ldr	r2, [pc, #436]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80024e0:	2388      	movs	r3, #136	@ 0x88
 80024e2:	58d3      	ldr	r3, [r2, r3]
 80024e4:	4a70      	ldr	r2, [pc, #448]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 80024e6:	401a      	ands	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	69db      	ldr	r3, [r3, #28]
 80024ec:	4969      	ldr	r1, [pc, #420]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	2288      	movs	r2, #136	@ 0x88
 80024f2:	508b      	str	r3, [r1, r2]
  }

  /*----------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2280      	movs	r2, #128	@ 0x80
 80024fa:	4013      	ands	r3, r2
 80024fc:	d00a      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024fe:	4a65      	ldr	r2, [pc, #404]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8002500:	2388      	movs	r3, #136	@ 0x88
 8002502:	58d3      	ldr	r3, [r2, r3]
 8002504:	4a69      	ldr	r2, [pc, #420]	@ (80026ac <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002506:	401a      	ands	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	4961      	ldr	r1, [pc, #388]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800250e:	4313      	orrs	r3, r2
 8002510:	2288      	movs	r2, #136	@ 0x88
 8002512:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	2380      	movs	r3, #128	@ 0x80
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	4013      	ands	r3, r2
 800251e:	d00a      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002520:	4a5c      	ldr	r2, [pc, #368]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8002522:	2388      	movs	r3, #136	@ 0x88
 8002524:	58d3      	ldr	r3, [r2, r3]
 8002526:	4a62      	ldr	r2, [pc, #392]	@ (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002528:	401a      	ands	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252e:	4959      	ldr	r1, [pc, #356]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8002530:	4313      	orrs	r3, r2
 8002532:	2288      	movs	r2, #136	@ 0x88
 8002534:	508b      	str	r3, [r1, r2]
  }
#if defined (LPTIM3)
  /*----------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	2380      	movs	r3, #128	@ 0x80
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4013      	ands	r3, r2
 8002540:	d00a      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002542:	4a54      	ldr	r2, [pc, #336]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8002544:	2388      	movs	r3, #136	@ 0x88
 8002546:	58d3      	ldr	r3, [r2, r3]
 8002548:	4a5a      	ldr	r2, [pc, #360]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 800254a:	401a      	ands	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002550:	4950      	ldr	r1, [pc, #320]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8002552:	4313      	orrs	r3, r2
 8002554:	2288      	movs	r2, #136	@ 0x88
 8002556:	508b      	str	r3, [r1, r2]
  }
#endif /* LPTIM3 */
  /*-------------------------- ADC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	2380      	movs	r3, #128	@ 0x80
 800255e:	01db      	lsls	r3, r3, #7
 8002560:	4013      	ands	r3, r2
 8002562:	d017      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLP)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002568:	2380      	movs	r3, #128	@ 0x80
 800256a:	055b      	lsls	r3, r3, #21
 800256c:	429a      	cmp	r2, r3
 800256e:	d106      	bne.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x306>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVP);
 8002570:	4b48      	ldr	r3, [pc, #288]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8002572:	68da      	ldr	r2, [r3, #12]
 8002574:	4b47      	ldr	r3, [pc, #284]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8002576:	2180      	movs	r1, #128	@ 0x80
 8002578:	0249      	lsls	r1, r1, #9
 800257a:	430a      	orrs	r2, r1
 800257c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800257e:	4a45      	ldr	r2, [pc, #276]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8002580:	2388      	movs	r3, #136	@ 0x88
 8002582:	58d3      	ldr	r3, [r2, r3]
 8002584:	4a4c      	ldr	r2, [pc, #304]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x440>)
 8002586:	401a      	ands	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800258c:	4941      	ldr	r1, [pc, #260]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800258e:	4313      	orrs	r3, r2
 8002590:	2288      	movs	r2, #136	@ 0x88
 8002592:	508b      	str	r3, [r1, r2]
  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	2380      	movs	r3, #128	@ 0x80
 800259a:	015b      	lsls	r3, r3, #5
 800259c:	4013      	ands	r3, r2
 800259e:	d017      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLQ)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025a4:	2380      	movs	r3, #128	@ 0x80
 80025a6:	051b      	lsls	r3, r3, #20
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d106      	bne.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 80025ac:	4b39      	ldr	r3, [pc, #228]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80025ae:	68da      	ldr	r2, [r3, #12]
 80025b0:	4b38      	ldr	r3, [pc, #224]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80025b2:	2180      	movs	r1, #128	@ 0x80
 80025b4:	0449      	lsls	r1, r1, #17
 80025b6:	430a      	orrs	r2, r1
 80025b8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025ba:	4a36      	ldr	r2, [pc, #216]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80025bc:	2388      	movs	r3, #136	@ 0x88
 80025be:	58d3      	ldr	r3, [r2, r3]
 80025c0:	4a3e      	ldr	r2, [pc, #248]	@ (80026bc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80025c2:	401a      	ands	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025c8:	4932      	ldr	r1, [pc, #200]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	2288      	movs	r2, #136	@ 0x88
 80025ce:	508b      	str	r3, [r1, r2]

  }
#endif /* USB_DRD_FS */
  /*-------------------------- RNG clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	2380      	movs	r3, #128	@ 0x80
 80025d6:	019b      	lsls	r3, r3, #6
 80025d8:	4013      	ands	r3, r2
 80025da:	d017      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLQ)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025e0:	2380      	movs	r3, #128	@ 0x80
 80025e2:	051b      	lsls	r3, r3, #20
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d106      	bne.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 80025e8:	4b2a      	ldr	r3, [pc, #168]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80025ea:	68da      	ldr	r2, [r3, #12]
 80025ec:	4b29      	ldr	r3, [pc, #164]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80025ee:	2180      	movs	r1, #128	@ 0x80
 80025f0:	0449      	lsls	r1, r1, #17
 80025f2:	430a      	orrs	r2, r1
 80025f4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025f6:	4a27      	ldr	r2, [pc, #156]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80025f8:	2388      	movs	r3, #136	@ 0x88
 80025fa:	58d3      	ldr	r3, [r2, r3]
 80025fc:	4a2f      	ldr	r2, [pc, #188]	@ (80026bc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80025fe:	401a      	ands	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002604:	4923      	ldr	r1, [pc, #140]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8002606:	4313      	orrs	r3, r2
 8002608:	2288      	movs	r2, #136	@ 0x88
 800260a:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	2380      	movs	r3, #128	@ 0x80
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	4013      	ands	r3, r2
 8002616:	d017      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLLQ)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800261c:	2380      	movs	r3, #128	@ 0x80
 800261e:	045b      	lsls	r3, r3, #17
 8002620:	429a      	cmp	r2, r3
 8002622:	d106      	bne.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8002624:	4b1b      	ldr	r3, [pc, #108]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8002626:	68da      	ldr	r2, [r3, #12]
 8002628:	4b1a      	ldr	r3, [pc, #104]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800262a:	2180      	movs	r1, #128	@ 0x80
 800262c:	0449      	lsls	r1, r1, #17
 800262e:	430a      	orrs	r2, r1
 8002630:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002632:	4a18      	ldr	r2, [pc, #96]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8002634:	2388      	movs	r3, #136	@ 0x88
 8002636:	58d3      	ldr	r3, [r2, r3]
 8002638:	4a21      	ldr	r2, [pc, #132]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800263a:	401a      	ands	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002640:	4914      	ldr	r1, [pc, #80]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8002642:	4313      	orrs	r3, r2
 8002644:	2288      	movs	r2, #136	@ 0x88
 8002646:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM15 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	2380      	movs	r3, #128	@ 0x80
 800264e:	011b      	lsls	r3, r3, #4
 8002650:	4013      	ands	r3, r2
 8002652:	d017      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x40c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLLQ)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002658:	2380      	movs	r3, #128	@ 0x80
 800265a:	049b      	lsls	r3, r3, #18
 800265c:	429a      	cmp	r2, r3
 800265e:	d106      	bne.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8002660:	4b0c      	ldr	r3, [pc, #48]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8002662:	68da      	ldr	r2, [r3, #12]
 8002664:	4b0b      	ldr	r3, [pc, #44]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8002666:	2180      	movs	r1, #128	@ 0x80
 8002668:	0449      	lsls	r1, r1, #17
 800266a:	430a      	orrs	r2, r1
 800266c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800266e:	4a09      	ldr	r2, [pc, #36]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8002670:	2388      	movs	r3, #136	@ 0x88
 8002672:	58d3      	ldr	r3, [r2, r3]
 8002674:	4a12      	ldr	r2, [pc, #72]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8002676:	401a      	ands	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267c:	4905      	ldr	r1, [pc, #20]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800267e:	4313      	orrs	r3, r2
 8002680:	2288      	movs	r2, #136	@ 0x88
 8002682:	508b      	str	r3, [r1, r2]

  }

  return status;
 8002684:	2312      	movs	r3, #18
 8002686:	18fb      	adds	r3, r7, r3
 8002688:	781b      	ldrb	r3, [r3, #0]
}
 800268a:	0018      	movs	r0, r3
 800268c:	46bd      	mov	sp, r7
 800268e:	b006      	add	sp, #24
 8002690:	bd80      	pop	{r7, pc}
 8002692:	46c0      	nop			@ (mov r8, r8)
 8002694:	40021000 	.word	0x40021000
 8002698:	efffffff 	.word	0xefffffff
 800269c:	fffff3ff 	.word	0xfffff3ff
 80026a0:	fffffcff 	.word	0xfffffcff
 80026a4:	ffffcfff 	.word	0xffffcfff
 80026a8:	fffcffff 	.word	0xfffcffff
 80026ac:	fff3ffff 	.word	0xfff3ffff
 80026b0:	ffcfffff 	.word	0xffcfffff
 80026b4:	ff3fffff 	.word	0xff3fffff
 80026b8:	cfffffff 	.word	0xcfffffff
 80026bc:	f3ffffff 	.word	0xf3ffffff
 80026c0:	feffffff 	.word	0xfeffffff

080026c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_TIM1  TIM1 peripheral clock (only for devices with TIM1)
  *            @arg @ref RCC_PERIPHCLK_TIM15  TIM15 peripheral clock (only for devices with TIM15)
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80026c4:	b590      	push	{r4, r7, lr}
 80026c6:	b089      	sub	sp, #36	@ 0x24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	61fb      	str	r3, [r7, #28]
  PLL_ClocksTypeDef pll_freq;
  uint32_t msirange;
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	2380      	movs	r3, #128	@ 0x80
 80026d4:	021b      	lsls	r3, r3, #8
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d154      	bne.n	8002784 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
  {
    /* Get the current RCC_PERIPHCLK_RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80026da:	4ad5      	ldr	r2, [pc, #852]	@ (8002a30 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80026dc:	2390      	movs	r3, #144	@ 0x90
 80026de:	58d2      	ldr	r2, [r2, r3]
 80026e0:	23c0      	movs	r3, #192	@ 0xc0
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4013      	ands	r3, r2
 80026e6:	617b      	str	r3, [r7, #20]

    switch (srcclk)
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	23c0      	movs	r3, #192	@ 0xc0
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d039      	beq.n	8002766 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	23c0      	movs	r3, #192	@ 0xc0
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d901      	bls.n	8002700 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80026fc:	f000 fd1a 	bl	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	2380      	movs	r3, #128	@ 0x80
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	429a      	cmp	r2, r3
 8002708:	d006      	beq.n	8002718 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	2380      	movs	r3, #128	@ 0x80
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	429a      	cmp	r2, r3
 8002712:	d00f      	beq.n	8002734 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 8002714:	f000 fd0e 	bl	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002718:	4ac5      	ldr	r2, [pc, #788]	@ (8002a30 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800271a:	2390      	movs	r3, #144	@ 0x90
 800271c:	58d3      	ldr	r3, [r2, r3]
 800271e:	2202      	movs	r2, #2
 8002720:	4013      	ands	r3, r2
 8002722:	2b02      	cmp	r3, #2
 8002724:	d001      	beq.n	800272a <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 8002726:	f000 fd07 	bl	8003138 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
          frequency = LSE_VALUE;
 800272a:	2380      	movs	r3, #128	@ 0x80
 800272c:	021b      	lsls	r3, r3, #8
 800272e:	61fb      	str	r3, [r7, #28]
        break;
 8002730:	f000 fd02 	bl	8003138 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002734:	4abe      	ldr	r2, [pc, #760]	@ (8002a30 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8002736:	2394      	movs	r3, #148	@ 0x94
 8002738:	58d3      	ldr	r3, [r2, r3]
 800273a:	2202      	movs	r2, #2
 800273c:	4013      	ands	r3, r2
 800273e:	2b02      	cmp	r3, #2
 8002740:	d001      	beq.n	8002746 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
 8002742:	f000 fcfb 	bl	800313c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8002746:	4aba      	ldr	r2, [pc, #744]	@ (8002a30 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8002748:	2394      	movs	r3, #148	@ 0x94
 800274a:	58d3      	ldr	r3, [r2, r3]
 800274c:	2204      	movs	r2, #4
 800274e:	4013      	ands	r3, r2
 8002750:	2b04      	cmp	r3, #4
 8002752:	d103      	bne.n	800275c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = LSI_VALUE / 128U;
 8002754:	23fa      	movs	r3, #250	@ 0xfa
 8002756:	61fb      	str	r3, [r7, #28]
        break;
 8002758:	f000 fcf0 	bl	800313c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
            frequency = LSI_VALUE;
 800275c:	23fa      	movs	r3, #250	@ 0xfa
 800275e:	01db      	lsls	r3, r3, #7
 8002760:	61fb      	str	r3, [r7, #28]
        break;
 8002762:	f000 fceb 	bl	800313c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002766:	4bb2      	ldr	r3, [pc, #712]	@ (8002a30 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	2380      	movs	r3, #128	@ 0x80
 800276c:	029b      	lsls	r3, r3, #10
 800276e:	401a      	ands	r2, r3
 8002770:	2380      	movs	r3, #128	@ 0x80
 8002772:	029b      	lsls	r3, r3, #10
 8002774:	429a      	cmp	r2, r3
 8002776:	d001      	beq.n	800277c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8002778:	f000 fce2 	bl	8003140 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
          frequency = HSE_VALUE / 32U;
 800277c:	4bad      	ldr	r3, [pc, #692]	@ (8002a34 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 800277e:	61fb      	str	r3, [r7, #28]
        break;
 8002780:	f000 fcde 	bl	8003140 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	2380      	movs	r3, #128	@ 0x80
 8002788:	029b      	lsls	r3, r3, #10
 800278a:	429a      	cmp	r2, r3
 800278c:	d100      	bne.n	8002790 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 800278e:	e11a      	b.n	80029c6 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	2380      	movs	r3, #128	@ 0x80
 8002794:	029b      	lsls	r3, r3, #10
 8002796:	429a      	cmp	r2, r3
 8002798:	d901      	bls.n	800279e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800279a:	f000 fcd3 	bl	8003144 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	2380      	movs	r3, #128	@ 0x80
 80027a2:	025b      	lsls	r3, r3, #9
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d100      	bne.n	80027aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80027a8:	e10d      	b.n	80029c6 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	2380      	movs	r3, #128	@ 0x80
 80027ae:	025b      	lsls	r3, r3, #9
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d901      	bls.n	80027b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80027b4:	f000 fcc6 	bl	8003144 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	2380      	movs	r3, #128	@ 0x80
 80027bc:	01db      	lsls	r3, r3, #7
 80027be:	429a      	cmp	r2, r3
 80027c0:	d100      	bne.n	80027c4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80027c2:	e1eb      	b.n	8002b9c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	2380      	movs	r3, #128	@ 0x80
 80027c8:	01db      	lsls	r3, r3, #7
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d901      	bls.n	80027d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 80027ce:	f000 fcb9 	bl	8003144 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	2380      	movs	r3, #128	@ 0x80
 80027d6:	019b      	lsls	r3, r3, #6
 80027d8:	429a      	cmp	r2, r3
 80027da:	d101      	bne.n	80027e0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 80027dc:	f000 fc50 	bl	8003080 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	2380      	movs	r3, #128	@ 0x80
 80027e4:	019b      	lsls	r3, r3, #6
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d901      	bls.n	80027ee <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80027ea:	f000 fcab 	bl	8003144 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	2380      	movs	r3, #128	@ 0x80
 80027f2:	015b      	lsls	r3, r3, #5
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d101      	bne.n	80027fc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80027f8:	f000 fbe2 	bl	8002fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	2380      	movs	r3, #128	@ 0x80
 8002800:	015b      	lsls	r3, r3, #5
 8002802:	429a      	cmp	r2, r3
 8002804:	d901      	bls.n	800280a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002806:	f000 fc9d 	bl	8003144 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	2380      	movs	r3, #128	@ 0x80
 800280e:	011b      	lsls	r3, r3, #4
 8002810:	429a      	cmp	r2, r3
 8002812:	d101      	bne.n	8002818 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002814:	f000 fba9 	bl	8002f6a <HAL_RCCEx_GetPeriphCLKFreq+0x8a6>
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	2380      	movs	r3, #128	@ 0x80
 800281c:	011b      	lsls	r3, r3, #4
 800281e:	429a      	cmp	r2, r3
 8002820:	d901      	bls.n	8002826 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8002822:	f000 fc8f 	bl	8003144 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	2380      	movs	r3, #128	@ 0x80
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	429a      	cmp	r2, r3
 800282e:	d101      	bne.n	8002834 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8002830:	f000 fb70 	bl	8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	2380      	movs	r3, #128	@ 0x80
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	429a      	cmp	r2, r3
 800283c:	d901      	bls.n	8002842 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800283e:	f000 fc81 	bl	8003144 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	2380      	movs	r3, #128	@ 0x80
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	429a      	cmp	r2, r3
 800284a:	d100      	bne.n	800284e <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 800284c:	e305      	b.n	8002e5a <HAL_RCCEx_GetPeriphCLKFreq+0x796>
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	2380      	movs	r3, #128	@ 0x80
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	429a      	cmp	r2, r3
 8002856:	d901      	bls.n	800285c <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 8002858:	f000 fc74 	bl	8003144 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	2380      	movs	r3, #128	@ 0x80
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	429a      	cmp	r2, r3
 8002864:	d100      	bne.n	8002868 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8002866:	e29b      	b.n	8002da0 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	2380      	movs	r3, #128	@ 0x80
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	429a      	cmp	r2, r3
 8002870:	d901      	bls.n	8002876 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
 8002872:	f000 fc67 	bl	8003144 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2b80      	cmp	r3, #128	@ 0x80
 800287a:	d100      	bne.n	800287e <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 800287c:	e22f      	b.n	8002cde <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b80      	cmp	r3, #128	@ 0x80
 8002882:	d901      	bls.n	8002888 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8002884:	f000 fc5e 	bl	8003144 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b20      	cmp	r3, #32
 800288c:	d80f      	bhi.n	80028ae <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
 8002894:	f000 fc56 	bl	8003144 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b20      	cmp	r3, #32
 800289c:	d901      	bls.n	80028a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
 800289e:	f000 fc51 	bl	8003144 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	009a      	lsls	r2, r3, #2
 80028a6:	4b64      	ldr	r3, [pc, #400]	@ (8002a38 <HAL_RCCEx_GetPeriphCLKFreq+0x374>)
 80028a8:	18d3      	adds	r3, r2, r3
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	469f      	mov	pc, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2b40      	cmp	r3, #64	@ 0x40
 80028b2:	d100      	bne.n	80028b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
 80028b4:	e1df      	b.n	8002c76 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            break;
        }
        break;
      }
      default:
        break;
 80028b6:	f000 fc45 	bl	8003144 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80028ba:	4a5d      	ldr	r2, [pc, #372]	@ (8002a30 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80028bc:	2388      	movs	r3, #136	@ 0x88
 80028be:	58d3      	ldr	r3, [r2, r3]
 80028c0:	2203      	movs	r2, #3
 80028c2:	4013      	ands	r3, r2
 80028c4:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	2b03      	cmp	r3, #3
 80028ca:	d025      	beq.n	8002918 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	2b03      	cmp	r3, #3
 80028d0:	d82d      	bhi.n	800292e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d013      	beq.n	8002900 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d827      	bhi.n	800292e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d003      	beq.n	80028ec <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d005      	beq.n	80028f6 <HAL_RCCEx_GetPeriphCLKFreq+0x232>
            break;
 80028ea:	e020      	b.n	800292e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
            frequency = HAL_RCC_GetPCLK1Freq();
 80028ec:	f7ff fc40 	bl	8002170 <HAL_RCC_GetPCLK1Freq>
 80028f0:	0003      	movs	r3, r0
 80028f2:	61fb      	str	r3, [r7, #28]
            break;
 80028f4:	e022      	b.n	800293c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            frequency = HAL_RCC_GetSysClockFreq();
 80028f6:	f7ff fb95 	bl	8002024 <HAL_RCC_GetSysClockFreq>
 80028fa:	0003      	movs	r3, r0
 80028fc:	61fb      	str	r3, [r7, #28]
            break;
 80028fe:	e01d      	b.n	800293c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002900:	4b4b      	ldr	r3, [pc, #300]	@ (8002a30 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	2380      	movs	r3, #128	@ 0x80
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	401a      	ands	r2, r3
 800290a:	2380      	movs	r3, #128	@ 0x80
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	429a      	cmp	r2, r3
 8002910:	d110      	bne.n	8002934 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
              frequency = HSI_VALUE;
 8002912:	4b4a      	ldr	r3, [pc, #296]	@ (8002a3c <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 8002914:	61fb      	str	r3, [r7, #28]
            break;
 8002916:	e00d      	b.n	8002934 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002918:	4a45      	ldr	r2, [pc, #276]	@ (8002a30 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800291a:	2390      	movs	r3, #144	@ 0x90
 800291c:	58d3      	ldr	r3, [r2, r3]
 800291e:	2202      	movs	r2, #2
 8002920:	4013      	ands	r3, r2
 8002922:	2b02      	cmp	r3, #2
 8002924:	d109      	bne.n	800293a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
              frequency = LSE_VALUE;
 8002926:	2380      	movs	r3, #128	@ 0x80
 8002928:	021b      	lsls	r3, r3, #8
 800292a:	61fb      	str	r3, [r7, #28]
            break;
 800292c:	e005      	b.n	800293a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
            break;
 800292e:	46c0      	nop			@ (mov r8, r8)
 8002930:	f000 fc09 	bl	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8002934:	46c0      	nop			@ (mov r8, r8)
 8002936:	f000 fc06 	bl	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800293a:	46c0      	nop			@ (mov r8, r8)
        break;
 800293c:	f000 fc03 	bl	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8002940:	4a3b      	ldr	r2, [pc, #236]	@ (8002a30 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8002942:	2388      	movs	r3, #136	@ 0x88
 8002944:	58d3      	ldr	r3, [r2, r3]
 8002946:	220c      	movs	r2, #12
 8002948:	4013      	ands	r3, r2
 800294a:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	2b0c      	cmp	r3, #12
 8002950:	d025      	beq.n	800299e <HAL_RCCEx_GetPeriphCLKFreq+0x2da>
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	2b0c      	cmp	r3, #12
 8002956:	d82d      	bhi.n	80029b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	2b08      	cmp	r3, #8
 800295c:	d013      	beq.n	8002986 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	2b08      	cmp	r3, #8
 8002962:	d827      	bhi.n	80029b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	2b04      	cmp	r3, #4
 800296e:	d005      	beq.n	800297c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
            break;
 8002970:	e020      	b.n	80029b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
            frequency = HAL_RCC_GetPCLK1Freq();
 8002972:	f7ff fbfd 	bl	8002170 <HAL_RCC_GetPCLK1Freq>
 8002976:	0003      	movs	r3, r0
 8002978:	61fb      	str	r3, [r7, #28]
            break;
 800297a:	e022      	b.n	80029c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
            frequency = HAL_RCC_GetSysClockFreq();
 800297c:	f7ff fb52 	bl	8002024 <HAL_RCC_GetSysClockFreq>
 8002980:	0003      	movs	r3, r0
 8002982:	61fb      	str	r3, [r7, #28]
            break;
 8002984:	e01d      	b.n	80029c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002986:	4b2a      	ldr	r3, [pc, #168]	@ (8002a30 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	2380      	movs	r3, #128	@ 0x80
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	401a      	ands	r2, r3
 8002990:	2380      	movs	r3, #128	@ 0x80
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	429a      	cmp	r2, r3
 8002996:	d110      	bne.n	80029ba <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
              frequency = HSI_VALUE;
 8002998:	4b28      	ldr	r3, [pc, #160]	@ (8002a3c <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 800299a:	61fb      	str	r3, [r7, #28]
            break;
 800299c:	e00d      	b.n	80029ba <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800299e:	4a24      	ldr	r2, [pc, #144]	@ (8002a30 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80029a0:	2390      	movs	r3, #144	@ 0x90
 80029a2:	58d3      	ldr	r3, [r2, r3]
 80029a4:	2202      	movs	r2, #2
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d109      	bne.n	80029c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
              frequency = LSE_VALUE;
 80029ac:	2380      	movs	r3, #128	@ 0x80
 80029ae:	021b      	lsls	r3, r3, #8
 80029b0:	61fb      	str	r3, [r7, #28]
            break;
 80029b2:	e005      	b.n	80029c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
            break;
 80029b4:	46c0      	nop			@ (mov r8, r8)
 80029b6:	f000 fbc6 	bl	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80029ba:	46c0      	nop			@ (mov r8, r8)
 80029bc:	f000 fbc3 	bl	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80029c0:	46c0      	nop			@ (mov r8, r8)
        break;
 80029c2:	f000 fbc0 	bl	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        frequency = HAL_RCC_GetPCLK1Freq();
 80029c6:	f7ff fbd3 	bl	8002170 <HAL_RCC_GetPCLK1Freq>
 80029ca:	0003      	movs	r3, r0
 80029cc:	61fb      	str	r3, [r7, #28]
        break;
 80029ce:	f000 fbba 	bl	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80029d2:	4a17      	ldr	r2, [pc, #92]	@ (8002a30 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80029d4:	2388      	movs	r3, #136	@ 0x88
 80029d6:	58d2      	ldr	r2, [r2, r3]
 80029d8:	23c0      	movs	r3, #192	@ 0xc0
 80029da:	011b      	lsls	r3, r3, #4
 80029dc:	4013      	ands	r3, r2
 80029de:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	23c0      	movs	r3, #192	@ 0xc0
 80029e4:	011b      	lsls	r3, r3, #4
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d036      	beq.n	8002a58 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	23c0      	movs	r3, #192	@ 0xc0
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d83c      	bhi.n	8002a6e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	2380      	movs	r3, #128	@ 0x80
 80029f8:	011b      	lsls	r3, r3, #4
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d020      	beq.n	8002a40 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	2380      	movs	r3, #128	@ 0x80
 8002a02:	011b      	lsls	r3, r3, #4
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d832      	bhi.n	8002a6e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d005      	beq.n	8002a1a <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	2380      	movs	r3, #128	@ 0x80
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d005      	beq.n	8002a24 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
            break;
 8002a18:	e029      	b.n	8002a6e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
            frequency = HAL_RCC_GetPCLK1Freq();
 8002a1a:	f7ff fba9 	bl	8002170 <HAL_RCC_GetPCLK1Freq>
 8002a1e:	0003      	movs	r3, r0
 8002a20:	61fb      	str	r3, [r7, #28]
            break;
 8002a22:	e02b      	b.n	8002a7c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
            frequency = HAL_RCC_GetSysClockFreq();
 8002a24:	f7ff fafe 	bl	8002024 <HAL_RCC_GetSysClockFreq>
 8002a28:	0003      	movs	r3, r0
 8002a2a:	61fb      	str	r3, [r7, #28]
            break;
 8002a2c:	e026      	b.n	8002a7c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8002a2e:	46c0      	nop			@ (mov r8, r8)
 8002a30:	40021000 	.word	0x40021000
 8002a34:	0003d090 	.word	0x0003d090
 8002a38:	0800406c 	.word	0x0800406c
 8002a3c:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002a40:	4bbb      	ldr	r3, [pc, #748]	@ (8002d30 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	2380      	movs	r3, #128	@ 0x80
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	401a      	ands	r2, r3
 8002a4a:	2380      	movs	r3, #128	@ 0x80
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d110      	bne.n	8002a74 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
              frequency = HSI_VALUE;
 8002a52:	4bb8      	ldr	r3, [pc, #736]	@ (8002d34 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8002a54:	61fb      	str	r3, [r7, #28]
            break;
 8002a56:	e00d      	b.n	8002a74 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002a58:	4ab5      	ldr	r2, [pc, #724]	@ (8002d30 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8002a5a:	2390      	movs	r3, #144	@ 0x90
 8002a5c:	58d3      	ldr	r3, [r2, r3]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	4013      	ands	r3, r2
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d109      	bne.n	8002a7a <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
              frequency = LSE_VALUE;
 8002a66:	2380      	movs	r3, #128	@ 0x80
 8002a68:	021b      	lsls	r3, r3, #8
 8002a6a:	61fb      	str	r3, [r7, #28]
            break;
 8002a6c:	e005      	b.n	8002a7a <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
            break;
 8002a6e:	46c0      	nop			@ (mov r8, r8)
 8002a70:	f000 fb69 	bl	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8002a74:	46c0      	nop			@ (mov r8, r8)
 8002a76:	f000 fb66 	bl	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8002a7a:	46c0      	nop			@ (mov r8, r8)
        break;
 8002a7c:	f000 fb63 	bl	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART2_SOURCE();
 8002a80:	4aab      	ldr	r2, [pc, #684]	@ (8002d30 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8002a82:	2388      	movs	r3, #136	@ 0x88
 8002a84:	58d2      	ldr	r2, [r2, r3]
 8002a86:	23c0      	movs	r3, #192	@ 0xc0
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	23c0      	movs	r3, #192	@ 0xc0
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d02d      	beq.n	8002af4 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	23c0      	movs	r3, #192	@ 0xc0
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d833      	bhi.n	8002b0a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	2380      	movs	r3, #128	@ 0x80
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d017      	beq.n	8002adc <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	2380      	movs	r3, #128	@ 0x80
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d829      	bhi.n	8002b0a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d005      	beq.n	8002ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x404>
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	2380      	movs	r3, #128	@ 0x80
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d005      	beq.n	8002ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
            break;
 8002ac6:	e020      	b.n	8002b0a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
            frequency = HAL_RCC_GetPCLK1Freq();
 8002ac8:	f7ff fb52 	bl	8002170 <HAL_RCC_GetPCLK1Freq>
 8002acc:	0003      	movs	r3, r0
 8002ace:	61fb      	str	r3, [r7, #28]
            break;
 8002ad0:	e022      	b.n	8002b18 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
            frequency = HAL_RCC_GetSysClockFreq();
 8002ad2:	f7ff faa7 	bl	8002024 <HAL_RCC_GetSysClockFreq>
 8002ad6:	0003      	movs	r3, r0
 8002ad8:	61fb      	str	r3, [r7, #28]
            break;
 8002ada:	e01d      	b.n	8002b18 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002adc:	4b94      	ldr	r3, [pc, #592]	@ (8002d30 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	2380      	movs	r3, #128	@ 0x80
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	401a      	ands	r2, r3
 8002ae6:	2380      	movs	r3, #128	@ 0x80
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d110      	bne.n	8002b10 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
              frequency = HSI_VALUE;
 8002aee:	4b91      	ldr	r3, [pc, #580]	@ (8002d34 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8002af0:	61fb      	str	r3, [r7, #28]
            break;
 8002af2:	e00d      	b.n	8002b10 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002af4:	4a8e      	ldr	r2, [pc, #568]	@ (8002d30 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8002af6:	2390      	movs	r3, #144	@ 0x90
 8002af8:	58d3      	ldr	r3, [r2, r3]
 8002afa:	2202      	movs	r2, #2
 8002afc:	4013      	ands	r3, r2
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d109      	bne.n	8002b16 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
              frequency = LSE_VALUE;
 8002b02:	2380      	movs	r3, #128	@ 0x80
 8002b04:	021b      	lsls	r3, r3, #8
 8002b06:	61fb      	str	r3, [r7, #28]
            break;
 8002b08:	e005      	b.n	8002b16 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            break;
 8002b0a:	46c0      	nop			@ (mov r8, r8)
 8002b0c:	f000 fb1b 	bl	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8002b10:	46c0      	nop			@ (mov r8, r8)
 8002b12:	f000 fb18 	bl	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8002b16:	46c0      	nop			@ (mov r8, r8)
        break;
 8002b18:	f000 fb15 	bl	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART3_SOURCE();
 8002b1c:	4a84      	ldr	r2, [pc, #528]	@ (8002d30 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8002b1e:	2388      	movs	r3, #136	@ 0x88
 8002b20:	58d3      	ldr	r3, [r2, r3]
 8002b22:	22c0      	movs	r2, #192	@ 0xc0
 8002b24:	4013      	ands	r3, r2
 8002b26:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002b2c:	d025      	beq.n	8002b7a <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	2bc0      	cmp	r3, #192	@ 0xc0
 8002b32:	d82d      	bhi.n	8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	2b80      	cmp	r3, #128	@ 0x80
 8002b38:	d013      	beq.n	8002b62 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	2b80      	cmp	r3, #128	@ 0x80
 8002b3e:	d827      	bhi.n	8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2b40      	cmp	r3, #64	@ 0x40
 8002b4a:	d005      	beq.n	8002b58 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
            break;
 8002b4c:	e020      	b.n	8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
            frequency = HAL_RCC_GetPCLK1Freq();
 8002b4e:	f7ff fb0f 	bl	8002170 <HAL_RCC_GetPCLK1Freq>
 8002b52:	0003      	movs	r3, r0
 8002b54:	61fb      	str	r3, [r7, #28]
            break;
 8002b56:	e020      	b.n	8002b9a <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
            frequency = HAL_RCC_GetSysClockFreq();
 8002b58:	f7ff fa64 	bl	8002024 <HAL_RCC_GetSysClockFreq>
 8002b5c:	0003      	movs	r3, r0
 8002b5e:	61fb      	str	r3, [r7, #28]
            break;
 8002b60:	e01b      	b.n	8002b9a <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002b62:	4b73      	ldr	r3, [pc, #460]	@ (8002d30 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	2380      	movs	r3, #128	@ 0x80
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	401a      	ands	r2, r3
 8002b6c:	2380      	movs	r3, #128	@ 0x80
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d10f      	bne.n	8002b94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
              frequency = HSI_VALUE;
 8002b74:	4b6f      	ldr	r3, [pc, #444]	@ (8002d34 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8002b76:	61fb      	str	r3, [r7, #28]
            break;
 8002b78:	e00c      	b.n	8002b94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002b7a:	4a6d      	ldr	r2, [pc, #436]	@ (8002d30 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8002b7c:	2390      	movs	r3, #144	@ 0x90
 8002b7e:	58d3      	ldr	r3, [r2, r3]
 8002b80:	2202      	movs	r2, #2
 8002b82:	4013      	ands	r3, r2
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d107      	bne.n	8002b98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
              frequency = LSE_VALUE;
 8002b88:	2380      	movs	r3, #128	@ 0x80
 8002b8a:	021b      	lsls	r3, r3, #8
 8002b8c:	61fb      	str	r3, [r7, #28]
            break;
 8002b8e:	e003      	b.n	8002b98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
            break;
 8002b90:	46c0      	nop			@ (mov r8, r8)
 8002b92:	e2d8      	b.n	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8002b94:	46c0      	nop			@ (mov r8, r8)
 8002b96:	e2d6      	b.n	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8002b98:	46c0      	nop			@ (mov r8, r8)
        break;
 8002b9a:	e2d4      	b.n	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8002b9c:	4a64      	ldr	r2, [pc, #400]	@ (8002d30 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8002b9e:	2388      	movs	r3, #136	@ 0x88
 8002ba0:	58d2      	ldr	r2, [r2, r3]
 8002ba2:	23c0      	movs	r3, #192	@ 0xc0
 8002ba4:	059b      	lsls	r3, r3, #22
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	2380      	movs	r3, #128	@ 0x80
 8002bae:	059b      	lsls	r3, r3, #22
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d012      	beq.n	8002bda <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	2380      	movs	r3, #128	@ 0x80
 8002bb8:	059b      	lsls	r3, r3, #22
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d825      	bhi.n	8002c0a <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d005      	beq.n	8002bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	2380      	movs	r3, #128	@ 0x80
 8002bc8:	055b      	lsls	r3, r3, #21
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d014      	beq.n	8002bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>
            break;
 8002bce:	e01c      	b.n	8002c0a <HAL_RCCEx_GetPeriphCLKFreq+0x546>
            frequency = HAL_RCC_GetSysClockFreq();
 8002bd0:	f7ff fa28 	bl	8002024 <HAL_RCC_GetSysClockFreq>
 8002bd4:	0003      	movs	r3, r0
 8002bd6:	61fb      	str	r3, [r7, #28]
            break;
 8002bd8:	e018      	b.n	8002c0c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002bda:	4b55      	ldr	r3, [pc, #340]	@ (8002d30 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	2380      	movs	r3, #128	@ 0x80
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	401a      	ands	r2, r3
 8002be4:	2380      	movs	r3, #128	@ 0x80
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d102      	bne.n	8002bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
              frequency = HSI_VALUE;
 8002bec:	4b51      	ldr	r3, [pc, #324]	@ (8002d34 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8002bee:	61fb      	str	r3, [r7, #28]
            break;
 8002bf0:	e00c      	b.n	8002c0c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
              frequency = 0U;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	61fb      	str	r3, [r7, #28]
            break;
 8002bf6:	e009      	b.n	8002c0c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8002bf8:	2408      	movs	r4, #8
 8002bfa:	193b      	adds	r3, r7, r4
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f000 faad 	bl	800315c <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_P_Frequency;
 8002c02:	193b      	adds	r3, r7, r4
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	61fb      	str	r3, [r7, #28]
            break;
 8002c08:	e000      	b.n	8002c0c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            break;
 8002c0a:	46c0      	nop			@ (mov r8, r8)
        break;
 8002c0c:	e29b      	b.n	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8002c0e:	4a48      	ldr	r2, [pc, #288]	@ (8002d30 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8002c10:	2388      	movs	r3, #136	@ 0x88
 8002c12:	58d2      	ldr	r2, [r2, r3]
 8002c14:	23c0      	movs	r3, #192	@ 0xc0
 8002c16:	019b      	lsls	r3, r3, #6
 8002c18:	4013      	ands	r3, r2
 8002c1a:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	2380      	movs	r3, #128	@ 0x80
 8002c20:	019b      	lsls	r3, r3, #6
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d017      	beq.n	8002c56 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	2380      	movs	r3, #128	@ 0x80
 8002c2a:	019b      	lsls	r3, r3, #6
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d81e      	bhi.n	8002c6e <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d005      	beq.n	8002c42 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	2380      	movs	r3, #128	@ 0x80
 8002c3a:	015b      	lsls	r3, r3, #5
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d005      	beq.n	8002c4c <HAL_RCCEx_GetPeriphCLKFreq+0x588>
            break;
 8002c40:	e015      	b.n	8002c6e <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HAL_RCC_GetPCLK1Freq();
 8002c42:	f7ff fa95 	bl	8002170 <HAL_RCC_GetPCLK1Freq>
 8002c46:	0003      	movs	r3, r0
 8002c48:	61fb      	str	r3, [r7, #28]
            break;
 8002c4a:	e013      	b.n	8002c74 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
            frequency = HAL_RCC_GetSysClockFreq();
 8002c4c:	f7ff f9ea 	bl	8002024 <HAL_RCC_GetSysClockFreq>
 8002c50:	0003      	movs	r3, r0
 8002c52:	61fb      	str	r3, [r7, #28]
            break;
 8002c54:	e00e      	b.n	8002c74 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002c56:	4b36      	ldr	r3, [pc, #216]	@ (8002d30 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	2380      	movs	r3, #128	@ 0x80
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	401a      	ands	r2, r3
 8002c60:	2380      	movs	r3, #128	@ 0x80
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d104      	bne.n	8002c72 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
              frequency = HSI_VALUE;
 8002c68:	4b32      	ldr	r3, [pc, #200]	@ (8002d34 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8002c6a:	61fb      	str	r3, [r7, #28]
            break;
 8002c6c:	e001      	b.n	8002c72 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
            break;
 8002c6e:	46c0      	nop			@ (mov r8, r8)
 8002c70:	e269      	b.n	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8002c72:	46c0      	nop			@ (mov r8, r8)
        break;
 8002c74:	e267      	b.n	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8002c76:	4a2e      	ldr	r2, [pc, #184]	@ (8002d30 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8002c78:	2388      	movs	r3, #136	@ 0x88
 8002c7a:	58d2      	ldr	r2, [r2, r3]
 8002c7c:	23c0      	movs	r3, #192	@ 0xc0
 8002c7e:	029b      	lsls	r3, r3, #10
 8002c80:	4013      	ands	r3, r2
 8002c82:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	2380      	movs	r3, #128	@ 0x80
 8002c88:	029b      	lsls	r3, r3, #10
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d017      	beq.n	8002cbe <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	2380      	movs	r3, #128	@ 0x80
 8002c92:	029b      	lsls	r3, r3, #10
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d81e      	bhi.n	8002cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d005      	beq.n	8002caa <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	2380      	movs	r3, #128	@ 0x80
 8002ca2:	025b      	lsls	r3, r3, #9
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d005      	beq.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
            break;
 8002ca8:	e015      	b.n	8002cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
            frequency = HAL_RCC_GetPCLK1Freq();
 8002caa:	f7ff fa61 	bl	8002170 <HAL_RCC_GetPCLK1Freq>
 8002cae:	0003      	movs	r3, r0
 8002cb0:	61fb      	str	r3, [r7, #28]
            break;
 8002cb2:	e013      	b.n	8002cdc <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HAL_RCC_GetSysClockFreq();
 8002cb4:	f7ff f9b6 	bl	8002024 <HAL_RCC_GetSysClockFreq>
 8002cb8:	0003      	movs	r3, r0
 8002cba:	61fb      	str	r3, [r7, #28]
            break;
 8002cbc:	e00e      	b.n	8002cdc <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002cbe:	4b1c      	ldr	r3, [pc, #112]	@ (8002d30 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	2380      	movs	r3, #128	@ 0x80
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	401a      	ands	r2, r3
 8002cc8:	2380      	movs	r3, #128	@ 0x80
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d104      	bne.n	8002cda <HAL_RCCEx_GetPeriphCLKFreq+0x616>
              frequency = HSI_VALUE;
 8002cd0:	4b18      	ldr	r3, [pc, #96]	@ (8002d34 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8002cd2:	61fb      	str	r3, [r7, #28]
            break;
 8002cd4:	e001      	b.n	8002cda <HAL_RCCEx_GetPeriphCLKFreq+0x616>
            break;
 8002cd6:	46c0      	nop			@ (mov r8, r8)
 8002cd8:	e235      	b.n	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8002cda:	46c0      	nop			@ (mov r8, r8)
        break;
 8002cdc:	e233      	b.n	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8002cde:	4a14      	ldr	r2, [pc, #80]	@ (8002d30 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8002ce0:	2388      	movs	r3, #136	@ 0x88
 8002ce2:	58d2      	ldr	r2, [r2, r3]
 8002ce4:	23c0      	movs	r3, #192	@ 0xc0
 8002ce6:	031b      	lsls	r3, r3, #12
 8002ce8:	4013      	ands	r3, r2
 8002cea:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	23c0      	movs	r3, #192	@ 0xc0
 8002cf0:	031b      	lsls	r3, r3, #12
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d041      	beq.n	8002d7a <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	23c0      	movs	r3, #192	@ 0xc0
 8002cfa:	031b      	lsls	r3, r3, #12
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d847      	bhi.n	8002d90 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	2380      	movs	r3, #128	@ 0x80
 8002d04:	031b      	lsls	r3, r3, #12
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d02b      	beq.n	8002d62 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	2380      	movs	r3, #128	@ 0x80
 8002d0e:	031b      	lsls	r3, r3, #12
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d83d      	bhi.n	8002d90 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d005      	beq.n	8002d26 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	2380      	movs	r3, #128	@ 0x80
 8002d1e:	02db      	lsls	r3, r3, #11
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d009      	beq.n	8002d38 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            break;
 8002d24:	e034      	b.n	8002d90 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
            frequency = HAL_RCC_GetPCLK1Freq();
 8002d26:	f7ff fa23 	bl	8002170 <HAL_RCC_GetPCLK1Freq>
 8002d2a:	0003      	movs	r3, r0
 8002d2c:	61fb      	str	r3, [r7, #28]
            break;
 8002d2e:	e036      	b.n	8002d9e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8002d30:	40021000 	.word	0x40021000
 8002d34:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002d38:	4abd      	ldr	r2, [pc, #756]	@ (8003030 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8002d3a:	2394      	movs	r3, #148	@ 0x94
 8002d3c:	58d3      	ldr	r3, [r2, r3]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	4013      	ands	r3, r2
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d126      	bne.n	8002d94 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8002d46:	4aba      	ldr	r2, [pc, #744]	@ (8003030 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8002d48:	2394      	movs	r3, #148	@ 0x94
 8002d4a:	58d3      	ldr	r3, [r2, r3]
 8002d4c:	2204      	movs	r2, #4
 8002d4e:	4013      	ands	r3, r2
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	d102      	bne.n	8002d5a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
                frequency = LSI_VALUE / 128U;
 8002d54:	23fa      	movs	r3, #250	@ 0xfa
 8002d56:	61fb      	str	r3, [r7, #28]
            break;
 8002d58:	e01c      	b.n	8002d94 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
                frequency = LSI_VALUE;
 8002d5a:	23fa      	movs	r3, #250	@ 0xfa
 8002d5c:	01db      	lsls	r3, r3, #7
 8002d5e:	61fb      	str	r3, [r7, #28]
            break;
 8002d60:	e018      	b.n	8002d94 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002d62:	4bb3      	ldr	r3, [pc, #716]	@ (8003030 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	2380      	movs	r3, #128	@ 0x80
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	401a      	ands	r2, r3
 8002d6c:	2380      	movs	r3, #128	@ 0x80
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d111      	bne.n	8002d98 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
              frequency = HSI_VALUE;
 8002d74:	4baf      	ldr	r3, [pc, #700]	@ (8003034 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 8002d76:	61fb      	str	r3, [r7, #28]
            break;
 8002d78:	e00e      	b.n	8002d98 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002d7a:	4aad      	ldr	r2, [pc, #692]	@ (8003030 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8002d7c:	2390      	movs	r3, #144	@ 0x90
 8002d7e:	58d3      	ldr	r3, [r2, r3]
 8002d80:	2202      	movs	r2, #2
 8002d82:	4013      	ands	r3, r2
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d109      	bne.n	8002d9c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
              frequency = LSE_VALUE;
 8002d88:	2380      	movs	r3, #128	@ 0x80
 8002d8a:	021b      	lsls	r3, r3, #8
 8002d8c:	61fb      	str	r3, [r7, #28]
            break;
 8002d8e:	e005      	b.n	8002d9c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
            break;
 8002d90:	46c0      	nop			@ (mov r8, r8)
 8002d92:	e1d8      	b.n	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8002d94:	46c0      	nop			@ (mov r8, r8)
 8002d96:	e1d6      	b.n	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8002d98:	46c0      	nop			@ (mov r8, r8)
 8002d9a:	e1d4      	b.n	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8002d9c:	46c0      	nop			@ (mov r8, r8)
        break;
 8002d9e:	e1d2      	b.n	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8002da0:	4aa3      	ldr	r2, [pc, #652]	@ (8003030 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8002da2:	2388      	movs	r3, #136	@ 0x88
 8002da4:	58d2      	ldr	r2, [r2, r3]
 8002da6:	23c0      	movs	r3, #192	@ 0xc0
 8002da8:	039b      	lsls	r3, r3, #14
 8002daa:	4013      	ands	r3, r2
 8002dac:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	23c0      	movs	r3, #192	@ 0xc0
 8002db2:	039b      	lsls	r3, r3, #14
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d03d      	beq.n	8002e34 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	23c0      	movs	r3, #192	@ 0xc0
 8002dbc:	039b      	lsls	r3, r3, #14
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d843      	bhi.n	8002e4a <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	2380      	movs	r3, #128	@ 0x80
 8002dc6:	039b      	lsls	r3, r3, #14
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d027      	beq.n	8002e1c <HAL_RCCEx_GetPeriphCLKFreq+0x758>
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	2380      	movs	r3, #128	@ 0x80
 8002dd0:	039b      	lsls	r3, r3, #14
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d839      	bhi.n	8002e4a <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	2380      	movs	r3, #128	@ 0x80
 8002de0:	035b      	lsls	r3, r3, #13
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d005      	beq.n	8002df2 <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
            break;
 8002de6:	e030      	b.n	8002e4a <HAL_RCCEx_GetPeriphCLKFreq+0x786>
            frequency = HAL_RCC_GetPCLK1Freq();
 8002de8:	f7ff f9c2 	bl	8002170 <HAL_RCC_GetPCLK1Freq>
 8002dec:	0003      	movs	r3, r0
 8002dee:	61fb      	str	r3, [r7, #28]
            break;
 8002df0:	e032      	b.n	8002e58 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002df2:	4a8f      	ldr	r2, [pc, #572]	@ (8003030 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8002df4:	2394      	movs	r3, #148	@ 0x94
 8002df6:	58d3      	ldr	r3, [r2, r3]
 8002df8:	2202      	movs	r2, #2
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d126      	bne.n	8002e4e <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8002e00:	4a8b      	ldr	r2, [pc, #556]	@ (8003030 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8002e02:	2394      	movs	r3, #148	@ 0x94
 8002e04:	58d3      	ldr	r3, [r2, r3]
 8002e06:	2204      	movs	r2, #4
 8002e08:	4013      	ands	r3, r2
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d102      	bne.n	8002e14 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
                frequency = LSI_VALUE / 128U;
 8002e0e:	23fa      	movs	r3, #250	@ 0xfa
 8002e10:	61fb      	str	r3, [r7, #28]
            break;
 8002e12:	e01c      	b.n	8002e4e <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
                frequency = LSI_VALUE;
 8002e14:	23fa      	movs	r3, #250	@ 0xfa
 8002e16:	01db      	lsls	r3, r3, #7
 8002e18:	61fb      	str	r3, [r7, #28]
            break;
 8002e1a:	e018      	b.n	8002e4e <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002e1c:	4b84      	ldr	r3, [pc, #528]	@ (8003030 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	2380      	movs	r3, #128	@ 0x80
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	401a      	ands	r2, r3
 8002e26:	2380      	movs	r3, #128	@ 0x80
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d111      	bne.n	8002e52 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
              frequency = HSI_VALUE;
 8002e2e:	4b81      	ldr	r3, [pc, #516]	@ (8003034 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 8002e30:	61fb      	str	r3, [r7, #28]
            break;
 8002e32:	e00e      	b.n	8002e52 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002e34:	4a7e      	ldr	r2, [pc, #504]	@ (8003030 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8002e36:	2390      	movs	r3, #144	@ 0x90
 8002e38:	58d3      	ldr	r3, [r2, r3]
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d109      	bne.n	8002e56 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
              frequency = LSE_VALUE;
 8002e42:	2380      	movs	r3, #128	@ 0x80
 8002e44:	021b      	lsls	r3, r3, #8
 8002e46:	61fb      	str	r3, [r7, #28]
            break;
 8002e48:	e005      	b.n	8002e56 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
            break;
 8002e4a:	46c0      	nop			@ (mov r8, r8)
 8002e4c:	e17b      	b.n	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8002e4e:	46c0      	nop			@ (mov r8, r8)
 8002e50:	e179      	b.n	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8002e52:	46c0      	nop			@ (mov r8, r8)
 8002e54:	e177      	b.n	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8002e56:	46c0      	nop			@ (mov r8, r8)
        break;
 8002e58:	e175      	b.n	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8002e5a:	4a75      	ldr	r2, [pc, #468]	@ (8003030 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8002e5c:	2388      	movs	r3, #136	@ 0x88
 8002e5e:	58d2      	ldr	r2, [r2, r3]
 8002e60:	23c0      	movs	r3, #192	@ 0xc0
 8002e62:	041b      	lsls	r3, r3, #16
 8002e64:	4013      	ands	r3, r2
 8002e66:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	23c0      	movs	r3, #192	@ 0xc0
 8002e6c:	041b      	lsls	r3, r3, #16
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d03d      	beq.n	8002eee <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	23c0      	movs	r3, #192	@ 0xc0
 8002e76:	041b      	lsls	r3, r3, #16
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d843      	bhi.n	8002f04 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	2380      	movs	r3, #128	@ 0x80
 8002e80:	041b      	lsls	r3, r3, #16
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d027      	beq.n	8002ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	2380      	movs	r3, #128	@ 0x80
 8002e8a:	041b      	lsls	r3, r3, #16
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d839      	bhi.n	8002f04 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d005      	beq.n	8002ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	2380      	movs	r3, #128	@ 0x80
 8002e9a:	03db      	lsls	r3, r3, #15
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d005      	beq.n	8002eac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
            break;
 8002ea0:	e030      	b.n	8002f04 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
            frequency = HAL_RCC_GetPCLK1Freq();
 8002ea2:	f7ff f965 	bl	8002170 <HAL_RCC_GetPCLK1Freq>
 8002ea6:	0003      	movs	r3, r0
 8002ea8:	61fb      	str	r3, [r7, #28]
            break;
 8002eaa:	e032      	b.n	8002f12 <HAL_RCCEx_GetPeriphCLKFreq+0x84e>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002eac:	4a60      	ldr	r2, [pc, #384]	@ (8003030 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8002eae:	2394      	movs	r3, #148	@ 0x94
 8002eb0:	58d3      	ldr	r3, [r2, r3]
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d126      	bne.n	8002f08 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8002eba:	4a5d      	ldr	r2, [pc, #372]	@ (8003030 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8002ebc:	2394      	movs	r3, #148	@ 0x94
 8002ebe:	58d3      	ldr	r3, [r2, r3]
 8002ec0:	2204      	movs	r2, #4
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	2b04      	cmp	r3, #4
 8002ec6:	d102      	bne.n	8002ece <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
                frequency = LSI_VALUE / 128U;
 8002ec8:	23fa      	movs	r3, #250	@ 0xfa
 8002eca:	61fb      	str	r3, [r7, #28]
            break;
 8002ecc:	e01c      	b.n	8002f08 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
                frequency = LSI_VALUE;
 8002ece:	23fa      	movs	r3, #250	@ 0xfa
 8002ed0:	01db      	lsls	r3, r3, #7
 8002ed2:	61fb      	str	r3, [r7, #28]
            break;
 8002ed4:	e018      	b.n	8002f08 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002ed6:	4b56      	ldr	r3, [pc, #344]	@ (8003030 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	2380      	movs	r3, #128	@ 0x80
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	401a      	ands	r2, r3
 8002ee0:	2380      	movs	r3, #128	@ 0x80
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d111      	bne.n	8002f0c <HAL_RCCEx_GetPeriphCLKFreq+0x848>
              frequency = HSI_VALUE;
 8002ee8:	4b52      	ldr	r3, [pc, #328]	@ (8003034 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 8002eea:	61fb      	str	r3, [r7, #28]
            break;
 8002eec:	e00e      	b.n	8002f0c <HAL_RCCEx_GetPeriphCLKFreq+0x848>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002eee:	4a50      	ldr	r2, [pc, #320]	@ (8003030 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8002ef0:	2390      	movs	r3, #144	@ 0x90
 8002ef2:	58d3      	ldr	r3, [r2, r3]
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d109      	bne.n	8002f10 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
              frequency = LSE_VALUE;
 8002efc:	2380      	movs	r3, #128	@ 0x80
 8002efe:	021b      	lsls	r3, r3, #8
 8002f00:	61fb      	str	r3, [r7, #28]
            break;
 8002f02:	e005      	b.n	8002f10 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
            break;
 8002f04:	46c0      	nop			@ (mov r8, r8)
 8002f06:	e11e      	b.n	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8002f08:	46c0      	nop			@ (mov r8, r8)
 8002f0a:	e11c      	b.n	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8002f0c:	46c0      	nop			@ (mov r8, r8)
 8002f0e:	e11a      	b.n	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8002f10:	46c0      	nop			@ (mov r8, r8)
        break;
 8002f12:	e118      	b.n	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_TIM1_SOURCE();
 8002f14:	4a46      	ldr	r2, [pc, #280]	@ (8003030 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8002f16:	2388      	movs	r3, #136	@ 0x88
 8002f18:	58d2      	ldr	r2, [r2, r3]
 8002f1a:	2380      	movs	r3, #128	@ 0x80
 8002f1c:	045b      	lsls	r3, r3, #17
 8002f1e:	4013      	ands	r3, r2
 8002f20:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d005      	beq.n	8002f34 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	2380      	movs	r3, #128	@ 0x80
 8002f2c:	045b      	lsls	r3, r3, #17
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d011      	beq.n	8002f56 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
            break;
 8002f32:	e019      	b.n	8002f68 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 8002f34:	4b3e      	ldr	r3, [pc, #248]	@ (8003030 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	23e0      	movs	r3, #224	@ 0xe0
 8002f3a:	01db      	lsls	r3, r3, #7
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	d104      	bne.n	8002f4a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
              frequency = HAL_RCC_GetPCLK1Freq();
 8002f40:	f7ff f916 	bl	8002170 <HAL_RCC_GetPCLK1Freq>
 8002f44:	0003      	movs	r3, r0
 8002f46:	61fb      	str	r3, [r7, #28]
            break;
 8002f48:	e00e      	b.n	8002f68 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 8002f4a:	f7ff f911 	bl	8002170 <HAL_RCC_GetPCLK1Freq>
 8002f4e:	0003      	movs	r3, r0
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	61fb      	str	r3, [r7, #28]
            break;
 8002f54:	e008      	b.n	8002f68 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8002f56:	2408      	movs	r4, #8
 8002f58:	193b      	adds	r3, r7, r4
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f000 f8fe 	bl	800315c <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8002f60:	193b      	adds	r3, r7, r4
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	61fb      	str	r3, [r7, #28]
            break;
 8002f66:	46c0      	nop			@ (mov r8, r8)
        break;
 8002f68:	e0ed      	b.n	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_TIM15_SOURCE();
 8002f6a:	4a31      	ldr	r2, [pc, #196]	@ (8003030 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8002f6c:	2388      	movs	r3, #136	@ 0x88
 8002f6e:	58d2      	ldr	r2, [r2, r3]
 8002f70:	2380      	movs	r3, #128	@ 0x80
 8002f72:	049b      	lsls	r3, r3, #18
 8002f74:	4013      	ands	r3, r2
 8002f76:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d005      	beq.n	8002f8a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	2380      	movs	r3, #128	@ 0x80
 8002f82:	049b      	lsls	r3, r3, #18
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d011      	beq.n	8002fac <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
            break;
 8002f88:	e019      	b.n	8002fbe <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 8002f8a:	4b29      	ldr	r3, [pc, #164]	@ (8003030 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8002f8c:	689a      	ldr	r2, [r3, #8]
 8002f8e:	23e0      	movs	r3, #224	@ 0xe0
 8002f90:	01db      	lsls	r3, r3, #7
 8002f92:	4013      	ands	r3, r2
 8002f94:	d104      	bne.n	8002fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
              frequency = HAL_RCC_GetPCLK1Freq();
 8002f96:	f7ff f8eb 	bl	8002170 <HAL_RCC_GetPCLK1Freq>
 8002f9a:	0003      	movs	r3, r0
 8002f9c:	61fb      	str	r3, [r7, #28]
            break;
 8002f9e:	e00e      	b.n	8002fbe <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 8002fa0:	f7ff f8e6 	bl	8002170 <HAL_RCC_GetPCLK1Freq>
 8002fa4:	0003      	movs	r3, r0
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	61fb      	str	r3, [r7, #28]
            break;
 8002faa:	e008      	b.n	8002fbe <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8002fac:	2408      	movs	r4, #8
 8002fae:	193b      	adds	r3, r7, r4
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f000 f8d3 	bl	800315c <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8002fb6:	193b      	adds	r3, r7, r4
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	61fb      	str	r3, [r7, #28]
            break;
 8002fbc:	46c0      	nop			@ (mov r8, r8)
        break;
 8002fbe:	e0c2      	b.n	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8002fc0:	4a1b      	ldr	r2, [pc, #108]	@ (8003030 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8002fc2:	2388      	movs	r3, #136	@ 0x88
 8002fc4:	58d2      	ldr	r2, [r2, r3]
 8002fc6:	23c0      	movs	r3, #192	@ 0xc0
 8002fc8:	051b      	lsls	r3, r3, #20
 8002fca:	4013      	ands	r3, r2
 8002fcc:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	23c0      	movs	r3, #192	@ 0xc0
 8002fd2:	051b      	lsls	r3, r3, #20
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d017      	beq.n	8003008 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	23c0      	movs	r3, #192	@ 0xc0
 8002fdc:	051b      	lsls	r3, r3, #20
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d84a      	bhi.n	8003078 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	2380      	movs	r3, #128	@ 0x80
 8002fe6:	051b      	lsls	r3, r3, #20
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d039      	beq.n	8003060 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	2380      	movs	r3, #128	@ 0x80
 8002ff0:	051b      	lsls	r3, r3, #20
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d840      	bhi.n	8003078 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d03a      	beq.n	8003072 <HAL_RCCEx_GetPeriphCLKFreq+0x9ae>
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	2380      	movs	r3, #128	@ 0x80
 8003000:	04db      	lsls	r3, r3, #19
 8003002:	429a      	cmp	r2, r3
 8003004:	d003      	beq.n	800300e <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
            break;
 8003006:	e037      	b.n	8003078 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
            frequency = HSI48_VALUE;
 8003008:	4b0b      	ldr	r3, [pc, #44]	@ (8003038 <HAL_RCCEx_GetPeriphCLKFreq+0x974>)
 800300a:	61fb      	str	r3, [r7, #28]
            break;
 800300c:	e037      	b.n	800307e <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800300e:	4b08      	ldr	r3, [pc, #32]	@ (8003030 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2202      	movs	r2, #2
 8003014:	4013      	ands	r3, r2
 8003016:	2b02      	cmp	r3, #2
 8003018:	d130      	bne.n	800307c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 800301a:	4b05      	ldr	r3, [pc, #20]	@ (8003030 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2208      	movs	r2, #8
 8003020:	4013      	ands	r3, r2
 8003022:	d00b      	beq.n	800303c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 8003024:	4b02      	ldr	r3, [pc, #8]	@ (8003030 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	091b      	lsrs	r3, r3, #4
 800302a:	220f      	movs	r2, #15
 800302c:	4013      	ands	r3, r2
 800302e:	e00b      	b.n	8003048 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
 8003030:	40021000 	.word	0x40021000
 8003034:	00f42400 	.word	0x00f42400
 8003038:	02dc6c00 	.word	0x02dc6c00
 800303c:	4a44      	ldr	r2, [pc, #272]	@ (8003150 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 800303e:	2394      	movs	r3, #148	@ 0x94
 8003040:	58d3      	ldr	r3, [r2, r3]
 8003042:	0a1b      	lsrs	r3, r3, #8
 8003044:	220f      	movs	r2, #15
 8003046:	4013      	ands	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	2b0b      	cmp	r3, #11
 800304e:	d901      	bls.n	8003054 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
                msirange = 11U;
 8003050:	230b      	movs	r3, #11
 8003052:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 8003054:	4b3f      	ldr	r3, [pc, #252]	@ (8003154 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>)
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	0092      	lsls	r2, r2, #2
 800305a:	58d3      	ldr	r3, [r2, r3]
 800305c:	61fb      	str	r3, [r7, #28]
            break;
 800305e:	e00d      	b.n	800307c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8003060:	2408      	movs	r4, #8
 8003062:	193b      	adds	r3, r7, r4
 8003064:	0018      	movs	r0, r3
 8003066:	f000 f879 	bl	800315c <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 800306a:	193b      	adds	r3, r7, r4
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	61fb      	str	r3, [r7, #28]
            break;
 8003070:	e005      	b.n	800307e <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            frequency = 0U;
 8003072:	2300      	movs	r3, #0
 8003074:	61fb      	str	r3, [r7, #28]
            break;
 8003076:	e002      	b.n	800307e <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            break;
 8003078:	46c0      	nop			@ (mov r8, r8)
 800307a:	e064      	b.n	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800307c:	46c0      	nop			@ (mov r8, r8)
        break;
 800307e:	e062      	b.n	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8003080:	4a33      	ldr	r2, [pc, #204]	@ (8003150 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8003082:	2388      	movs	r3, #136	@ 0x88
 8003084:	58d2      	ldr	r2, [r2, r3]
 8003086:	23c0      	movs	r3, #192	@ 0xc0
 8003088:	051b      	lsls	r3, r3, #20
 800308a:	4013      	ands	r3, r2
 800308c:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	23c0      	movs	r3, #192	@ 0xc0
 8003092:	051b      	lsls	r3, r3, #20
 8003094:	429a      	cmp	r2, r3
 8003096:	d017      	beq.n	80030c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa04>
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	23c0      	movs	r3, #192	@ 0xc0
 800309c:	051b      	lsls	r3, r3, #20
 800309e:	429a      	cmp	r2, r3
 80030a0:	d844      	bhi.n	800312c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	2380      	movs	r3, #128	@ 0x80
 80030a6:	051b      	lsls	r3, r3, #20
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d033      	beq.n	8003114 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	2380      	movs	r3, #128	@ 0x80
 80030b0:	051b      	lsls	r3, r3, #20
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d83a      	bhi.n	800312c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d034      	beq.n	8003126 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	2380      	movs	r3, #128	@ 0x80
 80030c0:	04db      	lsls	r3, r3, #19
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d003      	beq.n	80030ce <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
            break;
 80030c6:	e031      	b.n	800312c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            frequency = HSI48_VALUE;
 80030c8:	4b23      	ldr	r3, [pc, #140]	@ (8003158 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>)
 80030ca:	61fb      	str	r3, [r7, #28]
            break;
 80030cc:	e031      	b.n	8003132 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80030ce:	4b20      	ldr	r3, [pc, #128]	@ (8003150 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2202      	movs	r2, #2
 80030d4:	4013      	ands	r3, r2
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d12a      	bne.n	8003130 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 80030da:	4b1d      	ldr	r3, [pc, #116]	@ (8003150 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2208      	movs	r2, #8
 80030e0:	4013      	ands	r3, r2
 80030e2:	d005      	beq.n	80030f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa2c>
 80030e4:	4b1a      	ldr	r3, [pc, #104]	@ (8003150 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	091b      	lsrs	r3, r3, #4
 80030ea:	220f      	movs	r2, #15
 80030ec:	4013      	ands	r3, r2
 80030ee:	e005      	b.n	80030fc <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 80030f0:	4a17      	ldr	r2, [pc, #92]	@ (8003150 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 80030f2:	2394      	movs	r3, #148	@ 0x94
 80030f4:	58d3      	ldr	r3, [r2, r3]
 80030f6:	0a1b      	lsrs	r3, r3, #8
 80030f8:	220f      	movs	r2, #15
 80030fa:	4013      	ands	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	2b0b      	cmp	r3, #11
 8003102:	d901      	bls.n	8003108 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
                msirange = 11U;
 8003104:	230b      	movs	r3, #11
 8003106:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 8003108:	4b12      	ldr	r3, [pc, #72]	@ (8003154 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>)
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	0092      	lsls	r2, r2, #2
 800310e:	58d3      	ldr	r3, [r2, r3]
 8003110:	61fb      	str	r3, [r7, #28]
            break;
 8003112:	e00d      	b.n	8003130 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8003114:	2408      	movs	r4, #8
 8003116:	193b      	adds	r3, r7, r4
 8003118:	0018      	movs	r0, r3
 800311a:	f000 f81f 	bl	800315c <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 800311e:	193b      	adds	r3, r7, r4
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	61fb      	str	r3, [r7, #28]
            break;
 8003124:	e005      	b.n	8003132 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = 0U;
 8003126:	2300      	movs	r3, #0
 8003128:	61fb      	str	r3, [r7, #28]
            break;
 800312a:	e002      	b.n	8003132 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            break;
 800312c:	46c0      	nop			@ (mov r8, r8)
 800312e:	e00a      	b.n	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8003130:	46c0      	nop			@ (mov r8, r8)
        break;
 8003132:	e008      	b.n	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8003134:	46c0      	nop			@ (mov r8, r8)
 8003136:	e006      	b.n	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8003138:	46c0      	nop			@ (mov r8, r8)
 800313a:	e004      	b.n	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 800313c:	46c0      	nop			@ (mov r8, r8)
 800313e:	e002      	b.n	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8003140:	46c0      	nop			@ (mov r8, r8)
 8003142:	e000      	b.n	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8003144:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return (frequency);
 8003146:	69fb      	ldr	r3, [r7, #28]
}
 8003148:	0018      	movs	r0, r3
 800314a:	46bd      	mov	sp, r7
 800314c:	b009      	add	sp, #36	@ 0x24
 800314e:	bd90      	pop	{r4, r7, pc}
 8003150:	40021000 	.word	0x40021000
 8003154:	0800403c 	.word	0x0800403c
 8003158:	02dc6c00 	.word	0x02dc6c00

0800315c <HAL_RCCEx_GetPLLClockFreq>:
  * @param  PLL_Clocks structure.
  * @retval None
  */

void HAL_RCCEx_GetPLLClockFreq(PLL_ClocksTypeDef *PLL_Clocks)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b088      	sub	sp, #32
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t pllm;
  uint32_t plln;
  uint32_t pllvco;
  uint32_t msirange;

  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003164:	4b58      	ldr	r3, [pc, #352]	@ (80032c8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	0a1b      	lsrs	r3, r3, #8
 800316a:	227f      	movs	r2, #127	@ 0x7f
 800316c:	4013      	ands	r3, r2
 800316e:	617b      	str	r3, [r7, #20]
  pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003170:	4b55      	ldr	r3, [pc, #340]	@ (80032c8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	2203      	movs	r2, #3
 8003176:	4013      	ands	r3, r2
 8003178:	613b      	str	r3, [r7, #16]
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 800317a:	4b53      	ldr	r3, [pc, #332]	@ (80032c8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	091b      	lsrs	r3, r3, #4
 8003180:	2207      	movs	r2, #7
 8003182:	4013      	ands	r3, r2
 8003184:	3301      	adds	r3, #1
 8003186:	60fb      	str	r3, [r7, #12]
  msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8003188:	4b4f      	ldr	r3, [pc, #316]	@ (80032c8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2208      	movs	r2, #8
 800318e:	4013      	ands	r3, r2
 8003190:	d005      	beq.n	800319e <HAL_RCCEx_GetPLLClockFreq+0x42>
 8003192:	4b4d      	ldr	r3, [pc, #308]	@ (80032c8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	091b      	lsrs	r3, r3, #4
 8003198:	220f      	movs	r2, #15
 800319a:	4013      	ands	r3, r2
 800319c:	e005      	b.n	80031aa <HAL_RCCEx_GetPLLClockFreq+0x4e>
 800319e:	4a4a      	ldr	r2, [pc, #296]	@ (80032c8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80031a0:	2394      	movs	r3, #148	@ 0x94
 80031a2:	58d3      	ldr	r3, [r2, r3]
 80031a4:	0a1b      	lsrs	r3, r3, #8
 80031a6:	220f      	movs	r2, #15
 80031a8:	4013      	ands	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
  if (msirange > 11U)
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	2b0b      	cmp	r3, #11
 80031b0:	d901      	bls.n	80031b6 <HAL_RCCEx_GetPLLClockFreq+0x5a>
  {
    msirange = 11U;
 80031b2:	230b      	movs	r3, #11
 80031b4:	61bb      	str	r3, [r7, #24]
  }
  switch (pllsource)
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	2b03      	cmp	r3, #3
 80031ba:	d020      	beq.n	80031fe <HAL_RCCEx_GetPLLClockFreq+0xa2>
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	2b03      	cmp	r3, #3
 80031c0:	d827      	bhi.n	8003212 <HAL_RCCEx_GetPLLClockFreq+0xb6>
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d00c      	beq.n	80031e2 <HAL_RCCEx_GetPLLClockFreq+0x86>
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d121      	bne.n	8003212 <HAL_RCCEx_GetPLLClockFreq+0xb6>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * plln;
 80031ce:	68f9      	ldr	r1, [r7, #12]
 80031d0:	483e      	ldr	r0, [pc, #248]	@ (80032cc <HAL_RCCEx_GetPLLClockFreq+0x170>)
 80031d2:	f7fc ff99 	bl	8000108 <__udivsi3>
 80031d6:	0003      	movs	r3, r0
 80031d8:	001a      	movs	r2, r3
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	4353      	muls	r3, r2
 80031de:	61fb      	str	r3, [r7, #28]
      break;
 80031e0:	e025      	b.n	800322e <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 80031e2:	4b3b      	ldr	r3, [pc, #236]	@ (80032d0 <HAL_RCCEx_GetPLLClockFreq+0x174>)
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	0092      	lsls	r2, r2, #2
 80031e8:	58d3      	ldr	r3, [r2, r3]
 80031ea:	68f9      	ldr	r1, [r7, #12]
 80031ec:	0018      	movs	r0, r3
 80031ee:	f7fc ff8b 	bl	8000108 <__udivsi3>
 80031f2:	0003      	movs	r3, r0
 80031f4:	001a      	movs	r2, r3
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	4353      	muls	r3, r2
 80031fa:	61fb      	str	r3, [r7, #28]
      break;
 80031fc:	e017      	b.n	800322e <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * plln;
 80031fe:	68f9      	ldr	r1, [r7, #12]
 8003200:	4834      	ldr	r0, [pc, #208]	@ (80032d4 <HAL_RCCEx_GetPLLClockFreq+0x178>)
 8003202:	f7fc ff81 	bl	8000108 <__udivsi3>
 8003206:	0003      	movs	r3, r0
 8003208:	001a      	movs	r2, r3
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	4353      	muls	r3, r2
 800320e:	61fb      	str	r3, [r7, #28]
      break;
 8003210:	e00d      	b.n	800322e <HAL_RCCEx_GetPLLClockFreq+0xd2>

    default:
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 8003212:	4b2f      	ldr	r3, [pc, #188]	@ (80032d0 <HAL_RCCEx_GetPLLClockFreq+0x174>)
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	0092      	lsls	r2, r2, #2
 8003218:	58d3      	ldr	r3, [r2, r3]
 800321a:	68f9      	ldr	r1, [r7, #12]
 800321c:	0018      	movs	r0, r3
 800321e:	f7fc ff73 	bl	8000108 <__udivsi3>
 8003222:	0003      	movs	r3, r0
 8003224:	001a      	movs	r2, r3
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	4353      	muls	r3, r2
 800322a:	61fb      	str	r3, [r7, #28]
      break;
 800322c:	46c0      	nop			@ (mov r8, r8)
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVP) != 0U)
 800322e:	4b26      	ldr	r3, [pc, #152]	@ (80032c8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8003230:	68da      	ldr	r2, [r3, #12]
 8003232:	2380      	movs	r3, #128	@ 0x80
 8003234:	025b      	lsls	r3, r3, #9
 8003236:	4013      	ands	r3, r2
 8003238:	d00e      	beq.n	8003258 <HAL_RCCEx_GetPLLClockFreq+0xfc>
  {
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 800323a:	4b23      	ldr	r3, [pc, #140]	@ (80032c8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 800323c:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLP_Pos) + 1U));
 800323e:	0c5b      	lsrs	r3, r3, #17
 8003240:	221f      	movs	r2, #31
 8003242:	4013      	ands	r3, r2
 8003244:	3301      	adds	r3, #1
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 8003246:	0019      	movs	r1, r3
 8003248:	69f8      	ldr	r0, [r7, #28]
 800324a:	f7fc ff5d 	bl	8000108 <__udivsi3>
 800324e:	0003      	movs	r3, r0
 8003250:	001a      	movs	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	e002      	b.n	800325e <HAL_RCCEx_GetPLLClockFreq+0x102>
  }
  else
  {
    PLL_Clocks->PLL_P_Frequency = 0;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVQ) != 0U)
 800325e:	4b1a      	ldr	r3, [pc, #104]	@ (80032c8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8003260:	68da      	ldr	r2, [r3, #12]
 8003262:	2380      	movs	r3, #128	@ 0x80
 8003264:	045b      	lsls	r3, r3, #17
 8003266:	4013      	ands	r3, r2
 8003268:	d00e      	beq.n	8003288 <HAL_RCCEx_GetPLLClockFreq+0x12c>
  {
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 800326a:	4b17      	ldr	r3, [pc, #92]	@ (80032c8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 800326c:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLQ_Pos) + 1U));
 800326e:	0e5b      	lsrs	r3, r3, #25
 8003270:	2207      	movs	r2, #7
 8003272:	4013      	ands	r3, r2
 8003274:	3301      	adds	r3, #1
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 8003276:	0019      	movs	r1, r3
 8003278:	69f8      	ldr	r0, [r7, #28]
 800327a:	f7fc ff45 	bl	8000108 <__udivsi3>
 800327e:	0003      	movs	r3, r0
 8003280:	001a      	movs	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	605a      	str	r2, [r3, #4]
 8003286:	e002      	b.n	800328e <HAL_RCCEx_GetPLLClockFreq+0x132>
  }
  else
  {
    PLL_Clocks->PLL_Q_Frequency = 0;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVR) != 0U)
 800328e:	4b0e      	ldr	r3, [pc, #56]	@ (80032c8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8003290:	68da      	ldr	r2, [r3, #12]
 8003292:	2380      	movs	r3, #128	@ 0x80
 8003294:	055b      	lsls	r3, r3, #21
 8003296:	4013      	ands	r3, r2
 8003298:	d00e      	beq.n	80032b8 <HAL_RCCEx_GetPLLClockFreq+0x15c>
  {
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 800329a:	4b0b      	ldr	r3, [pc, #44]	@ (80032c8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 800329c:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLR_Pos) + 1U));
 800329e:	0f5b      	lsrs	r3, r3, #29
 80032a0:	2207      	movs	r2, #7
 80032a2:	4013      	ands	r3, r2
 80032a4:	3301      	adds	r3, #1
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 80032a6:	0019      	movs	r1, r3
 80032a8:	69f8      	ldr	r0, [r7, #28]
 80032aa:	f7fc ff2d 	bl	8000108 <__udivsi3>
 80032ae:	0003      	movs	r3, r0
 80032b0:	001a      	movs	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL_Clocks->PLL_R_Frequency = 0;
  }
}
 80032b6:	e002      	b.n	80032be <HAL_RCCEx_GetPLLClockFreq+0x162>
    PLL_Clocks->PLL_R_Frequency = 0;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	609a      	str	r2, [r3, #8]
}
 80032be:	46c0      	nop			@ (mov r8, r8)
 80032c0:	46bd      	mov	sp, r7
 80032c2:	b008      	add	sp, #32
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	46c0      	nop			@ (mov r8, r8)
 80032c8:	40021000 	.word	0x40021000
 80032cc:	00f42400 	.word	0x00f42400
 80032d0:	0800403c 	.word	0x0800403c
 80032d4:	007a1200 	.word	0x007a1200

080032d8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80032e0:	210f      	movs	r1, #15
 80032e2:	187b      	adds	r3, r7, r1
 80032e4:	2201      	movs	r2, #1
 80032e6:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d100      	bne.n	80032f0 <HAL_RTC_Init+0x18>
 80032ee:	e08b      	b.n	8003408 <HAL_RTC_Init+0x130>
  {
    status = HAL_OK;
 80032f0:	187b      	adds	r3, r7, r1
 80032f2:	2200      	movs	r2, #0
 80032f4:	701a      	strb	r2, [r3, #0]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	222d      	movs	r2, #45	@ 0x2d
 80032fa:	5c9b      	ldrb	r3, [r3, r2]
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d107      	bne.n	8003312 <HAL_RTC_Init+0x3a>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	222c      	movs	r2, #44	@ 0x2c
 8003306:	2100      	movs	r1, #0
 8003308:	5499      	strb	r1, [r3, r2]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	0018      	movs	r0, r3
 800330e:	f7fd fb5f 	bl	80009d0 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	222d      	movs	r2, #45	@ 0x2d
 8003316:	2102      	movs	r1, #2
 8003318:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800331a:	4b3f      	ldr	r3, [pc, #252]	@ (8003418 <HAL_RTC_Init+0x140>)
 800331c:	22ca      	movs	r2, #202	@ 0xca
 800331e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003320:	4b3d      	ldr	r3, [pc, #244]	@ (8003418 <HAL_RTC_Init+0x140>)
 8003322:	2253      	movs	r2, #83	@ 0x53
 8003324:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	0018      	movs	r0, r3
 800332a:	f000 f8a1 	bl	8003470 <RTC_EnterInitMode>
 800332e:	1e03      	subs	r3, r0, #0
 8003330:	d00b      	beq.n	800334a <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003332:	4b39      	ldr	r3, [pc, #228]	@ (8003418 <HAL_RTC_Init+0x140>)
 8003334:	22ff      	movs	r2, #255	@ 0xff
 8003336:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	222d      	movs	r2, #45	@ 0x2d
 800333c:	2104      	movs	r1, #4
 800333e:	5499      	strb	r1, [r3, r2]

      status = HAL_ERROR;
 8003340:	230f      	movs	r3, #15
 8003342:	18fb      	adds	r3, r7, r3
 8003344:	2201      	movs	r2, #1
 8003346:	701a      	strb	r2, [r3, #0]
 8003348:	e05e      	b.n	8003408 <HAL_RTC_Init+0x130>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800334a:	4b33      	ldr	r3, [pc, #204]	@ (8003418 <HAL_RTC_Init+0x140>)
 800334c:	699a      	ldr	r2, [r3, #24]
 800334e:	4b32      	ldr	r3, [pc, #200]	@ (8003418 <HAL_RTC_Init+0x140>)
 8003350:	4932      	ldr	r1, [pc, #200]	@ (800341c <HAL_RTC_Init+0x144>)
 8003352:	400a      	ands	r2, r1
 8003354:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8003356:	4b30      	ldr	r3, [pc, #192]	@ (8003418 <HAL_RTC_Init+0x140>)
 8003358:	6999      	ldr	r1, [r3, #24]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	431a      	orrs	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	431a      	orrs	r2, r3
 800336a:	4b2b      	ldr	r3, [pc, #172]	@ (8003418 <HAL_RTC_Init+0x140>)
 800336c:	430a      	orrs	r2, r1
 800336e:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68d9      	ldr	r1, [r3, #12]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	041a      	lsls	r2, r3, #16
 800337a:	4b27      	ldr	r3, [pc, #156]	@ (8003418 <HAL_RTC_Init+0x140>)
 800337c:	430a      	orrs	r2, r1
 800337e:	611a      	str	r2, [r3, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8003380:	4b25      	ldr	r3, [pc, #148]	@ (8003418 <HAL_RTC_Init+0x140>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	4a26      	ldr	r2, [pc, #152]	@ (8003420 <HAL_RTC_Init+0x148>)
 8003386:	4013      	ands	r3, r2
 8003388:	0019      	movs	r1, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003392:	431a      	orrs	r2, r3
 8003394:	4b20      	ldr	r3, [pc, #128]	@ (8003418 <HAL_RTC_Init+0x140>)
 8003396:	430a      	orrs	r2, r1
 8003398:	60da      	str	r2, [r3, #12]

      /* Exit Initialization mode */
      CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800339a:	4b1f      	ldr	r3, [pc, #124]	@ (8003418 <HAL_RTC_Init+0x140>)
 800339c:	68da      	ldr	r2, [r3, #12]
 800339e:	4b1e      	ldr	r3, [pc, #120]	@ (8003418 <HAL_RTC_Init+0x140>)
 80033a0:	2180      	movs	r1, #128	@ 0x80
 80033a2:	438a      	bics	r2, r1
 80033a4:	60da      	str	r2, [r3, #12]

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80033a6:	4b1c      	ldr	r3, [pc, #112]	@ (8003418 <HAL_RTC_Init+0x140>)
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	2220      	movs	r2, #32
 80033ac:	4013      	ands	r3, r2
 80033ae:	d110      	bne.n	80033d2 <HAL_RTC_Init+0xfa>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	0018      	movs	r0, r3
 80033b4:	f000 f836 	bl	8003424 <HAL_RTC_WaitForSynchro>
 80033b8:	1e03      	subs	r3, r0, #0
 80033ba:	d00a      	beq.n	80033d2 <HAL_RTC_Init+0xfa>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033bc:	4b16      	ldr	r3, [pc, #88]	@ (8003418 <HAL_RTC_Init+0x140>)
 80033be:	22ff      	movs	r2, #255	@ 0xff
 80033c0:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	222d      	movs	r2, #45	@ 0x2d
 80033c6:	2104      	movs	r1, #4
 80033c8:	5499      	strb	r1, [r3, r2]
          status = HAL_ERROR;
 80033ca:	230f      	movs	r3, #15
 80033cc:	18fb      	adds	r3, r7, r3
 80033ce:	2201      	movs	r2, #1
 80033d0:	701a      	strb	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 80033d2:	230f      	movs	r3, #15
 80033d4:	18fb      	adds	r3, r7, r3
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d115      	bne.n	8003408 <HAL_RTC_Init+0x130>
      {
        MODIFY_REG(RTC->CR, \
 80033dc:	4b0e      	ldr	r3, [pc, #56]	@ (8003418 <HAL_RTC_Init+0x140>)
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	08d9      	lsrs	r1, r3, #3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a1a      	ldr	r2, [r3, #32]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	69db      	ldr	r3, [r3, #28]
 80033ec:	431a      	orrs	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	431a      	orrs	r2, r3
 80033f4:	4b08      	ldr	r3, [pc, #32]	@ (8003418 <HAL_RTC_Init+0x140>)
 80033f6:	430a      	orrs	r2, r1
 80033f8:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033fa:	4b07      	ldr	r3, [pc, #28]	@ (8003418 <HAL_RTC_Init+0x140>)
 80033fc:	22ff      	movs	r2, #255	@ 0xff
 80033fe:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	222d      	movs	r2, #45	@ 0x2d
 8003404:	2101      	movs	r1, #1
 8003406:	5499      	strb	r1, [r3, r2]
      }
    }
  }

  return status;
 8003408:	230f      	movs	r3, #15
 800340a:	18fb      	adds	r3, r7, r3
 800340c:	781b      	ldrb	r3, [r3, #0]
}
 800340e:	0018      	movs	r0, r3
 8003410:	46bd      	mov	sp, r7
 8003412:	b004      	add	sp, #16
 8003414:	bd80      	pop	{r7, pc}
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	40002800 	.word	0x40002800
 800341c:	fb8fffbf 	.word	0xfb8fffbf
 8003420:	ffffe0ff 	.word	0xffffe0ff

08003424 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(const RTC_HandleTypeDef *hrtc)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800342c:	4b0f      	ldr	r3, [pc, #60]	@ (800346c <HAL_RTC_WaitForSynchro+0x48>)
 800342e:	68da      	ldr	r2, [r3, #12]
 8003430:	4b0e      	ldr	r3, [pc, #56]	@ (800346c <HAL_RTC_WaitForSynchro+0x48>)
 8003432:	2120      	movs	r1, #32
 8003434:	438a      	bics	r2, r1
 8003436:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003438:	f7fd fcbc 	bl	8000db4 <HAL_GetTick>
 800343c:	0003      	movs	r3, r0
 800343e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003440:	e00a      	b.n	8003458 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003442:	f7fd fcb7 	bl	8000db4 <HAL_GetTick>
 8003446:	0002      	movs	r2, r0
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	1ad2      	subs	r2, r2, r3
 800344c:	23fa      	movs	r3, #250	@ 0xfa
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	429a      	cmp	r2, r3
 8003452:	d901      	bls.n	8003458 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e005      	b.n	8003464 <HAL_RTC_WaitForSynchro+0x40>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003458:	4b04      	ldr	r3, [pc, #16]	@ (800346c <HAL_RTC_WaitForSynchro+0x48>)
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	2220      	movs	r2, #32
 800345e:	4013      	ands	r3, r2
 8003460:	d0ef      	beq.n	8003442 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	0018      	movs	r0, r3
 8003466:	46bd      	mov	sp, r7
 8003468:	b004      	add	sp, #16
 800346a:	bd80      	pop	{r7, pc}
 800346c:	40002800 	.word	0x40002800

08003470 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(const RTC_HandleTypeDef *hrtc)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8003478:	4b12      	ldr	r3, [pc, #72]	@ (80034c4 <RTC_EnterInitMode+0x54>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	2240      	movs	r2, #64	@ 0x40
 800347e:	4013      	ands	r3, r2
 8003480:	d11a      	bne.n	80034b8 <RTC_EnterInitMode+0x48>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003482:	4b10      	ldr	r3, [pc, #64]	@ (80034c4 <RTC_EnterInitMode+0x54>)
 8003484:	68da      	ldr	r2, [r3, #12]
 8003486:	4b0f      	ldr	r3, [pc, #60]	@ (80034c4 <RTC_EnterInitMode+0x54>)
 8003488:	2180      	movs	r1, #128	@ 0x80
 800348a:	430a      	orrs	r2, r1
 800348c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800348e:	f7fd fc91 	bl	8000db4 <HAL_GetTick>
 8003492:	0003      	movs	r3, r0
 8003494:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8003496:	e00a      	b.n	80034ae <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003498:	f7fd fc8c 	bl	8000db4 <HAL_GetTick>
 800349c:	0002      	movs	r2, r0
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	1ad2      	subs	r2, r2, r3
 80034a2:	23fa      	movs	r3, #250	@ 0xfa
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d901      	bls.n	80034ae <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e005      	b.n	80034ba <RTC_EnterInitMode+0x4a>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80034ae:	4b05      	ldr	r3, [pc, #20]	@ (80034c4 <RTC_EnterInitMode+0x54>)
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	2240      	movs	r2, #64	@ 0x40
 80034b4:	4013      	ands	r3, r2
 80034b6:	d0ef      	beq.n	8003498 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	0018      	movs	r0, r3
 80034bc:	46bd      	mov	sp, r7
 80034be:	b004      	add	sp, #16
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	46c0      	nop			@ (mov r8, r8)
 80034c4:	40002800 	.word	0x40002800

080034c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e046      	b.n	8003568 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2288      	movs	r2, #136	@ 0x88
 80034de:	589b      	ldr	r3, [r3, r2]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d107      	bne.n	80034f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2284      	movs	r2, #132	@ 0x84
 80034e8:	2100      	movs	r1, #0
 80034ea:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	0018      	movs	r0, r3
 80034f0:	f7fd fb66 	bl	8000bc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2288      	movs	r2, #136	@ 0x88
 80034f8:	2124      	movs	r1, #36	@ 0x24
 80034fa:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2101      	movs	r1, #1
 8003508:	438a      	bics	r2, r1
 800350a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003510:	2b00      	cmp	r3, #0
 8003512:	d003      	beq.n	800351c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	0018      	movs	r0, r3
 8003518:	f000 f9fe 	bl	8003918 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	0018      	movs	r0, r3
 8003520:	f000 f828 	bl	8003574 <UART_SetConfig>
 8003524:	0003      	movs	r3, r0
 8003526:	2b01      	cmp	r3, #1
 8003528:	d101      	bne.n	800352e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e01c      	b.n	8003568 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	490d      	ldr	r1, [pc, #52]	@ (8003570 <HAL_UART_Init+0xa8>)
 800353a:	400a      	ands	r2, r1
 800353c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	212a      	movs	r1, #42	@ 0x2a
 800354a:	438a      	bics	r2, r1
 800354c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2101      	movs	r1, #1
 800355a:	430a      	orrs	r2, r1
 800355c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	0018      	movs	r0, r3
 8003562:	f000 fa8d 	bl	8003a80 <UART_CheckIdleState>
 8003566:	0003      	movs	r3, r0
}
 8003568:	0018      	movs	r0, r3
 800356a:	46bd      	mov	sp, r7
 800356c:	b002      	add	sp, #8
 800356e:	bd80      	pop	{r7, pc}
 8003570:	ffffb7ff 	.word	0xffffb7ff

08003574 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003574:	b5b0      	push	{r4, r5, r7, lr}
 8003576:	b092      	sub	sp, #72	@ 0x48
 8003578:	af00      	add	r7, sp, #0
 800357a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800357c:	231f      	movs	r3, #31
 800357e:	2220      	movs	r2, #32
 8003580:	189b      	adds	r3, r3, r2
 8003582:	19db      	adds	r3, r3, r7
 8003584:	2200      	movs	r2, #0
 8003586:	701a      	strb	r2, [r3, #0]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8003588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4ac8      	ldr	r2, [pc, #800]	@ (80038b0 <UART_SetConfig+0x33c>)
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800358e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003590:	689a      	ldr	r2, [r3, #8]
 8003592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	431a      	orrs	r2, r3
 8003598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	431a      	orrs	r2, r3
 800359e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4ac1      	ldr	r2, [pc, #772]	@ (80038b4 <UART_SetConfig+0x340>)
 80035ae:	4013      	ands	r3, r2
 80035b0:	0019      	movs	r1, r3
 80035b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035b8:	430b      	orrs	r3, r1
 80035ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	4abd      	ldr	r2, [pc, #756]	@ (80038b8 <UART_SetConfig+0x344>)
 80035c4:	4013      	ands	r3, r2
 80035c6:	0018      	movs	r0, r3
 80035c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ca:	68d9      	ldr	r1, [r3, #12]
 80035cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	0003      	movs	r3, r0
 80035d2:	430b      	orrs	r3, r1
 80035d4:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80035dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4ab3      	ldr	r2, [pc, #716]	@ (80038b0 <UART_SetConfig+0x33c>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d00e      	beq.n	8003604 <UART_SetConfig+0x90>
 80035e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4ab4      	ldr	r2, [pc, #720]	@ (80038bc <UART_SetConfig+0x348>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d009      	beq.n	8003604 <UART_SetConfig+0x90>
 80035f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4ab2      	ldr	r2, [pc, #712]	@ (80038c0 <UART_SetConfig+0x34c>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d004      	beq.n	8003604 <UART_SetConfig+0x90>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003600:	4313      	orrs	r3, r2
 8003602:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	4aae      	ldr	r2, [pc, #696]	@ (80038c4 <UART_SetConfig+0x350>)
 800360c:	4013      	ands	r3, r2
 800360e:	0019      	movs	r1, r3
 8003610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003616:	430b      	orrs	r3, r1
 8003618:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800361a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003620:	220f      	movs	r2, #15
 8003622:	4393      	bics	r3, r2
 8003624:	0018      	movs	r0, r3
 8003626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003628:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800362a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	0003      	movs	r3, r0
 8003630:	430b      	orrs	r3, r1
 8003632:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4aa3      	ldr	r2, [pc, #652]	@ (80038c8 <UART_SetConfig+0x354>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d102      	bne.n	8003644 <UART_SetConfig+0xd0>
 800363e:	2301      	movs	r3, #1
 8003640:	643b      	str	r3, [r7, #64]	@ 0x40
 8003642:	e033      	b.n	80036ac <UART_SetConfig+0x138>
 8003644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4aa0      	ldr	r2, [pc, #640]	@ (80038cc <UART_SetConfig+0x358>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d102      	bne.n	8003654 <UART_SetConfig+0xe0>
 800364e:	2302      	movs	r3, #2
 8003650:	643b      	str	r3, [r7, #64]	@ 0x40
 8003652:	e02b      	b.n	80036ac <UART_SetConfig+0x138>
 8003654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a9d      	ldr	r2, [pc, #628]	@ (80038d0 <UART_SetConfig+0x35c>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d103      	bne.n	8003666 <UART_SetConfig+0xf2>
 800365e:	2380      	movs	r3, #128	@ 0x80
 8003660:	025b      	lsls	r3, r3, #9
 8003662:	643b      	str	r3, [r7, #64]	@ 0x40
 8003664:	e022      	b.n	80036ac <UART_SetConfig+0x138>
 8003666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a9a      	ldr	r2, [pc, #616]	@ (80038d4 <UART_SetConfig+0x360>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d103      	bne.n	8003678 <UART_SetConfig+0x104>
 8003670:	2380      	movs	r3, #128	@ 0x80
 8003672:	029b      	lsls	r3, r3, #10
 8003674:	643b      	str	r3, [r7, #64]	@ 0x40
 8003676:	e019      	b.n	80036ac <UART_SetConfig+0x138>
 8003678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a8c      	ldr	r2, [pc, #560]	@ (80038b0 <UART_SetConfig+0x33c>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d102      	bne.n	8003688 <UART_SetConfig+0x114>
 8003682:	2310      	movs	r3, #16
 8003684:	643b      	str	r3, [r7, #64]	@ 0x40
 8003686:	e011      	b.n	80036ac <UART_SetConfig+0x138>
 8003688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a8b      	ldr	r2, [pc, #556]	@ (80038bc <UART_SetConfig+0x348>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d102      	bne.n	8003698 <UART_SetConfig+0x124>
 8003692:	2308      	movs	r3, #8
 8003694:	643b      	str	r3, [r7, #64]	@ 0x40
 8003696:	e009      	b.n	80036ac <UART_SetConfig+0x138>
 8003698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a88      	ldr	r2, [pc, #544]	@ (80038c0 <UART_SetConfig+0x34c>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d102      	bne.n	80036a8 <UART_SetConfig+0x134>
 80036a2:	2304      	movs	r3, #4
 80036a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80036a6:	e001      	b.n	80036ac <UART_SetConfig+0x138>
 80036a8:	2300      	movs	r3, #0
 80036aa:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80036ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a7f      	ldr	r2, [pc, #508]	@ (80038b0 <UART_SetConfig+0x33c>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d00a      	beq.n	80036cc <UART_SetConfig+0x158>
 80036b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a80      	ldr	r2, [pc, #512]	@ (80038bc <UART_SetConfig+0x348>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d005      	beq.n	80036cc <UART_SetConfig+0x158>
 80036c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a7e      	ldr	r2, [pc, #504]	@ (80038c0 <UART_SetConfig+0x34c>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d000      	beq.n	80036cc <UART_SetConfig+0x158>
 80036ca:	e06f      	b.n	80037ac <UART_SetConfig+0x238>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80036cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036ce:	0018      	movs	r0, r3
 80036d0:	f7fe fff8 	bl	80026c4 <HAL_RCCEx_GetPeriphCLKFreq>
 80036d4:	0003      	movs	r3, r0
 80036d6:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* If proper clock source reported */
    if (pclk != 0U)
 80036d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d100      	bne.n	80036e0 <UART_SetConfig+0x16c>
 80036de:	e103      	b.n	80038e8 <UART_SetConfig+0x374>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80036e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80036e4:	4b7c      	ldr	r3, [pc, #496]	@ (80038d8 <UART_SetConfig+0x364>)
 80036e6:	0052      	lsls	r2, r2, #1
 80036e8:	5ad3      	ldrh	r3, [r2, r3]
 80036ea:	0019      	movs	r1, r3
 80036ec:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80036ee:	f7fc fd0b 	bl	8000108 <__udivsi3>
 80036f2:	0003      	movs	r3, r0
 80036f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80036f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f8:	685a      	ldr	r2, [r3, #4]
 80036fa:	0013      	movs	r3, r2
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	189b      	adds	r3, r3, r2
 8003700:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003702:	429a      	cmp	r2, r3
 8003704:	d305      	bcc.n	8003712 <UART_SetConfig+0x19e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800370c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800370e:	429a      	cmp	r2, r3
 8003710:	d906      	bls.n	8003720 <UART_SetConfig+0x1ac>
      {
        ret = HAL_ERROR;
 8003712:	231f      	movs	r3, #31
 8003714:	2220      	movs	r2, #32
 8003716:	189b      	adds	r3, r3, r2
 8003718:	19db      	adds	r3, r3, r7
 800371a:	2201      	movs	r2, #1
 800371c:	701a      	strb	r2, [r3, #0]
 800371e:	e044      	b.n	80037aa <UART_SetConfig+0x236>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003722:	61bb      	str	r3, [r7, #24]
 8003724:	2300      	movs	r3, #0
 8003726:	61fb      	str	r3, [r7, #28]
 8003728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800372c:	4b6a      	ldr	r3, [pc, #424]	@ (80038d8 <UART_SetConfig+0x364>)
 800372e:	0052      	lsls	r2, r2, #1
 8003730:	5ad3      	ldrh	r3, [r2, r3]
 8003732:	613b      	str	r3, [r7, #16]
 8003734:	2300      	movs	r3, #0
 8003736:	617b      	str	r3, [r7, #20]
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	69b8      	ldr	r0, [r7, #24]
 800373e:	69f9      	ldr	r1, [r7, #28]
 8003740:	f7fc fe58 	bl	80003f4 <__aeabi_uldivmod>
 8003744:	0002      	movs	r2, r0
 8003746:	000b      	movs	r3, r1
 8003748:	0e11      	lsrs	r1, r2, #24
 800374a:	021d      	lsls	r5, r3, #8
 800374c:	430d      	orrs	r5, r1
 800374e:	0214      	lsls	r4, r2, #8
 8003750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	085b      	lsrs	r3, r3, #1
 8003756:	60bb      	str	r3, [r7, #8]
 8003758:	2300      	movs	r3, #0
 800375a:	60fb      	str	r3, [r7, #12]
 800375c:	68b8      	ldr	r0, [r7, #8]
 800375e:	68f9      	ldr	r1, [r7, #12]
 8003760:	1900      	adds	r0, r0, r4
 8003762:	4169      	adcs	r1, r5
 8003764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	603b      	str	r3, [r7, #0]
 800376a:	2300      	movs	r3, #0
 800376c:	607b      	str	r3, [r7, #4]
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f7fc fe3f 	bl	80003f4 <__aeabi_uldivmod>
 8003776:	0002      	movs	r2, r0
 8003778:	000b      	movs	r3, r1
 800377a:	0013      	movs	r3, r2
 800377c:	637b      	str	r3, [r7, #52]	@ 0x34
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800377e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003780:	23c0      	movs	r3, #192	@ 0xc0
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	429a      	cmp	r2, r3
 8003786:	d309      	bcc.n	800379c <UART_SetConfig+0x228>
 8003788:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800378a:	2380      	movs	r3, #128	@ 0x80
 800378c:	035b      	lsls	r3, r3, #13
 800378e:	429a      	cmp	r2, r3
 8003790:	d204      	bcs.n	800379c <UART_SetConfig+0x228>
        {
          huart->Instance->BRR = usartdiv;
 8003792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003798:	60da      	str	r2, [r3, #12]
 800379a:	e006      	b.n	80037aa <UART_SetConfig+0x236>
        }
        else
        {
          ret = HAL_ERROR;
 800379c:	231f      	movs	r3, #31
 800379e:	2220      	movs	r2, #32
 80037a0:	189b      	adds	r3, r3, r2
 80037a2:	19db      	adds	r3, r3, r7
 80037a4:	2201      	movs	r2, #1
 80037a6:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 80037a8:	e09e      	b.n	80038e8 <UART_SetConfig+0x374>
 80037aa:	e09d      	b.n	80038e8 <UART_SetConfig+0x374>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ae:	69da      	ldr	r2, [r3, #28]
 80037b0:	2380      	movs	r3, #128	@ 0x80
 80037b2:	021b      	lsls	r3, r3, #8
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d14c      	bne.n	8003852 <UART_SetConfig+0x2de>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80037b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037ba:	0018      	movs	r0, r3
 80037bc:	f7fe ff82 	bl	80026c4 <HAL_RCCEx_GetPeriphCLKFreq>
 80037c0:	0003      	movs	r3, r0
 80037c2:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d100      	bne.n	80037cc <UART_SetConfig+0x258>
 80037ca:	e08d      	b.n	80038e8 <UART_SetConfig+0x374>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037d0:	4b41      	ldr	r3, [pc, #260]	@ (80038d8 <UART_SetConfig+0x364>)
 80037d2:	0052      	lsls	r2, r2, #1
 80037d4:	5ad3      	ldrh	r3, [r2, r3]
 80037d6:	0019      	movs	r1, r3
 80037d8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80037da:	f7fc fc95 	bl	8000108 <__udivsi3>
 80037de:	0003      	movs	r3, r0
 80037e0:	005a      	lsls	r2, r3, #1
 80037e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	085b      	lsrs	r3, r3, #1
 80037e8:	18d2      	adds	r2, r2, r3
 80037ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	0019      	movs	r1, r3
 80037f0:	0010      	movs	r0, r2
 80037f2:	f7fc fc89 	bl	8000108 <__udivsi3>
 80037f6:	0003      	movs	r3, r0
 80037f8:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037fc:	2b0f      	cmp	r3, #15
 80037fe:	d921      	bls.n	8003844 <UART_SetConfig+0x2d0>
 8003800:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003802:	2380      	movs	r3, #128	@ 0x80
 8003804:	025b      	lsls	r3, r3, #9
 8003806:	429a      	cmp	r2, r3
 8003808:	d21c      	bcs.n	8003844 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800380a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800380c:	b29a      	uxth	r2, r3
 800380e:	2012      	movs	r0, #18
 8003810:	2420      	movs	r4, #32
 8003812:	1903      	adds	r3, r0, r4
 8003814:	19db      	adds	r3, r3, r7
 8003816:	210f      	movs	r1, #15
 8003818:	438a      	bics	r2, r1
 800381a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800381c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800381e:	085b      	lsrs	r3, r3, #1
 8003820:	b29b      	uxth	r3, r3
 8003822:	2207      	movs	r2, #7
 8003824:	4013      	ands	r3, r2
 8003826:	b299      	uxth	r1, r3
 8003828:	1903      	adds	r3, r0, r4
 800382a:	19db      	adds	r3, r3, r7
 800382c:	1902      	adds	r2, r0, r4
 800382e:	19d2      	adds	r2, r2, r7
 8003830:	8812      	ldrh	r2, [r2, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	1902      	adds	r2, r0, r4
 800383c:	19d2      	adds	r2, r2, r7
 800383e:	8812      	ldrh	r2, [r2, #0]
 8003840:	60da      	str	r2, [r3, #12]
 8003842:	e051      	b.n	80038e8 <UART_SetConfig+0x374>
      }
      else
      {
        ret = HAL_ERROR;
 8003844:	231f      	movs	r3, #31
 8003846:	2220      	movs	r2, #32
 8003848:	189b      	adds	r3, r3, r2
 800384a:	19db      	adds	r3, r3, r7
 800384c:	2201      	movs	r2, #1
 800384e:	701a      	strb	r2, [r3, #0]
 8003850:	e04a      	b.n	80038e8 <UART_SetConfig+0x374>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8003852:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003854:	0018      	movs	r0, r3
 8003856:	f7fe ff35 	bl	80026c4 <HAL_RCCEx_GetPeriphCLKFreq>
 800385a:	0003      	movs	r3, r0
 800385c:	63bb      	str	r3, [r7, #56]	@ 0x38

    if (pclk != 0U)
 800385e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003860:	2b00      	cmp	r3, #0
 8003862:	d041      	beq.n	80038e8 <UART_SetConfig+0x374>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003866:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003868:	4b1b      	ldr	r3, [pc, #108]	@ (80038d8 <UART_SetConfig+0x364>)
 800386a:	0052      	lsls	r2, r2, #1
 800386c:	5ad3      	ldrh	r3, [r2, r3]
 800386e:	0019      	movs	r1, r3
 8003870:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003872:	f7fc fc49 	bl	8000108 <__udivsi3>
 8003876:	0003      	movs	r3, r0
 8003878:	001a      	movs	r2, r3
 800387a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	085b      	lsrs	r3, r3, #1
 8003880:	18d2      	adds	r2, r2, r3
 8003882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	0019      	movs	r1, r3
 8003888:	0010      	movs	r0, r2
 800388a:	f7fc fc3d 	bl	8000108 <__udivsi3>
 800388e:	0003      	movs	r3, r0
 8003890:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003894:	2b0f      	cmp	r3, #15
 8003896:	d921      	bls.n	80038dc <UART_SetConfig+0x368>
 8003898:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800389a:	2380      	movs	r3, #128	@ 0x80
 800389c:	025b      	lsls	r3, r3, #9
 800389e:	429a      	cmp	r2, r3
 80038a0:	d21c      	bcs.n	80038dc <UART_SetConfig+0x368>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80038a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	60da      	str	r2, [r3, #12]
 80038ac:	e01c      	b.n	80038e8 <UART_SetConfig+0x374>
 80038ae:	46c0      	nop			@ (mov r8, r8)
 80038b0:	40008000 	.word	0x40008000
 80038b4:	cfff69f3 	.word	0xcfff69f3
 80038b8:	ffffcfff 	.word	0xffffcfff
 80038bc:	40008400 	.word	0x40008400
 80038c0:	40008c00 	.word	0x40008c00
 80038c4:	11fff4ff 	.word	0x11fff4ff
 80038c8:	40013800 	.word	0x40013800
 80038cc:	40004400 	.word	0x40004400
 80038d0:	40004800 	.word	0x40004800
 80038d4:	40004c00 	.word	0x40004c00
 80038d8:	080040f0 	.word	0x080040f0
      }
      else
      {
        ret = HAL_ERROR;
 80038dc:	231f      	movs	r3, #31
 80038de:	2220      	movs	r2, #32
 80038e0:	189b      	adds	r3, r3, r2
 80038e2:	19db      	adds	r3, r3, r7
 80038e4:	2201      	movs	r2, #1
 80038e6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80038e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ea:	226a      	movs	r2, #106	@ 0x6a
 80038ec:	2101      	movs	r1, #1
 80038ee:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80038f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f2:	2268      	movs	r2, #104	@ 0x68
 80038f4:	2101      	movs	r1, #1
 80038f6:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fa:	2200      	movs	r2, #0
 80038fc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80038fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003900:	2200      	movs	r2, #0
 8003902:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003904:	231f      	movs	r3, #31
 8003906:	2220      	movs	r2, #32
 8003908:	189b      	adds	r3, r3, r2
 800390a:	19db      	adds	r3, r3, r7
 800390c:	781b      	ldrb	r3, [r3, #0]
}
 800390e:	0018      	movs	r0, r3
 8003910:	46bd      	mov	sp, r7
 8003912:	b012      	add	sp, #72	@ 0x48
 8003914:	bdb0      	pop	{r4, r5, r7, pc}
 8003916:	46c0      	nop			@ (mov r8, r8)

08003918 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003924:	2208      	movs	r2, #8
 8003926:	4013      	ands	r3, r2
 8003928:	d00b      	beq.n	8003942 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	4a4a      	ldr	r2, [pc, #296]	@ (8003a5c <UART_AdvFeatureConfig+0x144>)
 8003932:	4013      	ands	r3, r2
 8003934:	0019      	movs	r1, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003946:	2201      	movs	r2, #1
 8003948:	4013      	ands	r3, r2
 800394a:	d00b      	beq.n	8003964 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	4a43      	ldr	r2, [pc, #268]	@ (8003a60 <UART_AdvFeatureConfig+0x148>)
 8003954:	4013      	ands	r3, r2
 8003956:	0019      	movs	r1, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003968:	2202      	movs	r2, #2
 800396a:	4013      	ands	r3, r2
 800396c:	d00b      	beq.n	8003986 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	4a3b      	ldr	r2, [pc, #236]	@ (8003a64 <UART_AdvFeatureConfig+0x14c>)
 8003976:	4013      	ands	r3, r2
 8003978:	0019      	movs	r1, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800398a:	2204      	movs	r2, #4
 800398c:	4013      	ands	r3, r2
 800398e:	d00b      	beq.n	80039a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	4a34      	ldr	r2, [pc, #208]	@ (8003a68 <UART_AdvFeatureConfig+0x150>)
 8003998:	4013      	ands	r3, r2
 800399a:	0019      	movs	r1, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ac:	2210      	movs	r2, #16
 80039ae:	4013      	ands	r3, r2
 80039b0:	d00b      	beq.n	80039ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	4a2c      	ldr	r2, [pc, #176]	@ (8003a6c <UART_AdvFeatureConfig+0x154>)
 80039ba:	4013      	ands	r3, r2
 80039bc:	0019      	movs	r1, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ce:	2220      	movs	r2, #32
 80039d0:	4013      	ands	r3, r2
 80039d2:	d00b      	beq.n	80039ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	4a25      	ldr	r2, [pc, #148]	@ (8003a70 <UART_AdvFeatureConfig+0x158>)
 80039dc:	4013      	ands	r3, r2
 80039de:	0019      	movs	r1, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	430a      	orrs	r2, r1
 80039ea:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f0:	2240      	movs	r2, #64	@ 0x40
 80039f2:	4013      	ands	r3, r2
 80039f4:	d01d      	beq.n	8003a32 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003a74 <UART_AdvFeatureConfig+0x15c>)
 80039fe:	4013      	ands	r3, r2
 8003a00:	0019      	movs	r1, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a12:	2380      	movs	r3, #128	@ 0x80
 8003a14:	035b      	lsls	r3, r3, #13
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d10b      	bne.n	8003a32 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	4a15      	ldr	r2, [pc, #84]	@ (8003a78 <UART_AdvFeatureConfig+0x160>)
 8003a22:	4013      	ands	r3, r2
 8003a24:	0019      	movs	r1, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a36:	2280      	movs	r2, #128	@ 0x80
 8003a38:	4013      	ands	r3, r2
 8003a3a:	d00b      	beq.n	8003a54 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	4a0e      	ldr	r2, [pc, #56]	@ (8003a7c <UART_AdvFeatureConfig+0x164>)
 8003a44:	4013      	ands	r3, r2
 8003a46:	0019      	movs	r1, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	430a      	orrs	r2, r1
 8003a52:	605a      	str	r2, [r3, #4]
  }
}
 8003a54:	46c0      	nop			@ (mov r8, r8)
 8003a56:	46bd      	mov	sp, r7
 8003a58:	b002      	add	sp, #8
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	ffff7fff 	.word	0xffff7fff
 8003a60:	fffdffff 	.word	0xfffdffff
 8003a64:	fffeffff 	.word	0xfffeffff
 8003a68:	fffbffff 	.word	0xfffbffff
 8003a6c:	ffffefff 	.word	0xffffefff
 8003a70:	ffffdfff 	.word	0xffffdfff
 8003a74:	ffefffff 	.word	0xffefffff
 8003a78:	ff9fffff 	.word	0xff9fffff
 8003a7c:	fff7ffff 	.word	0xfff7ffff

08003a80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b092      	sub	sp, #72	@ 0x48
 8003a84:	af02      	add	r7, sp, #8
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2290      	movs	r2, #144	@ 0x90
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a90:	f7fd f990 	bl	8000db4 <HAL_GetTick>
 8003a94:	0003      	movs	r3, r0
 8003a96:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2208      	movs	r2, #8
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	2b08      	cmp	r3, #8
 8003aa4:	d12d      	bne.n	8003b02 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003aa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003aa8:	2280      	movs	r2, #128	@ 0x80
 8003aaa:	0391      	lsls	r1, r2, #14
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	4a47      	ldr	r2, [pc, #284]	@ (8003bcc <UART_CheckIdleState+0x14c>)
 8003ab0:	9200      	str	r2, [sp, #0]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f000 f88e 	bl	8003bd4 <UART_WaitOnFlagUntilTimeout>
 8003ab8:	1e03      	subs	r3, r0, #0
 8003aba:	d022      	beq.n	8003b02 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003abc:	f3ef 8310 	mrs	r3, PRIMASK
 8003ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003ac4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003acc:	f383 8810 	msr	PRIMASK, r3
}
 8003ad0:	46c0      	nop			@ (mov r8, r8)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2180      	movs	r1, #128	@ 0x80
 8003ade:	438a      	bics	r2, r1
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ae8:	f383 8810 	msr	PRIMASK, r3
}
 8003aec:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2288      	movs	r2, #136	@ 0x88
 8003af2:	2120      	movs	r1, #32
 8003af4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2284      	movs	r2, #132	@ 0x84
 8003afa:	2100      	movs	r1, #0
 8003afc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e060      	b.n	8003bc4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2204      	movs	r2, #4
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	2b04      	cmp	r3, #4
 8003b0e:	d146      	bne.n	8003b9e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b12:	2280      	movs	r2, #128	@ 0x80
 8003b14:	03d1      	lsls	r1, r2, #15
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	4a2c      	ldr	r2, [pc, #176]	@ (8003bcc <UART_CheckIdleState+0x14c>)
 8003b1a:	9200      	str	r2, [sp, #0]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f000 f859 	bl	8003bd4 <UART_WaitOnFlagUntilTimeout>
 8003b22:	1e03      	subs	r3, r0, #0
 8003b24:	d03b      	beq.n	8003b9e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003b26:	f3ef 8310 	mrs	r3, PRIMASK
 8003b2a:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003b2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b30:	2301      	movs	r3, #1
 8003b32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	f383 8810 	msr	PRIMASK, r3
}
 8003b3a:	46c0      	nop			@ (mov r8, r8)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4922      	ldr	r1, [pc, #136]	@ (8003bd0 <UART_CheckIdleState+0x150>)
 8003b48:	400a      	ands	r2, r1
 8003b4a:	601a      	str	r2, [r3, #0]
 8003b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f383 8810 	msr	PRIMASK, r3
}
 8003b56:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003b58:	f3ef 8310 	mrs	r3, PRIMASK
 8003b5c:	61bb      	str	r3, [r7, #24]
  return(result);
 8003b5e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b60:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b62:	2301      	movs	r3, #1
 8003b64:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	f383 8810 	msr	PRIMASK, r3
}
 8003b6c:	46c0      	nop			@ (mov r8, r8)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2101      	movs	r1, #1
 8003b7a:	438a      	bics	r2, r1
 8003b7c:	609a      	str	r2, [r3, #8]
 8003b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b80:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b82:	6a3b      	ldr	r3, [r7, #32]
 8003b84:	f383 8810 	msr	PRIMASK, r3
}
 8003b88:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	228c      	movs	r2, #140	@ 0x8c
 8003b8e:	2120      	movs	r1, #32
 8003b90:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2284      	movs	r2, #132	@ 0x84
 8003b96:	2100      	movs	r1, #0
 8003b98:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e012      	b.n	8003bc4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2288      	movs	r2, #136	@ 0x88
 8003ba2:	2120      	movs	r1, #32
 8003ba4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	228c      	movs	r2, #140	@ 0x8c
 8003baa:	2120      	movs	r1, #32
 8003bac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2284      	movs	r2, #132	@ 0x84
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	0018      	movs	r0, r3
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	b010      	add	sp, #64	@ 0x40
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	01ffffff 	.word	0x01ffffff
 8003bd0:	fffffedf 	.word	0xfffffedf

08003bd4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	603b      	str	r3, [r7, #0]
 8003be0:	1dfb      	adds	r3, r7, #7
 8003be2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003be4:	e051      	b.n	8003c8a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	3301      	adds	r3, #1
 8003bea:	d04e      	beq.n	8003c8a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bec:	f7fd f8e2 	bl	8000db4 <HAL_GetTick>
 8003bf0:	0002      	movs	r2, r0
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d302      	bcc.n	8003c02 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e051      	b.n	8003caa <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2204      	movs	r2, #4
 8003c0e:	4013      	ands	r3, r2
 8003c10:	d03b      	beq.n	8003c8a <UART_WaitOnFlagUntilTimeout+0xb6>
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	2b80      	cmp	r3, #128	@ 0x80
 8003c16:	d038      	beq.n	8003c8a <UART_WaitOnFlagUntilTimeout+0xb6>
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	2b40      	cmp	r3, #64	@ 0x40
 8003c1c:	d035      	beq.n	8003c8a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	69db      	ldr	r3, [r3, #28]
 8003c24:	2208      	movs	r2, #8
 8003c26:	4013      	ands	r3, r2
 8003c28:	2b08      	cmp	r3, #8
 8003c2a:	d111      	bne.n	8003c50 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2208      	movs	r2, #8
 8003c32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	0018      	movs	r0, r3
 8003c38:	f000 f83c 	bl	8003cb4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2290      	movs	r2, #144	@ 0x90
 8003c40:	2108      	movs	r1, #8
 8003c42:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2284      	movs	r2, #132	@ 0x84
 8003c48:	2100      	movs	r1, #0
 8003c4a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e02c      	b.n	8003caa <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	69da      	ldr	r2, [r3, #28]
 8003c56:	2380      	movs	r3, #128	@ 0x80
 8003c58:	011b      	lsls	r3, r3, #4
 8003c5a:	401a      	ands	r2, r3
 8003c5c:	2380      	movs	r3, #128	@ 0x80
 8003c5e:	011b      	lsls	r3, r3, #4
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d112      	bne.n	8003c8a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2280      	movs	r2, #128	@ 0x80
 8003c6a:	0112      	lsls	r2, r2, #4
 8003c6c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	0018      	movs	r0, r3
 8003c72:	f000 f81f 	bl	8003cb4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2290      	movs	r2, #144	@ 0x90
 8003c7a:	2120      	movs	r1, #32
 8003c7c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2284      	movs	r2, #132	@ 0x84
 8003c82:	2100      	movs	r1, #0
 8003c84:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e00f      	b.n	8003caa <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	69db      	ldr	r3, [r3, #28]
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	4013      	ands	r3, r2
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	425a      	negs	r2, r3
 8003c9a:	4153      	adcs	r3, r2
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	001a      	movs	r2, r3
 8003ca0:	1dfb      	adds	r3, r7, #7
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d09e      	beq.n	8003be6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	0018      	movs	r0, r3
 8003cac:	46bd      	mov	sp, r7
 8003cae:	b004      	add	sp, #16
 8003cb0:	bd80      	pop	{r7, pc}
	...

08003cb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b08e      	sub	sp, #56	@ 0x38
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003cbc:	f3ef 8310 	mrs	r3, PRIMASK
 8003cc0:	617b      	str	r3, [r7, #20]
  return(result);
 8003cc2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003cc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	f383 8810 	msr	PRIMASK, r3
}
 8003cd0:	46c0      	nop			@ (mov r8, r8)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4926      	ldr	r1, [pc, #152]	@ (8003d78 <UART_EndRxTransfer+0xc4>)
 8003cde:	400a      	ands	r2, r1
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ce4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	f383 8810 	msr	PRIMASK, r3
}
 8003cec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003cee:	f3ef 8310 	mrs	r3, PRIMASK
 8003cf2:	623b      	str	r3, [r7, #32]
  return(result);
 8003cf4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003cf6:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfe:	f383 8810 	msr	PRIMASK, r3
}
 8003d02:	46c0      	nop			@ (mov r8, r8)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689a      	ldr	r2, [r3, #8]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	491b      	ldr	r1, [pc, #108]	@ (8003d7c <UART_EndRxTransfer+0xc8>)
 8003d10:	400a      	ands	r2, r1
 8003d12:	609a      	str	r2, [r3, #8]
 8003d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d16:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d1a:	f383 8810 	msr	PRIMASK, r3
}
 8003d1e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d118      	bne.n	8003d5a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003d28:	f3ef 8310 	mrs	r3, PRIMASK
 8003d2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d2e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d32:	2301      	movs	r3, #1
 8003d34:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f383 8810 	msr	PRIMASK, r3
}
 8003d3c:	46c0      	nop			@ (mov r8, r8)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2110      	movs	r1, #16
 8003d4a:	438a      	bics	r2, r1
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	f383 8810 	msr	PRIMASK, r3
}
 8003d58:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	228c      	movs	r2, #140	@ 0x8c
 8003d5e:	2120      	movs	r1, #32
 8003d60:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003d6e:	46c0      	nop			@ (mov r8, r8)
 8003d70:	46bd      	mov	sp, r7
 8003d72:	b00e      	add	sp, #56	@ 0x38
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	46c0      	nop			@ (mov r8, r8)
 8003d78:	fffffedf 	.word	0xfffffedf
 8003d7c:	effffffe 	.word	0xeffffffe

08003d80 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2284      	movs	r2, #132	@ 0x84
 8003d8c:	5c9b      	ldrb	r3, [r3, r2]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d101      	bne.n	8003d96 <HAL_UARTEx_DisableFifoMode+0x16>
 8003d92:	2302      	movs	r3, #2
 8003d94:	e027      	b.n	8003de6 <HAL_UARTEx_DisableFifoMode+0x66>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2284      	movs	r2, #132	@ 0x84
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2288      	movs	r2, #136	@ 0x88
 8003da2:	2124      	movs	r1, #36	@ 0x24
 8003da4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2101      	movs	r1, #1
 8003dba:	438a      	bics	r2, r1
 8003dbc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	4a0b      	ldr	r2, [pc, #44]	@ (8003df0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2288      	movs	r2, #136	@ 0x88
 8003dd8:	2120      	movs	r1, #32
 8003dda:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2284      	movs	r2, #132	@ 0x84
 8003de0:	2100      	movs	r1, #0
 8003de2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	0018      	movs	r0, r3
 8003de8:	46bd      	mov	sp, r7
 8003dea:	b004      	add	sp, #16
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	46c0      	nop			@ (mov r8, r8)
 8003df0:	dfffffff 	.word	0xdfffffff

08003df4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2284      	movs	r2, #132	@ 0x84
 8003e02:	5c9b      	ldrb	r3, [r3, r2]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d101      	bne.n	8003e0c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003e08:	2302      	movs	r3, #2
 8003e0a:	e02e      	b.n	8003e6a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2284      	movs	r2, #132	@ 0x84
 8003e10:	2101      	movs	r1, #1
 8003e12:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2288      	movs	r2, #136	@ 0x88
 8003e18:	2124      	movs	r1, #36	@ 0x24
 8003e1a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2101      	movs	r1, #1
 8003e30:	438a      	bics	r2, r1
 8003e32:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	08d9      	lsrs	r1, r3, #3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	430a      	orrs	r2, r1
 8003e46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	0018      	movs	r0, r3
 8003e4c:	f000 f854 	bl	8003ef8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2288      	movs	r2, #136	@ 0x88
 8003e5c:	2120      	movs	r1, #32
 8003e5e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2284      	movs	r2, #132	@ 0x84
 8003e64:	2100      	movs	r1, #0
 8003e66:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	b004      	add	sp, #16
 8003e70:	bd80      	pop	{r7, pc}
	...

08003e74 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2284      	movs	r2, #132	@ 0x84
 8003e82:	5c9b      	ldrb	r3, [r3, r2]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d101      	bne.n	8003e8c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	e02f      	b.n	8003eec <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2284      	movs	r2, #132	@ 0x84
 8003e90:	2101      	movs	r1, #1
 8003e92:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2288      	movs	r2, #136	@ 0x88
 8003e98:	2124      	movs	r1, #36	@ 0x24
 8003e9a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2101      	movs	r1, #1
 8003eb0:	438a      	bics	r2, r1
 8003eb2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	4a0e      	ldr	r2, [pc, #56]	@ (8003ef4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	0019      	movs	r1, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	0018      	movs	r0, r3
 8003ece:	f000 f813 	bl	8003ef8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2288      	movs	r2, #136	@ 0x88
 8003ede:	2120      	movs	r1, #32
 8003ee0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2284      	movs	r2, #132	@ 0x84
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	0018      	movs	r0, r3
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	b004      	add	sp, #16
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	f1ffffff 	.word	0xf1ffffff

08003ef8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d108      	bne.n	8003f1a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	226a      	movs	r2, #106	@ 0x6a
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2268      	movs	r2, #104	@ 0x68
 8003f14:	2101      	movs	r1, #1
 8003f16:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003f18:	e043      	b.n	8003fa2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003f1a:	260f      	movs	r6, #15
 8003f1c:	19bb      	adds	r3, r7, r6
 8003f1e:	2208      	movs	r2, #8
 8003f20:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003f22:	200e      	movs	r0, #14
 8003f24:	183b      	adds	r3, r7, r0
 8003f26:	2208      	movs	r2, #8
 8003f28:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	0e5b      	lsrs	r3, r3, #25
 8003f32:	b2da      	uxtb	r2, r3
 8003f34:	240d      	movs	r4, #13
 8003f36:	193b      	adds	r3, r7, r4
 8003f38:	2107      	movs	r1, #7
 8003f3a:	400a      	ands	r2, r1
 8003f3c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	0f5b      	lsrs	r3, r3, #29
 8003f46:	b2da      	uxtb	r2, r3
 8003f48:	250c      	movs	r5, #12
 8003f4a:	197b      	adds	r3, r7, r5
 8003f4c:	2107      	movs	r1, #7
 8003f4e:	400a      	ands	r2, r1
 8003f50:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003f52:	183b      	adds	r3, r7, r0
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	197a      	adds	r2, r7, r5
 8003f58:	7812      	ldrb	r2, [r2, #0]
 8003f5a:	4914      	ldr	r1, [pc, #80]	@ (8003fac <UARTEx_SetNbDataToProcess+0xb4>)
 8003f5c:	5c8a      	ldrb	r2, [r1, r2]
 8003f5e:	435a      	muls	r2, r3
 8003f60:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003f62:	197b      	adds	r3, r7, r5
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	4a12      	ldr	r2, [pc, #72]	@ (8003fb0 <UARTEx_SetNbDataToProcess+0xb8>)
 8003f68:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003f6a:	0019      	movs	r1, r3
 8003f6c:	f7fc f956 	bl	800021c <__divsi3>
 8003f70:	0003      	movs	r3, r0
 8003f72:	b299      	uxth	r1, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	226a      	movs	r2, #106	@ 0x6a
 8003f78:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003f7a:	19bb      	adds	r3, r7, r6
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	193a      	adds	r2, r7, r4
 8003f80:	7812      	ldrb	r2, [r2, #0]
 8003f82:	490a      	ldr	r1, [pc, #40]	@ (8003fac <UARTEx_SetNbDataToProcess+0xb4>)
 8003f84:	5c8a      	ldrb	r2, [r1, r2]
 8003f86:	435a      	muls	r2, r3
 8003f88:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003f8a:	193b      	adds	r3, r7, r4
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	4a08      	ldr	r2, [pc, #32]	@ (8003fb0 <UARTEx_SetNbDataToProcess+0xb8>)
 8003f90:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003f92:	0019      	movs	r1, r3
 8003f94:	f7fc f942 	bl	800021c <__divsi3>
 8003f98:	0003      	movs	r3, r0
 8003f9a:	b299      	uxth	r1, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2268      	movs	r2, #104	@ 0x68
 8003fa0:	5299      	strh	r1, [r3, r2]
}
 8003fa2:	46c0      	nop			@ (mov r8, r8)
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	b005      	add	sp, #20
 8003fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003faa:	46c0      	nop			@ (mov r8, r8)
 8003fac:	08004108 	.word	0x08004108
 8003fb0:	08004110 	.word	0x08004110

08003fb4 <memset>:
 8003fb4:	0003      	movs	r3, r0
 8003fb6:	1882      	adds	r2, r0, r2
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d100      	bne.n	8003fbe <memset+0xa>
 8003fbc:	4770      	bx	lr
 8003fbe:	7019      	strb	r1, [r3, #0]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	e7f9      	b.n	8003fb8 <memset+0x4>

08003fc4 <__libc_init_array>:
 8003fc4:	b570      	push	{r4, r5, r6, lr}
 8003fc6:	2600      	movs	r6, #0
 8003fc8:	4c0c      	ldr	r4, [pc, #48]	@ (8003ffc <__libc_init_array+0x38>)
 8003fca:	4d0d      	ldr	r5, [pc, #52]	@ (8004000 <__libc_init_array+0x3c>)
 8003fcc:	1b64      	subs	r4, r4, r5
 8003fce:	10a4      	asrs	r4, r4, #2
 8003fd0:	42a6      	cmp	r6, r4
 8003fd2:	d109      	bne.n	8003fe8 <__libc_init_array+0x24>
 8003fd4:	2600      	movs	r6, #0
 8003fd6:	f000 f819 	bl	800400c <_init>
 8003fda:	4c0a      	ldr	r4, [pc, #40]	@ (8004004 <__libc_init_array+0x40>)
 8003fdc:	4d0a      	ldr	r5, [pc, #40]	@ (8004008 <__libc_init_array+0x44>)
 8003fde:	1b64      	subs	r4, r4, r5
 8003fe0:	10a4      	asrs	r4, r4, #2
 8003fe2:	42a6      	cmp	r6, r4
 8003fe4:	d105      	bne.n	8003ff2 <__libc_init_array+0x2e>
 8003fe6:	bd70      	pop	{r4, r5, r6, pc}
 8003fe8:	00b3      	lsls	r3, r6, #2
 8003fea:	58eb      	ldr	r3, [r5, r3]
 8003fec:	4798      	blx	r3
 8003fee:	3601      	adds	r6, #1
 8003ff0:	e7ee      	b.n	8003fd0 <__libc_init_array+0xc>
 8003ff2:	00b3      	lsls	r3, r6, #2
 8003ff4:	58eb      	ldr	r3, [r5, r3]
 8003ff6:	4798      	blx	r3
 8003ff8:	3601      	adds	r6, #1
 8003ffa:	e7f2      	b.n	8003fe2 <__libc_init_array+0x1e>
 8003ffc:	08004120 	.word	0x08004120
 8004000:	08004120 	.word	0x08004120
 8004004:	08004124 	.word	0x08004124
 8004008:	08004120 	.word	0x08004120

0800400c <_init>:
 800400c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800400e:	46c0      	nop			@ (mov r8, r8)
 8004010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004012:	bc08      	pop	{r3}
 8004014:	469e      	mov	lr, r3
 8004016:	4770      	bx	lr

08004018 <_fini>:
 8004018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800401a:	46c0      	nop			@ (mov r8, r8)
 800401c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800401e:	bc08      	pop	{r3}
 8004020:	469e      	mov	lr, r3
 8004022:	4770      	bx	lr
